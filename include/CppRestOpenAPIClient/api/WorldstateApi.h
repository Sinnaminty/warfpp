/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WorldstateApi.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_WorldstateApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_WorldstateApi_H_

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Alerts.h"
#include "CppRestOpenAPIClient/model/Arbitration.h"
#include "CppRestOpenAPIClient/model/ArchonHunt.h"
#include "CppRestOpenAPIClient/model/CambionCycle.h"
#include "CppRestOpenAPIClient/model/CetusCycle.h"
#include "CppRestOpenAPIClient/model/ConclaveChallenges.h"
#include "CppRestOpenAPIClient/model/Construction.h"
#include "CppRestOpenAPIClient/model/DailyDeals.h"
#include "CppRestOpenAPIClient/model/DarkSectors.h"
#include "CppRestOpenAPIClient/model/EarthCycle.h"
#include "CppRestOpenAPIClient/model/Events.h"
#include "CppRestOpenAPIClient/model/Fissures.h"
#include "CppRestOpenAPIClient/model/FlashSales.h"
#include "CppRestOpenAPIClient/model/GetOutpostsByPlatform_200_response.h"
#include "CppRestOpenAPIClient/model/GetWorldstateByPlatform_400_response.h"
#include "CppRestOpenAPIClient/model/GetWorldstateByPlatform_404_response.h"
#include "CppRestOpenAPIClient/model/GlobalUpgrades.h"
#include "CppRestOpenAPIClient/model/Invasions.h"
#include "CppRestOpenAPIClient/model/Language.h"
#include "CppRestOpenAPIClient/model/News.h"
#include "CppRestOpenAPIClient/model/Nightwave.h"
#include "CppRestOpenAPIClient/model/PersistentEnemies.h"
#include "CppRestOpenAPIClient/model/Platform.h"
#include "CppRestOpenAPIClient/model/RivenType.h"
#include "CppRestOpenAPIClient/model/Simaris.h"
#include "CppRestOpenAPIClient/model/Sortie.h"
#include "CppRestOpenAPIClient/model/SteelPath.h"
#include "CppRestOpenAPIClient/model/SyndicateMissions.h"
#include "CppRestOpenAPIClient/model/VallisCycle.h"
#include "CppRestOpenAPIClient/model/VoidTrader.h"
#include "CppRestOpenAPIClient/model/Ws.h"
#include <boost/optional.hpp>
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

class WorldstateApi {
public:
  explicit WorldstateApi(std::shared_ptr<const ApiClient> apiClient);

  virtual ~WorldstateApi();

  /// <summary>
  /// Get Persistent Enemy Data
  /// </summary>
  /// <remarks>
  /// Data about current acolytes attacking the Sol System
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<PersistentEnemies>> getAcolytesByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Alerts data
  /// </summary>
  /// <remarks>
  /// Description and rewards for Alerts
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Alerts>> getAlertsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// [Unstable] Arbitration data
  /// </summary>
  /// <remarks>
  /// Description of the currently active arbitration
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Arbitration>> getArbitrationByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Archon Hunt Data
  /// </summary>
  /// <remarks>
  /// Data about the missions for the current archon hunt
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<ArchonHunt>> getArchonHuntByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Void Trader Information
  /// </summary>
  /// <remarks>
  /// Information on the current Void Trader offerings, or when he will arrive.
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<VoidTrader>> getBaroByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Current Cambion Drift Status
  /// </summary>
  /// <remarks>
  /// Data on the Vome/Fass cycle for the Cambion Drift on Deimos
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<CambionCycle>> getCambionByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Current Cetus Status
  /// </summary>
  /// <remarks>
  /// Data on the day/night cycle for Cetus on Earth
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<CetusCycle>> getCetusByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Conclave Challenge Data
  /// </summary>
  /// <remarks>
  /// Data on each day and week&#39;s conclave challenges
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<ConclaveChallenges>>
  getConclaveChallengesByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Construction Progress for Fomorians and Razorbacks
  /// </summary>
  /// <remarks>
  /// Construction percentages for showing how far constructed the enemy fleets
  /// are.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Construction>> getConstructionByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Dark Sector occupation and history
  /// </summary>
  /// <remarks>
  /// Dark Sector (Rail Wars) data and history. Digital Extremes has emptied
  /// several of these.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<DarkSectors>> getDarkSectorsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Daily Deal information from Darvo
  /// </summary>
  /// <remarks>
  /// Darvo&#39;s Daily Deal details
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<DailyDeals>> getDealsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Earth rotation information
  /// </summary>
  /// <remarks>
  /// The current Earth day/night cycle progress.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<EarthCycle>> getEarthByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Listing of ongoing events
  /// </summary>
  /// <remarks>
  /// Events, such as Fomorian Attacks are included here
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Events>> getEventsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Data on current fissures
  /// </summary>
  /// <remarks>
  /// Information about current Void Fissure missions
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Fissures>> getFissuresByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Global Upgrades
  /// </summary>
  /// <remarks>
  /// Any current modifiers applied to all users, such as double drops.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<GlobalUpgrades>> getGlobalEffectsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Invasion Data
  /// </summary>
  /// <remarks>
  /// Data on invasion missions, such as estimated completion time, rewards,
  /// etc.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Invasions>> getInvasionsByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// [Unstable] Current Kuva Mission listing
  /// </summary>
  /// <remarks>
  /// Current Kuva Mission listing (provided by
  /// [semlar](https://10o.io/kuvalog)).
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::vector<std::shared_ptr<Arbitration>>> getKuvaByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Listing of News items
  /// </summary>
  /// <remarks>
  /// Translated News items from the worldstate
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  pplx::task<std::shared_ptr<News>>
  getNewsByPlatform(std::shared_ptr<Platform> platform) const;
  /// <summary>
  /// Get the current Nightwave state.
  /// </summary>
  /// <remarks>
  /// The Current cycle and challenges of Nightwave, a battle-pass-esque
  /// rotation and challenge system
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Nightwave>> getNightwaveByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Sentient Outpost, if any
  /// </summary>
  /// <remarks>
  /// Status data for current Sentient Outpost, if any. Parsed source is
  /// combined data from DE\\&#39;s worldstate and [semlar\\&#39;s
  /// data](https://semlar.com/anomaly.json)
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<GetOutpostsByPlatform_200_response>>
  getOutpostsByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Riven statistic data
  /// </summary>
  /// <remarks>
  /// Data about averages, deviations, medians, miniums, and maxes for all
  /// rivens for the provided platform
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<RivenType>> getRivensByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Flash Sales from Darvo
  /// </summary>
  /// <remarks>
  /// Popular Deals, discounts, featured deals.
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<FlashSales>> getSalesByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Sanctuary Status
  /// </summary>
  /// <remarks>
  /// Status data for Simaris&#39; Sanctuary
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Simaris>> getSimarisByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Sortie Data
  /// </summary>
  /// <remarks>
  /// Data about the missions for the current sortie
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Sortie>> getSortieByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Current Steel Path Data
  /// </summary>
  /// <remarks>
  /// Data about the missions for the current sortie
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<SteelPath>> getSteelPathByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Listing of Syndicate mission nodes
  /// </summary>
  /// <remarks>
  /// Cycling through different nodes each day, these are a general listing of
  /// the nodes that each syndicate will use for the day.
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<SyndicateMissions>> getSyndicatesByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the timestamp that the current worldstate was generated at.
  /// </summary>
  /// <remarks>
  /// The time that the worldstate was last generated
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<utility::string_t> getTimestampByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current state of the Orb Vallis
  /// </summary>
  /// <remarks>
  /// The current cycle of the Orb Vallis warm/cold cycle
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<VallisCycle>> getVallisByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Varzia Information
  /// </summary>
  /// <remarks>
  /// Information on the current Varzia offerings, or when she will arrive.
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<VoidTrader>> getVarziaByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get the current Void Traders Information
  /// </summary>
  /// <remarks>
  /// Information on the current Void Traders offerings, or when they will
  /// arrive.
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::vector<std::shared_ptr<VoidTrader>>> getVoidTradersByPlatform(
      std::shared_ptr<Platform> platform, std::shared_ptr<Language> language,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Warframe Worldstate Data for the provided platform
  /// </summary>
  /// <remarks>
  /// The full translated Warframe Worldstate
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<Ws>> getWorldstateByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Riven statistic data
  /// </summary>
  /// <remarks>
  /// Data about averages, deviations, medians, miniums, and maxes for rivens
  /// whose name match the query for the provided platform
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="query">Riven name to search for</param>
  pplx::task<std::shared_ptr<RivenType>>
  searchRivensByPlatform(std::shared_ptr<Platform> platform,
                         utility::string_t query) const;

protected:
  std::shared_ptr<const ApiClient> m_ApiClient;
};

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_API_WorldstateApi_H_ */
