/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RivensApi.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_RivensApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_RivensApi_H_

#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/GetWorldstateByPlatform_400_response.h"
#include "CppRestOpenAPIClient/model/Language.h"
#include "CppRestOpenAPIClient/model/Platform.h"
#include "CppRestOpenAPIClient/model/RivenType.h"
#include <boost/optional.hpp>
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

class RivensApi {
public:
  explicit RivensApi(std::shared_ptr<const ApiClient> apiClient);

  virtual ~RivensApi();

  /// <summary>
  /// Get Riven statistic data
  /// </summary>
  /// <remarks>
  /// Data about averages, deviations, medians, miniums, and maxes for all
  /// rivens for the provided platform
  /// </remarks>
  /// <param name="language">Language to retrieve. With Caching, this has become
  /// required if you want your reply to always match your request.</param>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="acceptLanguage">Language to retrieve. Doesn&#39;t always work
  /// with caching. See Language query string parameter. (optional, default to
  /// new Language())</param>
  pplx::task<std::shared_ptr<RivenType>> getRivensByPlatform(
      std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
      boost::optional<std::shared_ptr<Language>> acceptLanguage) const;
  /// <summary>
  /// Get Riven statistic data
  /// </summary>
  /// <remarks>
  /// Data about averages, deviations, medians, miniums, and maxes for rivens
  /// whose name match the query for the provided platform
  /// </remarks>
  /// <param name="platform">Platform to provide data for</param>
  /// <param name="query">Riven name to search for</param>
  pplx::task<std::shared_ptr<RivenType>>
  searchRivensByPlatform(std::shared_ptr<Platform> platform,
                         utility::string_t query) const;

protected:
  std::shared_ptr<const ApiClient> m_ApiClient;
};

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_API_RivensApi_H_ */
