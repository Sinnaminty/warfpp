/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GlobalUpgrades_inner.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalUpgrades_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalUpgrades_inner_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class GlobalUpgrades_inner : public ModelBase {
public:
  GlobalUpgrades_inner();
  virtual ~GlobalUpgrades_inner();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// GlobalUpgrades_inner members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getStart() const;
  bool startIsSet() const;
  void unsetStart();

  void setStart(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEnd() const;
  bool endIsSet() const;
  void unsetEnd();

  void setEnd(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUpgrade() const;
  bool upgradeIsSet() const;
  void unsetUpgrade();

  void setUpgrade(const utility::string_t &value);

  /// <summary>
  /// Operation descriptor
  /// </summary>
  utility::string_t getOperation() const;
  bool operationIsSet() const;
  void unsetOperation();

  void setOperation(const utility::string_t &value);

  /// <summary>
  /// Symbol corresponding to operation
  /// </summary>
  utility::string_t getOperationSymbol() const;
  bool operationSymbolIsSet() const;
  void unsetOperationSymbol();

  void setOperationSymbol(const utility::string_t &value);

  /// <summary>
  /// Value corresponding to performing the operation
  /// </summary>
  double getUpgradeOperationValue() const;
  bool upgradeOperationValueIsSet() const;
  void unsetUpgradeOperationValue();

  void setUpgradeOperationValue(double value);

  /// <summary>
  /// Whether the upgrade has expired
  /// </summary>
  bool isExpired() const;
  bool expiredIsSet() const;
  void unsetExpired();

  void setExpired(bool value);

  /// <summary>
  /// Formatted short string designating when the upgrade will expire.
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

  /// <summary>
  /// Plain text description of the global upgrade.
  /// </summary>
  utility::string_t getDesc() const;
  bool descIsSet() const;
  void unsetDesc();

  void setDesc(const utility::string_t &value);

protected:
  utility::string_t m_Start;
  bool m_StartIsSet;
  utility::string_t m_End;
  bool m_EndIsSet;
  utility::string_t m_Upgrade;
  bool m_UpgradeIsSet;
  utility::string_t m_Operation;
  bool m_OperationIsSet;
  utility::string_t m_OperationSymbol;
  bool m_OperationSymbolIsSet;
  double m_UpgradeOperationValue;
  bool m_UpgradeOperationValueIsSet;
  bool m_Expired;
  bool m_ExpiredIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
  utility::string_t m_Desc;
  bool m_DescIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GlobalUpgrades_inner_H_ */
