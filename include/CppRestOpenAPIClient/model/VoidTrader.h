/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VoidTrader.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_VoidTrader_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_VoidTrader_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/VoidTrader_allOf_inventory.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class VoidTrader_allOf_inventory;

/// <summary>
///
/// </summary>
class VoidTrader : public ModelBase {
public:
  VoidTrader();
  virtual ~VoidTrader();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// VoidTrader members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCharacter() const;
  bool characterIsSet() const;
  void unsetCharacter();

  void setCharacter(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getLocation() const;
  bool locationIsSet() const;
  void unsetLocation();

  void setLocation(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<VoidTrader_allOf_inventory>> &getInventory();
  bool inventoryIsSet() const;
  void unsetInventory();

  void setInventory(
      const std::vector<std::shared_ptr<VoidTrader_allOf_inventory>> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPsId() const;
  bool psIdIsSet() const;
  void unsetPsId();

  void setPsId(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEndString() const;
  bool endStringIsSet() const;
  void unsetEndString();

  void setEndString(const utility::string_t &value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  utility::string_t m_Character;
  bool m_CharacterIsSet;
  utility::string_t m_Location;
  bool m_LocationIsSet;
  std::vector<std::shared_ptr<VoidTrader_allOf_inventory>> m_Inventory;
  bool m_InventoryIsSet;
  utility::string_t m_PsId;
  bool m_PsIdIsSet;
  utility::string_t m_EndString;
  bool m_EndStringIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_VoidTrader_H_ */
