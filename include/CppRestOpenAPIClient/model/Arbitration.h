/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Arbitration.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Arbitration_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Arbitration_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Arbitration_allOf_enemy.h"
#include "CppRestOpenAPIClient/model/Arbitration_allOf_enemyKey.h"
#include "CppRestOpenAPIClient/model/Arbitration_allOf_typeKey.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class Arbitration : public ModelBase {
public:
  Arbitration();
  virtual ~Arbitration();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Arbitration members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  /// Short-time-formatted duration string representing the start of the event
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  /// Whether the event is currently active
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  /// Plain name for the node
  /// </summary>
  utility::string_t getNode() const;
  bool nodeIsSet() const;
  void unsetNode();

  void setNode(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Arbitration_allOf_enemy> getEnemy() const;
  bool enemyIsSet() const;
  void unsetEnemy();

  void setEnemy(const std::shared_ptr<Arbitration_allOf_enemy> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Arbitration_allOf_enemyKey> getEnemyKey() const;
  bool enemyKeyIsSet() const;
  void unsetEnemyKey();

  void setEnemyKey(const std::shared_ptr<Arbitration_allOf_enemyKey> &value);

  /// <summary>
  /// Mission type localized
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Arbitration_allOf_typeKey> getTypeKey() const;
  bool typeKeyIsSet() const;
  void unsetTypeKey();

  void setTypeKey(const std::shared_ptr<Arbitration_allOf_typeKey> &value);

  /// <summary>
  /// Whether this mission requires archwing
  /// </summary>
  bool isArchwing() const;
  bool archwingIsSet() const;
  void unsetArchwing();

  void setArchwing(bool value);

  /// <summary>
  /// Whether this mission requires sharkwing
  /// </summary>
  bool isSharkwing() const;
  bool sharkwingIsSet() const;
  void unsetSharkwing();

  void setSharkwing(bool value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  utility::string_t m_Node;
  bool m_NodeIsSet;
  std::shared_ptr<Arbitration_allOf_enemy> m_Enemy;
  bool m_EnemyIsSet;
  std::shared_ptr<Arbitration_allOf_enemyKey> m_EnemyKey;
  bool m_EnemyKeyIsSet;
  utility::string_t m_Type;
  bool m_TypeIsSet;
  std::shared_ptr<Arbitration_allOf_typeKey> m_TypeKey;
  bool m_TypeKeyIsSet;
  bool m_Archwing;
  bool m_ArchwingIsSet;
  bool m_Sharkwing;
  bool m_SharkwingIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Arbitration_H_ */
