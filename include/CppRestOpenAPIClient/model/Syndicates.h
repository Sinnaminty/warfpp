/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Syndicates.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Syndicates_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Syndicates_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Syndicates_ArbitersSyndicate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Syndicates_ArbitersSyndicate;

/// <summary>
///
/// </summary>
class Syndicates : public ModelBase {
public:
  Syndicates();
  virtual ~Syndicates();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Syndicates members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getArbitersSyndicate() const;
  bool arbitersSyndicateIsSet() const;
  void unsetArbitersSyndicate();

  void setArbitersSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate>
  getCephalonSudaSyndicate() const;
  bool cephalonSudaSyndicateIsSet() const;
  void unsetCephalonSudaSyndicate();

  void setCephalonSudaSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getNewLokaSyndicate() const;
  bool newLokaSyndicateIsSet() const;
  void unsetNewLokaSyndicate();

  void setNewLokaSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getPerrinSyndicate() const;
  bool perrinSyndicateIsSet() const;
  void unsetPerrinSyndicate();

  void setPerrinSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate>
  getSteelMeridianSyndicate() const;
  bool steelMeridianSyndicateIsSet() const;
  void unsetSteelMeridianSyndicate();

  void setSteelMeridianSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getRedVeilSyndicate() const;
  bool redVeilSyndicateIsSet() const;
  void unsetRedVeilSyndicate();

  void setRedVeilSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getCetusSyndicate() const;
  bool cetusSyndicateIsSet() const;
  void unsetCetusSyndicate();

  void
  setCetusSyndicate(const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getQuillsSyndicate() const;
  bool quillsSyndicateIsSet() const;
  void unsetQuillsSyndicate();

  void setQuillsSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getAssassinsSyndicate() const;
  bool assassinsSyndicateIsSet() const;
  void unsetAssassinsSyndicate();

  void setAssassinsSyndicate(
      const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicates_ArbitersSyndicate> getEventSyndicate() const;
  bool eventSyndicateIsSet() const;
  void unsetEventSyndicate();

  void
  setEventSyndicate(const std::shared_ptr<Syndicates_ArbitersSyndicate> &value);

protected:
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_ArbitersSyndicate;
  bool m_ArbitersSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_CephalonSudaSyndicate;
  bool m_CephalonSudaSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_NewLokaSyndicate;
  bool m_NewLokaSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_PerrinSyndicate;
  bool m_PerrinSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_SteelMeridianSyndicate;
  bool m_SteelMeridianSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_RedVeilSyndicate;
  bool m_RedVeilSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_CetusSyndicate;
  bool m_CetusSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_QuillsSyndicate;
  bool m_QuillsSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_AssassinsSyndicate;
  bool m_AssassinsSyndicateIsSet;
  std::shared_ptr<Syndicates_ArbitersSyndicate> m_EventSyndicate;
  bool m_EventSyndicateIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Syndicates_H_ */
