/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Items_inner.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Items_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Items_inner_H_

#include <variant>

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Attack.h"
#include "CppRestOpenAPIClient/model/Introduced.h"
#include "CppRestOpenAPIClient/model/Item.h"
#include "CppRestOpenAPIClient/model/MeleeWeapon.h"
#include "CppRestOpenAPIClient/model/Mod.h"
#include "CppRestOpenAPIClient/model/Mod_allOf_levelStats.h"
#include "CppRestOpenAPIClient/model/Patchlog.h"
#include "CppRestOpenAPIClient/model/Polarity.h"
#include "CppRestOpenAPIClient/model/RangedWeapon.h"
#include "CppRestOpenAPIClient/model/ShallowItem.h"
#include "CppRestOpenAPIClient/model/Weapon.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Patchlog;
class ShallowItem;
class Introduced;
class Attack;
class Mod_allOf_levelStats;

class Items_inner {
public:
  Items_inner() = default;
  ~Items_inner() = default;

  /////////////////////////////////////////////

  void validate();

  web::json::value toJson() const;

  template <typename Target> bool fromJson(const web::json::value &json) {
    // convert json to Target type
    Target target;
    if (!target.fromJson(json)) {
      return false;
    }

    m_variantValue = target;
    return true;
  }

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const;

  template <typename Target>
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) {
    // convert multipart to Target type
    Target target;
    if (!target.fromMultiPart(multipart, namePrefix)) {
      return false;
    }

    m_variantValue = target;
    return true;
  }

  /////////////////////////////////////////////
  /// Items_inner members

  using VariantType =
      std::variant<Item, MeleeWeapon, Mod, RangedWeapon, Weapon>;

  const VariantType &getVariant() const;
  void setVariant(VariantType value);

protected:
  VariantType m_variantValue;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Items_inner_H_ */
