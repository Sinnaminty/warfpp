/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ArchonHunt.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ArchonHunt_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ArchonHunt_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ArchonHunt_allOf_faction.h"
#include "CppRestOpenAPIClient/model/ArchonHunt_allOf_factionKey.h"
#include "CppRestOpenAPIClient/model/Mission.h"
#include <cpprest/details/basic_types.h>
#include <set>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Mission;

/// <summary>
///
/// </summary>
class ArchonHunt : public ModelBase {
public:
  ArchonHunt();
  virtual ~ArchonHunt();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// ArchonHunt members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  /// Short-time-formatted duration string representing the start of the event
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  /// Whether the event is currently active
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getRewardPool() const;
  bool rewardPoolIsSet() const;
  void unsetRewardPool();

  void setRewardPool(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::set<std::shared_ptr<Mission>> &getMissions();
  bool missionsIsSet() const;
  void unsetMissions();

  void setMissions(const std::set<std::shared_ptr<Mission>> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getBoss() const;
  bool bossIsSet() const;
  void unsetBoss();

  void setBoss(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ArchonHunt_allOf_faction> getFaction() const;
  bool factionIsSet() const;
  void unsetFaction();

  void setFaction(const std::shared_ptr<ArchonHunt_allOf_faction> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ArchonHunt_allOf_factionKey> getFactionKey() const;
  bool factionKeyIsSet() const;
  void unsetFactionKey();

  void setFactionKey(const std::shared_ptr<ArchonHunt_allOf_factionKey> &value);

  /// <summary>
  ///
  /// </summary>
  bool isExpired() const;
  bool expiredIsSet() const;
  void unsetExpired();

  void setExpired(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  utility::string_t m_RewardPool;
  bool m_RewardPoolIsSet;
  std::set<std::shared_ptr<Mission>> m_Missions;
  bool m_MissionsIsSet;
  utility::string_t m_Boss;
  bool m_BossIsSet;
  std::shared_ptr<ArchonHunt_allOf_faction> m_Faction;
  bool m_FactionIsSet;
  std::shared_ptr<ArchonHunt_allOf_factionKey> m_FactionKey;
  bool m_FactionKeyIsSet;
  bool m_Expired;
  bool m_ExpiredIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ArchonHunt_H_ */
