/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Alert.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Alert_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Alert_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Alert_mission.h"
#include "CppRestOpenAPIClient/model/RewardType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Alert_mission;

/// <summary>
///
/// </summary>
class Alert : public ModelBase {
public:
  Alert();
  virtual ~Alert();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Alert members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Alert_mission> getMission() const;
  bool missionIsSet() const;
  void unsetMission();

  void setMission(const std::shared_ptr<Alert_mission> &value);

  /// <summary>
  ///
  /// </summary>
  bool isExpired() const;
  bool expiredIsSet() const;
  void unsetExpired();

  void setExpired(bool value);

  /// <summary>
  /// Short-formatted string estimating the time until the event/mission is
  /// closed
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<RewardType>> &getRewardTypes();
  bool rewardTypesIsSet() const;
  void unsetRewardTypes();

  void setRewardTypes(const std::vector<std::shared_ptr<RewardType>> &value);

protected:
  std::shared_ptr<Alert_mission> m_Mission;
  bool m_MissionIsSet;
  bool m_Expired;
  bool m_ExpiredIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
  std::vector<std::shared_ptr<RewardType>> m_RewardTypes;
  bool m_RewardTypesIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Alert_H_ */
