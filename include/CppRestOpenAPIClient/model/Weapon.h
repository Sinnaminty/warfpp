/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Weapon.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Weapon_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Weapon_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Attack.h"
#include "CppRestOpenAPIClient/model/Introduced.h"
#include "CppRestOpenAPIClient/model/Patchlog.h"
#include "CppRestOpenAPIClient/model/Polarity.h"
#include "CppRestOpenAPIClient/model/ShallowItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Patchlog;
class ShallowItem;
class Introduced;
class Attack;

/// <summary>
///
/// </summary>
class Weapon : public ModelBase {
public:
  Weapon();
  virtual ~Weapon();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Weapon members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getName() const;
  bool nameIsSet() const;
  void unsetName();

  void setName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUniqueName() const;
  bool uniqueNameIsSet() const;
  void unsetUniqueName();

  void setUniqueName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDescription() const;
  bool descriptionIsSet() const;
  void unsetDescription();

  void setDescription(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isTradable() const;
  bool tradableIsSet() const;
  void unsetTradable();

  void setTradable(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCategory() const;
  bool categoryIsSet() const;
  void unsetCategory();

  void setCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getProductCategory() const;
  bool productCategoryIsSet() const;
  void unsetProductCategory();

  void setProductCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Patchlog>> &getPatchlogs();
  bool patchlogsIsSet() const;
  void unsetPatchlogs();

  void setPatchlogs(const std::vector<std::shared_ptr<Patchlog>> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<ShallowItem>> &getComponents();
  bool componentsIsSet() const;
  void unsetComponents();

  void setComponents(const std::vector<std::shared_ptr<ShallowItem>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Introduced> getIntroduced() const;
  bool introducedIsSet() const;
  void unsetIntroduced();

  void setIntroduced(const std::shared_ptr<Introduced> &value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getEstimatedVaultDate() const;
  bool estimatedVaultDateIsSet() const;
  void unsetEstimatedVaultDate();

  void setEstimatedVaultDate(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUrl() const;
  bool urlIsSet() const;
  void unsetUrl();

  void setUrl(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getMr() const;
  bool mrIsSet() const;
  void unsetMr();

  void setMr(double value);

  /// <summary>
  ///
  /// </summary>
  double getRivenDisposition() const;
  bool rivenDispositionIsSet() const;
  void unsetRiven_disposition();

  void setRivenDisposition(double value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Polarity>> &getPolarities();
  bool polaritiesIsSet() const;
  void unsetPolarities();

  void setPolarities(const std::vector<std::shared_ptr<Polarity>> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getThumbnail() const;
  bool thumbnailIsSet() const;
  void unsetThumbnail();

  void setThumbnail(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t> &getTags();
  bool tagsIsSet() const;
  void unsetTags();

  void setTags(const std::vector<utility::string_t> &value);

  /// <summary>
  ///
  /// </summary>
  bool isVaulted() const;
  bool vaultedIsSet() const;
  void unsetVaulted();

  void setVaulted(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getMarketCost() const;
  bool marketCostIsSet() const;
  void unsetMarketCost();

  void setMarketCost(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getBpCost() const;
  bool bpCostIsSet() const;
  void unsetBpCost();

  void setBpCost(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Attack>> &getAttacks();
  bool attacksIsSet() const;
  void unsetAttacks();

  void setAttacks(const std::vector<std::shared_ptr<Attack>> &value);

  /// <summary>
  ///
  /// </summary>
  int32_t getMasteryReq() const;
  bool masteryReqIsSet() const;
  void unsetMasteryReq();

  void setMasteryReq(int32_t value);

  /// <summary>
  ///
  /// </summary>
  int32_t getBuildPrice() const;
  bool buildPriceIsSet() const;
  void unsetBuildPrice();

  void setBuildPrice(int32_t value);

  /// <summary>
  ///
  /// </summary>
  int32_t getBuildTime() const;
  bool buildTimeIsSet() const;
  void unsetBuildTime();

  void setBuildTime(int32_t value);

  /// <summary>
  ///
  /// </summary>
  int32_t getSkipBuildTimePrice() const;
  bool skipBuildTimePriceIsSet() const;
  void unsetSkipBuildTimePrice();

  void setSkipBuildTimePrice(int32_t value);

  /// <summary>
  ///
  /// </summary>
  int32_t getBuildQuantity() const;
  bool buildQuantityIsSet() const;
  void unsetBuildQuantity();

  void setBuildQuantity(int32_t value);

  /// <summary>
  ///
  /// </summary>
  bool isConsumeOnBuild() const;
  bool consumeOnBuildIsSet() const;
  void unsetConsumeOnBuild();

  void setConsumeOnBuild(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getWikiaThumbnail() const;
  bool wikiaThumbnailIsSet() const;
  void unsetWikiaThumbnail();

  void setWikiaThumbnail(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getWikiaUrl() const;
  bool wikiaUrlIsSet() const;
  void unsetWikiaUrl();

  void setWikiaUrl(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  float getCriticalChance() const;
  bool criticalChanceIsSet() const;
  void unsetCriticalChance();

  void setCriticalChance(float value);

  /// <summary>
  ///
  /// </summary>
  float getCriticalMultiplier() const;
  bool criticalMultiplierIsSet() const;
  void unsetCriticalMultiplier();

  void setCriticalMultiplier(float value);

  /// <summary>
  ///
  /// </summary>
  int32_t getDisposition() const;
  bool dispositionIsSet() const;
  void unsetDisposition();

  void setDisposition(int32_t value);

  /// <summary>
  ///
  /// </summary>
  float getFireRate() const;
  bool fireRateIsSet() const;
  void unsetFireRate();

  void setFireRate(float value);

  /// <summary>
  ///
  /// </summary>
  float getOmegaAttenuation() const;
  bool omegaAttenuationIsSet() const;
  void unsetOmegaAttenuation();

  void setOmegaAttenuation(float value);

  /// <summary>
  ///
  /// </summary>
  float getProcChance() const;
  bool procChanceIsSet() const;
  void unsetProcChance();

  void setProcChance(float value);

  /// <summary>
  ///
  /// </summary>
  float getReleaseDate() const;
  bool releaseDateIsSet() const;
  void unsetReleaseDate();

  void setReleaseDate(float value);

  /// <summary>
  /// Specifies the slot of an item.
  /// </summary>
  int32_t getSlot() const;
  bool slotIsSet() const;
  void unsetSlot();

  void setSlot(int32_t value);

  /// <summary>
  ///
  /// </summary>
  int32_t getTotalDamage() const;
  bool totalDamageIsSet() const;
  void unsetTotalDamage();

  void setTotalDamage(int32_t value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getVaultDate() const;
  bool vaultDateIsSet() const;
  void unsetVaultDate();

  void setVaultDate(const utility::datetime &value);

protected:
  utility::string_t m_Name;
  bool m_NameIsSet;
  utility::string_t m_UniqueName;
  bool m_UniqueNameIsSet;
  utility::string_t m_Description;
  bool m_DescriptionIsSet;
  utility::string_t m_Type;
  bool m_TypeIsSet;
  bool m_Tradable;
  bool m_TradableIsSet;
  utility::string_t m_Category;
  bool m_CategoryIsSet;
  utility::string_t m_ProductCategory;
  bool m_ProductCategoryIsSet;
  std::vector<std::shared_ptr<Patchlog>> m_Patchlogs;
  bool m_PatchlogsIsSet;
  std::vector<std::shared_ptr<ShallowItem>> m_Components;
  bool m_ComponentsIsSet;
  std::shared_ptr<Introduced> m_Introduced;
  bool m_IntroducedIsSet;
  utility::datetime m_EstimatedVaultDate;
  bool m_EstimatedVaultDateIsSet;
  utility::string_t m_Url;
  bool m_UrlIsSet;
  double m_Mr;
  bool m_MrIsSet;
  double m_Riven_disposition;
  bool m_Riven_dispositionIsSet;
  std::vector<std::shared_ptr<Polarity>> m_Polarities;
  bool m_PolaritiesIsSet;
  utility::string_t m_Thumbnail;
  bool m_ThumbnailIsSet;
  std::vector<utility::string_t> m_Tags;
  bool m_TagsIsSet;
  bool m_Vaulted;
  bool m_VaultedIsSet;
  utility::string_t m_MarketCost;
  bool m_MarketCostIsSet;
  utility::string_t m_BpCost;
  bool m_BpCostIsSet;
  std::vector<std::shared_ptr<Attack>> m_Attacks;
  bool m_AttacksIsSet;
  int32_t m_MasteryReq;
  bool m_MasteryReqIsSet;
  int32_t m_BuildPrice;
  bool m_BuildPriceIsSet;
  int32_t m_BuildTime;
  bool m_BuildTimeIsSet;
  int32_t m_SkipBuildTimePrice;
  bool m_SkipBuildTimePriceIsSet;
  int32_t m_BuildQuantity;
  bool m_BuildQuantityIsSet;
  bool m_ConsumeOnBuild;
  bool m_ConsumeOnBuildIsSet;
  utility::string_t m_WikiaThumbnail;
  bool m_WikiaThumbnailIsSet;
  utility::string_t m_WikiaUrl;
  bool m_WikiaUrlIsSet;
  float m_CriticalChance;
  bool m_CriticalChanceIsSet;
  float m_CriticalMultiplier;
  bool m_CriticalMultiplierIsSet;
  int32_t m_Disposition;
  bool m_DispositionIsSet;
  float m_FireRate;
  bool m_FireRateIsSet;
  float m_OmegaAttenuation;
  bool m_OmegaAttenuationIsSet;
  float m_ProcChance;
  bool m_ProcChanceIsSet;
  float m_ReleaseDate;
  bool m_ReleaseDateIsSet;
  int32_t m_Slot;
  bool m_SlotIsSet;
  int32_t m_TotalDamage;
  bool m_TotalDamageIsSet;
  utility::datetime m_VaultDate;
  bool m_VaultDateIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Weapon_H_ */
