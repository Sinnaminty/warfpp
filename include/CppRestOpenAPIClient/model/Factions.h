/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Factions.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Factions_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Factions_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Conclave_modes_PVPMODE_ALL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Conclave_modes_PVPMODE_ALL;

/// <summary>
///
/// </summary>
class Factions : public ModelBase {
public:
  Factions();
  virtual ~Factions();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Factions members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getFCGRINEER() const;
  bool fCGRINEERIsSet() const;
  void unsetFC_GRINEER();

  void setFCGRINEER(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getFCCORPUS() const;
  bool fCCORPUSIsSet() const;
  void unsetFC_CORPUS();

  void setFCCORPUS(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getFCINFESTATION() const;
  bool fCINFESTATIONIsSet() const;
  void unsetFC_INFESTATION();

  void
  setFCINFESTATION(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getFCCORRUPTED() const;
  bool fCCORRUPTEDIsSet() const;
  void unsetFC_CORRUPTED();

  void setFCCORRUPTED(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getFCOROKIN() const;
  bool fCOROKINIsSet() const;
  void unsetFC_OROKIN();

  void setFCOROKIN(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

protected:
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_FC_GRINEER;
  bool m_FC_GRINEERIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_FC_CORPUS;
  bool m_FC_CORPUSIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_FC_INFESTATION;
  bool m_FC_INFESTATIONIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_FC_CORRUPTED;
  bool m_FC_CORRUPTEDIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_FC_OROKIN;
  bool m_FC_OROKINIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Factions_H_ */
