/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Fissure.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Fissure_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Fissure_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/AnyType.h"
#include "CppRestOpenAPIClient/model/Faction.h"
#include "CppRestOpenAPIClient/model/MissionType.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class Fissure : public ModelBase {
public:
  Fissure();
  virtual ~Fissure();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Fissure members

  /// <summary>
  /// Node name with planet
  /// </summary>
  utility::string_t getNode() const;
  bool nodeIsSet() const;
  void unsetNode();

  void setNode(const utility::string_t &value);

  /// <summary>
  /// Whether the fissure is still present
  /// </summary>
  bool isExpired() const;
  bool expiredIsSet() const;
  void unsetExpired();

  void setExpired(bool value);

  /// <summary>
  /// Short-formatted string estimating the time until the event/mission is
  /// closed
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<MissionType> getMissionType() const;
  bool missionTypeIsSet() const;
  void unsetMissionType();

  void setMissionType(const std::shared_ptr<MissionType> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<MissionType> getMissionKey() const;
  bool missionKeyIsSet() const;
  void unsetMissionKey();

  void setMissionKey(const std::shared_ptr<MissionType> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AnyType> getTier() const;
  bool tierIsSet() const;
  void unsetTier();

  void setTier(const std::shared_ptr<AnyType> &value);

  /// <summary>
  /// Numeric tier corresponding to the tier
  /// </summary>
  double getTierNum() const;
  bool tierNumIsSet() const;
  void unsetTierNum();

  void setTierNum(double value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Faction> getEnemy() const;
  bool enemyIsSet() const;
  void unsetEnemy();

  void setEnemy(const std::shared_ptr<Faction> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Faction> getEnemyKey() const;
  bool enemyKeyIsSet() const;
  void unsetEnemyKey();

  void setEnemyKey(const std::shared_ptr<Faction> &value);

  /// <summary>
  /// Whether this fissure is a void storm
  /// </summary>
  bool isIsStorm() const;
  bool isStormIsSet() const;
  void unsetIsStorm();

  void setIsStorm(bool value);

  /// <summary>
  /// Whether this fissure is on the Steel Path
  /// </summary>
  bool isIsHard() const;
  bool isHardIsSet() const;
  void unsetIsHard();

  void setIsHard(bool value);

protected:
  utility::string_t m_Node;
  bool m_NodeIsSet;
  bool m_Expired;
  bool m_ExpiredIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
  std::shared_ptr<MissionType> m_MissionType;
  bool m_MissionTypeIsSet;
  std::shared_ptr<MissionType> m_MissionKey;
  bool m_MissionKeyIsSet;
  std::shared_ptr<AnyType> m_Tier;
  bool m_TierIsSet;
  double m_TierNum;
  bool m_TierNumIsSet;
  std::shared_ptr<Faction> m_Enemy;
  bool m_EnemyIsSet;
  std::shared_ptr<Faction> m_EnemyKey;
  bool m_EnemyKeyIsSet;
  bool m_IsStorm;
  bool m_IsStormIsSet;
  bool m_IsHard;
  bool m_IsHardIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Fissure_H_ */
