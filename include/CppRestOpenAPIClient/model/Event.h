/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Event.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Event_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Event_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/Event_allOf_interimSteps.h"
#include "CppRestOpenAPIClient/model/Event_allOf_nextAlt.h"
#include "CppRestOpenAPIClient/model/Event_allOf_progressSteps.h"
#include "CppRestOpenAPIClient/model/Faction.h"
#include "CppRestOpenAPIClient/model/Reward.h"
#include "CppRestOpenAPIClient/model/Syndicate.h"
#include "CppRestOpenAPIClient/model/SyndicateJob.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Reward;
class SyndicateJob;
class Event_allOf_interimSteps;
class Event_allOf_progressSteps;
class Event_allOf_nextAlt;

/// <summary>
///
/// </summary>
class Event : public ModelBase {
public:
  Event();
  virtual ~Event();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Event members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  /// Short-time-formatted duration string representing the start of the event
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  /// Whether the event is currently active
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  /// Maximum score to complete the event
  /// </summary>
  double getMaximumScore() const;
  bool maximumScoreIsSet() const;
  void unsetMaximumScore();

  void setMaximumScore(double value);

  /// <summary>
  /// The current score for the event
  /// </summary>
  double getCurrentScore() const;
  bool currentScoreIsSet() const;
  void unsetCurrentScore();

  void setCurrentScore(double value);

  /// <summary>
  /// Interval for the first goal
  /// </summary>
  double getSmallInterval() const;
  bool smallIntervalIsSet() const;
  void unsetSmallInterval();

  void setSmallInterval(double value);

  /// <summary>
  /// Interval for the second intermediate score
  /// </summary>
  double getLargeInterval() const;
  bool largeIntervalIsSet() const;
  void unsetLargeInterval();

  void setLargeInterval(double value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Faction> getFaction() const;
  bool factionIsSet() const;
  void unsetFaction();

  void setFaction(const std::shared_ptr<Faction> &value);

  /// <summary>
  /// The description or \&quot;subtitle\&quot; for the event.
  /// </summary>
  utility::string_t getDescription() const;
  bool descriptionIsSet() const;
  void unsetDescription();

  void setDescription(const utility::string_t &value);

  /// <summary>
  /// Tooltip for the event
  /// </summary>
  utility::string_t getTooltip() const;
  bool tooltipIsSet() const;
  void unsetTooltip();

  void setTooltip(const utility::string_t &value);

  /// <summary>
  /// Node that the event is taking place on
  /// </summary>
  utility::string_t getNode() const;
  bool nodeIsSet() const;
  void unsetNode();

  void setNode(const utility::string_t &value);

  /// <summary>
  /// Nodes that the event is happening concurrently on
  /// </summary>
  std::vector<utility::string_t> &getConcurrentNodes();
  bool concurrentNodesIsSet() const;
  void unsetConcurrentNodes();

  void setConcurrentNodes(const std::vector<utility::string_t> &value);

  /// <summary>
  /// Node that is being attacked &amp; defended in the event.
  /// </summary>
  utility::string_t getVictimNode() const;
  bool victimNodeIsSet() const;
  void unsetVictimNode();

  void setVictimNode(const utility::string_t &value);

  /// <summary>
  /// Localized tag for the event score
  /// </summary>
  utility::string_t getScoreLocTag() const;
  bool scoreLocTagIsSet() const;
  void unsetScoreLocTag();

  void setScoreLocTag(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Reward>> &getRewards();
  bool rewardsIsSet() const;
  void unsetRewards();

  void setRewards(const std::vector<std::shared_ptr<Reward>> &value);

  /// <summary>
  /// Amount of health remaining for the target
  /// </summary>
  double getHealth() const;
  bool healthIsSet() const;
  void unsetHealth();

  void setHealth(double value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Syndicate> getAffiliatedWith() const;
  bool affiliatedWithIsSet() const;
  void unsetAffiliatedWith();

  void setAffiliatedWith(const std::shared_ptr<Syndicate> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SyndicateJob>> &getJobs();
  bool jobsIsSet() const;
  void unsetJobs();

  void setJobs(const std::vector<std::shared_ptr<SyndicateJob>> &value);

  /// <summary>
  /// Interim steps, marking progress towards the final goal.
  /// </summary>
  std::vector<std::shared_ptr<Event_allOf_interimSteps>> &getInterimSteps();
  bool interimStepsIsSet() const;
  void unsetInterimSteps();

  void setInterimSteps(
      const std::vector<std::shared_ptr<Event_allOf_interimSteps>> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Event_allOf_progressSteps>> &getProgressSteps();
  bool progressStepsIsSet() const;
  void unsetProgressSteps();

  void setProgressSteps(
      const std::vector<std::shared_ptr<Event_allOf_progressSteps>> &value);

  /// <summary>
  /// Total of progressSteps values.
  /// </summary>
  double getProgressTotal() const;
  bool progressTotalIsSet() const;
  void unsetProgressTotal();

  void setProgressTotal(double value);

  /// <summary>
  /// Whether to show the total score at the end of the mission
  /// </summary>
  bool isShowTotalAtEndOfMission() const;
  bool showTotalAtEndOfMissionIsSet() const;
  void unsetShowTotalAtEndOfMission();

  void setShowTotalAtEndOfMission(bool value);

  /// <summary>
  /// Whether the event is personal
  /// </summary>
  bool isIsPersonal() const;
  bool isPersonalIsSet() const;
  void unsetIsPersonal();

  void setIsPersonal(bool value);

  /// <summary>
  /// Whether the event is communal
  /// </summary>
  bool isIsCommunity() const;
  bool isCommunityIsSet() const;
  void unsetIsCommunity();

  void setIsCommunity(bool value);

  /// <summary>
  /// Drops in the area around the event node
  /// </summary>
  std::vector<utility::string_t> &getRegionDrops();
  bool regionDropsIsSet() const;
  void unsetRegionDrops();

  void setRegionDrops(const std::vector<utility::string_t> &value);

  /// <summary>
  /// Archwing Drops in effect while this event is active
  /// </summary>
  std::vector<utility::string_t> &getArchwingDrops();
  bool archwingDropsIsSet() const;
  void unsetArchwingDrops();

  void setArchwingDrops(const std::vector<utility::string_t> &value);

  /// <summary>
  /// Attempt to summarize event in a short string. (Do not use).
  /// </summary>
  utility::string_t getAsString() const;
  bool asStringIsSet() const;
  void unsetAsString();

  void setAsString(const utility::string_t &value);

  /// <summary>
  /// Miscellaneous metadata in a string provided by Digital Extremes
  /// </summary>
  std::shared_ptr<Object> getMetadata() const;
  bool metadataIsSet() const;
  void unsetMetadata();

  void setMetadata(const std::shared_ptr<Object> &value);

  /// <summary>
  /// Completion bonus amounts per-stage
  /// </summary>
  std::vector<double> &getCompletionBonuses();
  bool completionBonusesIsSet() const;
  void unsetCompletionBonuses();

  void setCompletionBonuses(std::vector<double> value);

  /// <summary>
  /// Internal string used for unknown purpose
  /// </summary>
  utility::string_t getScoreVar() const;
  bool scoreVarIsSet() const;
  void unsetScoreVar();

  void setScoreVar(const utility::string_t &value);

  /// <summary>
  /// Alternate Expiry. Use unknown.
  /// </summary>
  utility::datetime getAltExpiry() const;
  bool altExpiryIsSet() const;
  void unsetAltExpiry();

  void setAltExpiry(const utility::datetime &value);

  /// <summary>
  /// Alternate Activation. Use unknown.
  /// </summary>
  utility::datetime getAltActivation() const;
  bool altActivationIsSet() const;
  void unsetAltActivation();

  void setAltActivation(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Event_allOf_nextAlt> getNextAlt() const;
  bool nextAltIsSet() const;
  void unsetNextAlt();

  void setNextAlt(const std::shared_ptr<Event_allOf_nextAlt> &value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  double m_MaximumScore;
  bool m_MaximumScoreIsSet;
  double m_CurrentScore;
  bool m_CurrentScoreIsSet;
  double m_SmallInterval;
  bool m_SmallIntervalIsSet;
  double m_LargeInterval;
  bool m_LargeIntervalIsSet;
  std::shared_ptr<Faction> m_Faction;
  bool m_FactionIsSet;
  utility::string_t m_Description;
  bool m_DescriptionIsSet;
  utility::string_t m_Tooltip;
  bool m_TooltipIsSet;
  utility::string_t m_Node;
  bool m_NodeIsSet;
  std::vector<utility::string_t> m_ConcurrentNodes;
  bool m_ConcurrentNodesIsSet;
  utility::string_t m_VictimNode;
  bool m_VictimNodeIsSet;
  utility::string_t m_ScoreLocTag;
  bool m_ScoreLocTagIsSet;
  std::vector<std::shared_ptr<Reward>> m_Rewards;
  bool m_RewardsIsSet;
  double m_Health;
  bool m_HealthIsSet;
  std::shared_ptr<Syndicate> m_AffiliatedWith;
  bool m_AffiliatedWithIsSet;
  std::vector<std::shared_ptr<SyndicateJob>> m_Jobs;
  bool m_JobsIsSet;
  std::vector<std::shared_ptr<Event_allOf_interimSteps>> m_InterimSteps;
  bool m_InterimStepsIsSet;
  std::vector<std::shared_ptr<Event_allOf_progressSteps>> m_ProgressSteps;
  bool m_ProgressStepsIsSet;
  double m_ProgressTotal;
  bool m_ProgressTotalIsSet;
  bool m_ShowTotalAtEndOfMission;
  bool m_ShowTotalAtEndOfMissionIsSet;
  bool m_IsPersonal;
  bool m_IsPersonalIsSet;
  bool m_IsCommunity;
  bool m_IsCommunityIsSet;
  std::vector<utility::string_t> m_RegionDrops;
  bool m_RegionDropsIsSet;
  std::vector<utility::string_t> m_ArchwingDrops;
  bool m_ArchwingDropsIsSet;
  utility::string_t m_AsString;
  bool m_AsStringIsSet;
  std::shared_ptr<Object> m_Metadata;
  bool m_MetadataIsSet;
  std::vector<double> m_CompletionBonuses;
  bool m_CompletionBonusesIsSet;
  utility::string_t m_ScoreVar;
  bool m_ScoreVarIsSet;
  utility::datetime m_AltExpiry;
  bool m_AltExpiryIsSet;
  utility::datetime m_AltActivation;
  bool m_AltActivationIsSet;
  std::shared_ptr<Event_allOf_nextAlt> m_NextAlt;
  bool m_NextAltIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Event_H_ */
