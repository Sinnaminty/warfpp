/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DarkSectorHistory.h
 *
 * Describes a Dark Sector Historical Battle.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_DarkSectorHistory_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_DarkSectorHistory_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// Describes a Dark Sector Historical Battle.
/// </summary>
class DarkSectorHistory : public ModelBase {
public:
  DarkSectorHistory();
  virtual ~DarkSectorHistory();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// DarkSectorHistory members

  /// <summary>
  /// Clan or alliance that was defending.
  /// </summary>
  utility::string_t getDefender() const;
  bool defenderIsSet() const;
  void unsetDefender();

  void setDefender(const utility::string_t &value);

  /// <summary>
  /// Whether the defender was an alliance.
  /// </summary>
  bool isDefenderIsAlliance() const;
  bool defenderIsAllianceIsSet() const;
  void unsetDefenderIsAlliance();

  void setDefenderIsAlliance(bool value);

  /// <summary>
  /// Clan or alliance that was attacking.
  /// </summary>
  utility::string_t getAttacker() const;
  bool attackerIsSet() const;
  void unsetAttacker();

  void setAttacker(const utility::string_t &value);

  /// <summary>
  /// One of attacker or defender, whichever one won.
  /// </summary>
  utility::string_t getWinner() const;
  bool winnerIsSet() const;
  void unsetWinner();

  void setWinner(const utility::string_t &value);

  /// <summary>
  /// When the battle started.
  /// </summary>
  utility::string_t getStart() const;
  bool startIsSet() const;
  void unsetStart();

  void setStart(const utility::string_t &value);

  /// <summary>
  /// When the battle ended.
  /// </summary>
  utility::string_t getEnd() const;
  bool endIsSet() const;
  void unsetEnd();

  void setEnd(const utility::string_t &value);

protected:
  utility::string_t m_Defender;
  bool m_DefenderIsSet;
  bool m_DefenderIsAlliance;
  bool m_DefenderIsAllianceIsSet;
  utility::string_t m_Attacker;
  bool m_AttackerIsSet;
  utility::string_t m_Winner;
  bool m_WinnerIsSet;
  utility::string_t m_Start;
  bool m_StartIsSet;
  utility::string_t m_End;
  bool m_EndIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_DarkSectorHistory_H_ */
