/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConclaveChallenges_inner.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_ConclaveChallenges_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_ConclaveChallenges_inner_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class ConclaveChallenges_inner : public ModelBase {
public:
  ConclaveChallenges_inner();
  virtual ~ConclaveChallenges_inner();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// ConclaveChallenges_inner members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getMode() const;
  bool modeIsSet() const;
  void unsetMode();

  void setMode(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getAmount() const;
  bool amountIsSet() const;
  void unsetAmount();

  void setAmount(double value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isExpired() const;
  bool expiredIsSet() const;
  void unsetExpired();

  void setExpired(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEndString() const;
  bool endStringIsSet() const;
  void unsetEndString();

  void setEndString(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isDaily() const;
  bool dailyIsSet() const;
  void unsetDaily();

  void setDaily(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDescription() const;
  bool descriptionIsSet() const;
  void unsetDescription();

  void setDescription(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getAsString() const;
  bool asStringIsSet() const;
  void unsetAsString();

  void setAsString(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCategory() const;
  bool categoryIsSet() const;
  void unsetCategory();

  void setCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isRootChallenge() const;
  bool rootChallengeIsSet() const;
  void unsetRootChallenge();

  void setRootChallenge(bool value);

protected:
  utility::string_t m_Mode;
  bool m_ModeIsSet;
  double m_Amount;
  bool m_AmountIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
  bool m_Expired;
  bool m_ExpiredIsSet;
  utility::string_t m_EndString;
  bool m_EndStringIsSet;
  bool m_Daily;
  bool m_DailyIsSet;
  utility::string_t m_Description;
  bool m_DescriptionIsSet;
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::string_t m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_AsString;
  bool m_AsStringIsSet;
  utility::string_t m_Category;
  bool m_CategoryIsSet;
  bool m_RootChallenge;
  bool m_RootChallengeIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_ConclaveChallenges_inner_H_ */
