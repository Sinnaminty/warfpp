/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Invasion.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Invasion_allOf_attacker.h"
#include "CppRestOpenAPIClient/model/Invasion_allOf_attackerReward.h"
#include "CppRestOpenAPIClient/model/Invasion_allOf_defender.h"
#include "CppRestOpenAPIClient/model/Invasion_allOf_defenderReward.h"
#include "CppRestOpenAPIClient/model/RewardType.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Invasion_allOf_attacker;
class Invasion_allOf_attackerReward;
class Invasion_allOf_defender;
class Invasion_allOf_defenderReward;

/// <summary>
///
/// </summary>
class Invasion : public ModelBase {
public:
  Invasion();
  virtual ~Invasion();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Invasion members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  /// Whether the event is currently active
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Invasion_allOf_attacker> getAttacker() const;
  bool attackerIsSet() const;
  void unsetAttacker();

  void setAttacker(const std::shared_ptr<Invasion_allOf_attacker> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Invasion_allOf_attackerReward> getAttackerReward() const;
  bool attackerRewardIsSet() const;
  void unsetAttackerReward();

  void setAttackerReward(
      const std::shared_ptr<Invasion_allOf_attackerReward> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getAttackingFaction() const;
  bool attackingFactionIsSet() const;
  void unsetAttackingFaction();

  void setAttackingFaction(const utility::string_t &value);

  /// <summary>
  /// Whether this invasion is \&quot;over\&quot;
  /// </summary>
  bool isCompleted() const;
  bool completedIsSet() const;
  void unsetCompleted();

  void setCompleted(bool value);

  /// <summary>
  /// percentage complete as a float value
  /// </summary>
  double getCompletion() const;
  bool completionIsSet() const;
  void unsetCompletion();

  void setCompletion(double value);

  /// <summary>
  /// How many fights have happened.
  /// </summary>
  float getCount() const;
  bool countIsSet() const;
  void unsetCount();

  void setCount(float value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Invasion_allOf_defender> getDefender() const;
  bool defenderIsSet() const;
  void unsetDefender();

  void setDefender(const std::shared_ptr<Invasion_allOf_defender> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Invasion_allOf_defenderReward> getDefenderReward() const;
  bool defenderRewardIsSet() const;
  void unsetDefenderReward();

  void setDefenderReward(
      const std::shared_ptr<Invasion_allOf_defenderReward> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDefendingFaction() const;
  bool defendingFactionIsSet() const;
  void unsetDefendingFaction();

  void setDefendingFaction(const utility::string_t &value);

  /// <summary>
  /// description of invasion
  /// </summary>
  utility::string_t getDesc() const;
  bool descIsSet() const;
  void unsetDesc();

  void setDesc(const utility::string_t &value);

  /// <summary>
  /// time string showing approximate time to the end of the invasion
  /// </summary>
  utility::string_t getEta() const;
  bool etaIsSet() const;
  void unsetEta();

  void setEta(const utility::string_t &value);

  /// <summary>
  /// localized Node name
  /// </summary>
  utility::string_t getNode() const;
  bool nodeIsSet() const;
  void unsetNode();

  void setNode(const utility::string_t &value);

  /// <summary>
  /// i18n key for matching node (always english translation)
  /// </summary>
  utility::string_t getNodeKey() const;
  bool nodeKeyIsSet() const;
  void unsetNodeKey();

  void setNodeKey(const utility::string_t &value);

  /// <summary>
  /// How many runs of this mission are needed to qualify for the reward
  /// </summary>
  double getRequiredRuns() const;
  bool requiredRunsIsSet() const;
  void unsetRequiredRuns();

  void setRequiredRuns(double value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<RewardType>> &getRewardTypes();
  bool rewardTypesIsSet() const;
  void unsetRewardTypes();

  void setRewardTypes(const std::vector<std::shared_ptr<RewardType>> &value);

  /// <summary>
  ///
  /// </summary>
  bool isVsInfestation() const;
  bool vsInfestationIsSet() const;
  void unsetVsInfestation();

  void setVsInfestation(bool value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  std::shared_ptr<Invasion_allOf_attacker> m_Attacker;
  bool m_AttackerIsSet;
  std::shared_ptr<Invasion_allOf_attackerReward> m_AttackerReward;
  bool m_AttackerRewardIsSet;
  utility::string_t m_AttackingFaction;
  bool m_AttackingFactionIsSet;
  bool m_Completed;
  bool m_CompletedIsSet;
  double m_Completion;
  bool m_CompletionIsSet;
  float m_Count;
  bool m_CountIsSet;
  std::shared_ptr<Invasion_allOf_defender> m_Defender;
  bool m_DefenderIsSet;
  std::shared_ptr<Invasion_allOf_defenderReward> m_DefenderReward;
  bool m_DefenderRewardIsSet;
  utility::string_t m_DefendingFaction;
  bool m_DefendingFactionIsSet;
  utility::string_t m_Desc;
  bool m_DescIsSet;
  utility::string_t m_Eta;
  bool m_EtaIsSet;
  utility::string_t m_Node;
  bool m_NodeIsSet;
  utility::string_t m_NodeKey;
  bool m_NodeKeyIsSet;
  double m_RequiredRuns;
  bool m_RequiredRunsIsSet;
  std::vector<std::shared_ptr<RewardType>> m_RewardTypes;
  bool m_RewardTypesIsSet;
  bool m_VsInfestation;
  bool m_VsInfestationIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_H_ */
