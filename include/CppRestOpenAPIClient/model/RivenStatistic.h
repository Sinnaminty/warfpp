/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RivenStatistic.h
 *
 * A colleciton of rivens about a specific weapon&#39;s riven sales
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RivenStatistic_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RivenStatistic_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// A colleciton of rivens about a specific weapon&#39;s riven sales
/// </summary>
class RivenStatistic : public ModelBase {
public:
  RivenStatistic();
  virtual ~RivenStatistic();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// RivenStatistic members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getItemType() const;
  bool itemTypeIsSet() const;
  void unsetItemType();

  void setItemType(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCompatability() const;
  bool compatabilityIsSet() const;
  void unsetCompatability();

  void setCompatability(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isRerolled() const;
  bool rerolledIsSet() const;
  void unsetRerolled();

  void setRerolled(bool value);

  /// <summary>
  ///
  /// </summary>
  float getAvg() const;
  bool avgIsSet() const;
  void unsetAvg();

  void setAvg(float value);

  /// <summary>
  ///
  /// </summary>
  float getStddev() const;
  bool stddevIsSet() const;
  void unsetStddev();

  void setStddev(float value);

  /// <summary>
  ///
  /// </summary>
  float getMin() const;
  bool minIsSet() const;
  void unsetMin();

  void setMin(float value);

  /// <summary>
  ///
  /// </summary>
  float getMax() const;
  bool maxIsSet() const;
  void unsetMax();

  void setMax(float value);

  /// <summary>
  ///
  /// </summary>
  float getPop() const;
  bool popIsSet() const;
  void unsetPop();

  void setPop(float value);

  /// <summary>
  ///
  /// </summary>
  float getMedian() const;
  bool medianIsSet() const;
  void unsetMedian();

  void setMedian(float value);

protected:
  utility::string_t m_ItemType;
  bool m_ItemTypeIsSet;
  utility::string_t m_Compatability;
  bool m_CompatabilityIsSet;
  bool m_Rerolled;
  bool m_RerolledIsSet;
  float m_Avg;
  bool m_AvgIsSet;
  float m_Stddev;
  bool m_StddevIsSet;
  float m_Min;
  bool m_MinIsSet;
  float m_Max;
  bool m_MaxIsSet;
  float m_Pop;
  bool m_PopIsSet;
  float m_Median;
  bool m_MedianIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RivenStatistic_H_ */
