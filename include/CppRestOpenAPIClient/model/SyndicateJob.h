/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SyndicateJob.h
 *
 * A Job for a syndicate. Often called a bounty.
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SyndicateJob_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SyndicateJob_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
/// A Job for a syndicate. Often called a bounty.
/// </summary>
class SyndicateJob : public ModelBase {
public:
  SyndicateJob();
  virtual ~SyndicateJob();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// SyndicateJob members

  /// <summary>
  /// Timestamp for when the job becomes active
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// Timestamp for when the job becomes inactive
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  /// Reward Pool for the job
  /// </summary>
  std::vector<utility::string_t> &getRewardPool();
  bool rewardPoolIsSet() const;
  void unsetRewardPool();

  void setRewardPool(const std::vector<utility::string_t> &value);

  /// <summary>
  /// What type of Job (Bounty) it is
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t &value);

  /// <summary>
  /// Array of enemy levels
  /// </summary>
  std::vector<double> &getEnemyLevels();
  bool enemyLevelsIsSet() const;
  void unsetEnemyLevels();

  void setEnemyLevels(std::vector<double> value);

  /// <summary>
  /// Stages of standing rewards.
  /// </summary>
  std::vector<double> &getStandingStages();
  bool standingStagesIsSet() const;
  void unsetStandingStages();

  void setStandingStages(std::vector<double> value);

  /// <summary>
  /// Minimum Mastery Rank required to perform a job.
  /// </summary>
  double getMinMR() const;
  bool minMRIsSet() const;
  void unsetMinMR();

  void setMinMR(double value);

protected:
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  std::vector<utility::string_t> m_RewardPool;
  bool m_RewardPoolIsSet;
  utility::string_t m_Type;
  bool m_TypeIsSet;
  std::vector<double> m_EnemyLevels;
  bool m_EnemyLevelsIsSet;
  std::vector<double> m_StandingStages;
  bool m_StandingStagesIsSet;
  double m_MinMR;
  bool m_MinMRIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SyndicateJob_H_ */
