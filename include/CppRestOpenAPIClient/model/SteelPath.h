/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SteelPath.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_SteelPath_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_SteelPath_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/SimpleReward.h"
#include "CppRestOpenAPIClient/model/WorldstateObject.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class SimpleReward;
class WorldstateObject;

/// <summary>
///
/// </summary>
class SteelPath : public ModelBase {
public:
  SteelPath();
  virtual ~SteelPath();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// SteelPath members

  /// <summary>
  ///
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<SimpleReward> getCurrentReward() const;
  bool currentRewardIsSet() const;
  void unsetCurrentReward();

  void setCurrentReward(const std::shared_ptr<SimpleReward> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getRemaining() const;
  bool remainingIsSet() const;
  void unsetRemaining();

  void setRemaining(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SimpleReward>> &getRotation();
  bool rotationIsSet() const;
  void unsetRotation();

  void setRotation(const std::vector<std::shared_ptr<SimpleReward>> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SimpleReward>> &getEvergreens();
  bool evergreensIsSet() const;
  void unsetEvergreens();

  void setEvergreens(const std::vector<std::shared_ptr<SimpleReward>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<WorldstateObject> getIncursions() const;
  bool incursionsIsSet() const;
  void unsetIncursions();

  void setIncursions(const std::shared_ptr<WorldstateObject> &value);

protected:
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  std::shared_ptr<SimpleReward> m_CurrentReward;
  bool m_CurrentRewardIsSet;
  utility::string_t m_Remaining;
  bool m_RemainingIsSet;
  std::vector<std::shared_ptr<SimpleReward>> m_Rotation;
  bool m_RotationIsSet;
  std::vector<std::shared_ptr<SimpleReward>> m_Evergreens;
  bool m_EvergreensIsSet;
  std::shared_ptr<WorldstateObject> m_Incursions;
  bool m_IncursionsIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_SteelPath_H_ */
