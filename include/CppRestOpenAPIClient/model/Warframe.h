/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Warframe.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Warframe_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Warframe_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Introduced.h"
#include "CppRestOpenAPIClient/model/Patchlog.h"
#include "CppRestOpenAPIClient/model/ShallowItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Patchlog;
class ShallowItem;
class Introduced;

/// <summary>
///
/// </summary>
class Warframe : public ModelBase {
public:
  Warframe();
  virtual ~Warframe();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Warframe members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getName() const;
  bool nameIsSet() const;
  void unsetName();

  void setName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUniqueName() const;
  bool uniqueNameIsSet() const;
  void unsetUniqueName();

  void setUniqueName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDescription() const;
  bool descriptionIsSet() const;
  void unsetDescription();

  void setDescription(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isTradable() const;
  bool tradableIsSet() const;
  void unsetTradable();

  void setTradable(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCategory() const;
  bool categoryIsSet() const;
  void unsetCategory();

  void setCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getProductCategory() const;
  bool productCategoryIsSet() const;
  void unsetProductCategory();

  void setProductCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Patchlog>> &getPatchlogs();
  bool patchlogsIsSet() const;
  void unsetPatchlogs();

  void setPatchlogs(const std::vector<std::shared_ptr<Patchlog>> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<ShallowItem>> &getComponents();
  bool componentsIsSet() const;
  void unsetComponents();

  void setComponents(const std::vector<std::shared_ptr<ShallowItem>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Introduced> getIntroduced() const;
  bool introducedIsSet() const;
  void unsetIntroduced();

  void setIntroduced(const std::shared_ptr<Introduced> &value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getEstimatedVaultDate() const;
  bool estimatedVaultDateIsSet() const;
  void unsetEstimatedVaultDate();

  void setEstimatedVaultDate(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  double getShield() const;
  bool shieldIsSet() const;
  void unsetShield();

  void setShield(double value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t> &getPolarities();
  bool polaritiesIsSet() const;
  void unsetPolarities();

  void setPolarities(const std::vector<utility::string_t> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimePower() const;
  bool primePowerIsSet() const;
  void unsetPrime_power();

  void setPrimePower(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimeMr() const;
  bool primeMrIsSet() const;
  void unsetPrime_mr();

  void setPrimeMr(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getColor() const;
  bool colorIsSet() const;
  void unsetColor();

  void setColor(double value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t> &getPrimePolarities();
  bool primePolaritiesIsSet() const;
  void unsetPrime_polarities();

  void setPrimePolarities(const std::vector<utility::string_t> &value);

  /// <summary>
  ///
  /// </summary>
  bool isConclave() const;
  bool conclaveIsSet() const;
  void unsetConclave();

  void setConclave(bool value);

  /// <summary>
  ///
  /// </summary>
  double getPrimeArmor() const;
  bool primeArmorIsSet() const;
  void unsetPrime_armor();

  void setPrimeArmor(double value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSpeed() const;
  bool speedIsSet() const;
  void unsetSpeed();

  void setSpeed(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getAura() const;
  bool auraIsSet() const;
  void unsetAura();

  void setAura(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimeUrl() const;
  bool primeUrlIsSet() const;
  void unsetPrime_url();

  void setPrimeUrl(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getPrimeHealth() const;
  bool primeHealthIsSet() const;
  void unsetPrime_health();

  void setPrimeHealth(double value);

  /// <summary>
  ///
  /// </summary>
  double getPower() const;
  bool powerIsSet() const;
  void unsetPower();

  void setPower(double value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimeAura() const;
  bool primeAuraIsSet() const;
  void unsetPrime_aura();

  void setPrimeAura(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getInfo() const;
  bool infoIsSet() const;
  void unsetInfo();

  void setInfo(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getThumbnail() const;
  bool thumbnailIsSet() const;
  void unsetThumbnail();

  void setThumbnail(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getMr() const;
  bool mrIsSet() const;
  void unsetMr();

  void setMr(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getPrimeShield() const;
  bool primeShieldIsSet() const;
  void unsetPrime_shield();

  void setPrimeShield(double value);

  /// <summary>
  ///
  /// </summary>
  double getHealth() const;
  bool healthIsSet() const;
  void unsetHealth();

  void setHealth(double value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimeSpeed() const;
  bool primeSpeedIsSet() const;
  void unsetPrime_speed();

  void setPrimeSpeed(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUrl() const;
  bool urlIsSet() const;
  void unsetUrl();

  void setUrl(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getRegex() const;
  bool regexIsSet() const;
  void unsetRegex();

  void setRegex(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  double getArmor() const;
  bool armorIsSet() const;
  void unsetArmor();

  void setArmor(double value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getLocation() const;
  bool locationIsSet() const;
  void unsetLocation();

  void setLocation(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPrimeConclave() const;
  bool primeConclaveIsSet() const;
  void unsetPrime_conclave();

  void setPrimeConclave(const utility::string_t &value);

protected:
  utility::string_t m_Name;
  bool m_NameIsSet;
  utility::string_t m_UniqueName;
  bool m_UniqueNameIsSet;
  utility::string_t m_Description;
  bool m_DescriptionIsSet;
  utility::string_t m_Type;
  bool m_TypeIsSet;
  bool m_Tradable;
  bool m_TradableIsSet;
  utility::string_t m_Category;
  bool m_CategoryIsSet;
  utility::string_t m_ProductCategory;
  bool m_ProductCategoryIsSet;
  std::vector<std::shared_ptr<Patchlog>> m_Patchlogs;
  bool m_PatchlogsIsSet;
  std::vector<std::shared_ptr<ShallowItem>> m_Components;
  bool m_ComponentsIsSet;
  std::shared_ptr<Introduced> m_Introduced;
  bool m_IntroducedIsSet;
  utility::datetime m_EstimatedVaultDate;
  bool m_EstimatedVaultDateIsSet;
  double m_Shield;
  bool m_ShieldIsSet;
  std::vector<utility::string_t> m_Polarities;
  bool m_PolaritiesIsSet;
  utility::string_t m_Prime_power;
  bool m_Prime_powerIsSet;
  utility::string_t m_Prime_mr;
  bool m_Prime_mrIsSet;
  double m_Color;
  bool m_ColorIsSet;
  std::vector<utility::string_t> m_Prime_polarities;
  bool m_Prime_polaritiesIsSet;
  bool m_Conclave;
  bool m_ConclaveIsSet;
  double m_Prime_armor;
  bool m_Prime_armorIsSet;
  utility::string_t m_Speed;
  bool m_SpeedIsSet;
  utility::string_t m_Aura;
  bool m_AuraIsSet;
  utility::string_t m_Prime_url;
  bool m_Prime_urlIsSet;
  double m_Prime_health;
  bool m_Prime_healthIsSet;
  double m_Power;
  bool m_PowerIsSet;
  utility::string_t m_Prime_aura;
  bool m_Prime_auraIsSet;
  utility::string_t m_Info;
  bool m_InfoIsSet;
  utility::string_t m_Thumbnail;
  bool m_ThumbnailIsSet;
  utility::string_t m_Mr;
  bool m_MrIsSet;
  double m_Prime_shield;
  bool m_Prime_shieldIsSet;
  double m_Health;
  bool m_HealthIsSet;
  utility::string_t m_Prime_speed;
  bool m_Prime_speedIsSet;
  utility::string_t m_Url;
  bool m_UrlIsSet;
  utility::string_t m_Regex;
  bool m_RegexIsSet;
  double m_Armor;
  bool m_ArmorIsSet;
  utility::string_t m_Location;
  bool m_LocationIsSet;
  utility::string_t m_Prime_conclave;
  bool m_Prime_conclaveIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Warframe_H_ */
