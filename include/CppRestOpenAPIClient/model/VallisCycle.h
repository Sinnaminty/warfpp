/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VallisCycle.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_VallisCycle_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_VallisCycle_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class VallisCycle : public ModelBase {
public:
  VallisCycle();
  virtual ~VallisCycle();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// VallisCycle members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getTimeLeft() const;
  bool timeLeftIsSet() const;
  void unsetTimeLeft();

  void setTimeLeft(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isIsWarm() const;
  bool isWarmIsSet() const;
  void unsetIsWarm();

  void setIsWarm(bool value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::string_t m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_TimeLeft;
  bool m_TimeLeftIsSet;
  bool m_IsWarm;
  bool m_IsWarmIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_VallisCycle_H_ */
