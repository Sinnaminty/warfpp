/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Mod.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Mod_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Mod_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Introduced.h"
#include "CppRestOpenAPIClient/model/Mod_allOf_levelStats.h"
#include "CppRestOpenAPIClient/model/Patchlog.h"
#include "CppRestOpenAPIClient/model/Polarity.h"
#include "CppRestOpenAPIClient/model/ShallowItem.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Patchlog;
class ShallowItem;
class Introduced;
class Mod_allOf_levelStats;

/// <summary>
///
/// </summary>
class Mod : public ModelBase {
public:
  Mod();
  virtual ~Mod();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Mod members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getName() const;
  bool nameIsSet() const;
  void unsetName();

  void setName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUniqueName() const;
  bool uniqueNameIsSet() const;
  void unsetUniqueName();

  void setUniqueName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDescription() const;
  bool descriptionIsSet() const;
  void unsetDescription();

  void setDescription(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isTradable() const;
  bool tradableIsSet() const;
  void unsetTradable();

  void setTradable(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCategory() const;
  bool categoryIsSet() const;
  void unsetCategory();

  void setCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getProductCategory() const;
  bool productCategoryIsSet() const;
  void unsetProductCategory();

  void setProductCategory(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Patchlog>> &getPatchlogs();
  bool patchlogsIsSet() const;
  void unsetPatchlogs();

  void setPatchlogs(const std::vector<std::shared_ptr<Patchlog>> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<ShallowItem>> &getComponents();
  bool componentsIsSet() const;
  void unsetComponents();

  void setComponents(const std::vector<std::shared_ptr<ShallowItem>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Introduced> getIntroduced() const;
  bool introducedIsSet() const;
  void unsetIntroduced();

  void setIntroduced(const std::shared_ptr<Introduced> &value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getEstimatedVaultDate() const;
  bool estimatedVaultDateIsSet() const;
  void unsetEstimatedVaultDate();

  void setEstimatedVaultDate(const utility::datetime &value);

  /// <summary>
  ///
  /// </summary>
  int32_t getBaseDrain() const;
  bool baseDrainIsSet() const;
  void unsetBaseDrain();

  void setBaseDrain(int32_t value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCompatName() const;
  bool compatNameIsSet() const;
  void unsetCompatName();

  void setCompatName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  int32_t getFusionLimit() const;
  bool fusionLimitIsSet() const;
  void unsetFusionLimit();

  void setFusionLimit(int32_t value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Mod_allOf_levelStats>> &getLevelStats();
  bool levelStatsIsSet() const;
  void unsetLevelStats();

  void setLevelStats(
      const std::vector<std::shared_ptr<Mod_allOf_levelStats>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Polarity> getPolarity() const;
  bool polarityIsSet() const;
  void unsetPolarity();

  void setPolarity(const std::shared_ptr<Polarity> &value);

  /// <summary>
  ///
  /// </summary>
  bool isTransmutable() const;
  bool transmutableIsSet() const;
  void unsetTransmutable();

  void setTransmutable(bool value);

protected:
  utility::string_t m_Name;
  bool m_NameIsSet;
  utility::string_t m_UniqueName;
  bool m_UniqueNameIsSet;
  utility::string_t m_Description;
  bool m_DescriptionIsSet;
  utility::string_t m_Type;
  bool m_TypeIsSet;
  bool m_Tradable;
  bool m_TradableIsSet;
  utility::string_t m_Category;
  bool m_CategoryIsSet;
  utility::string_t m_ProductCategory;
  bool m_ProductCategoryIsSet;
  std::vector<std::shared_ptr<Patchlog>> m_Patchlogs;
  bool m_PatchlogsIsSet;
  std::vector<std::shared_ptr<ShallowItem>> m_Components;
  bool m_ComponentsIsSet;
  std::shared_ptr<Introduced> m_Introduced;
  bool m_IntroducedIsSet;
  utility::datetime m_EstimatedVaultDate;
  bool m_EstimatedVaultDateIsSet;
  int32_t m_BaseDrain;
  bool m_BaseDrainIsSet;
  utility::string_t m_CompatName;
  bool m_CompatNameIsSet;
  int32_t m_FusionLimit;
  bool m_FusionLimitIsSet;
  std::vector<std::shared_ptr<Mod_allOf_levelStats>> m_LevelStats;
  bool m_LevelStatsIsSet;
  std::shared_ptr<Polarity> m_Polarity;
  bool m_PolarityIsSet;
  bool m_Transmutable;
  bool m_TransmutableIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Mod_H_ */
