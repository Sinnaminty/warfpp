/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Event_allOf_message.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Event_allOf_message_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Event_allOf_message_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class Event_allOf_message : public ModelBase {
public:
  Event_allOf_message();
  virtual ~Event_allOf_message();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Event_allOf_message members

  /// <summary>
  /// Who commissioned this reward
  /// </summary>
  utility::string_t getSender() const;
  bool senderIsSet() const;
  void unsetSender();

  void setSender(const utility::string_t &value);

  /// <summary>
  /// Title of the in-game mail received for completing the step.
  /// </summary>
  utility::string_t getSubject() const;
  bool subjectIsSet() const;
  void unsetSubject();

  void setSubject(const utility::string_t &value);

  /// <summary>
  /// Body of the in-game mail received for completing the step.
  /// </summary>
  utility::string_t getMessage() const;
  bool messageIsSet() const;
  void unsetMessage();

  void setMessage(const utility::string_t &value);

  /// <summary>
  /// Path to sender icon string.
  /// </summary>
  utility::string_t getSenderIcon() const;
  bool senderIconIsSet() const;
  void unsetSenderIcon();

  void setSenderIcon(const utility::string_t &value);

  /// <summary>
  /// Attachments to the message. Unknown usage.
  /// </summary>
  std::vector<utility::string_t> &getAttachments();
  bool attachmentsIsSet() const;
  void unsetAttachments();

  void setAttachments(const std::vector<utility::string_t> &value);

protected:
  utility::string_t m_Sender;
  bool m_SenderIsSet;
  utility::string_t m_Subject;
  bool m_SubjectIsSet;
  utility::string_t m_Message;
  bool m_MessageIsSet;
  utility::string_t m_SenderIcon;
  bool m_SenderIconIsSet;
  std::vector<utility::string_t> m_Attachments;
  bool m_AttachmentsIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Event_allOf_message_H_ */
