/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PersistentEnemies_inner.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PersistentEnemies_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PersistentEnemies_inner_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class PersistentEnemies_inner : public ModelBase {
public:
  PersistentEnemies_inner();
  virtual ~PersistentEnemies_inner();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// PersistentEnemies_inner members

  /// <summary>
  /// Location tag for Acolyte
  /// </summary>
  utility::string_t getLocationTag() const;
  bool locationTagIsSet() const;
  void unsetLocationTag();

  void setLocationTag(const utility::string_t &value);

  /// <summary>
  /// Which acolyte it is
  /// </summary>
  utility::string_t getAgentType() const;
  bool agentTypeIsSet() const;
  void unsetAgentType();

  void setAgentType(const utility::string_t &value);

  /// <summary>
  /// Enemy level
  /// </summary>
  double getRank() const;
  bool rankIsSet() const;
  void unsetRank();

  void setRank(double value);

  /// <summary>
  /// Enemy&#39;s remaining health
  /// </summary>
  double getHealthPercent() const;
  bool healthPercentIsSet() const;
  void unsetHealthPercent();

  void setHealthPercent(double value);

  /// <summary>
  /// The percent damage that the enemy takes when it&#39;s defeated
  /// </summary>
  double getFleeDamage() const;
  bool fleeDamageIsSet() const;
  void unsetFleeDamage();

  void setFleeDamage(double value);

  /// <summary>
  /// The region in which the enemy is located
  /// </summary>
  utility::string_t getRegion() const;
  bool regionIsSet() const;
  void unsetRegion();

  void setRegion(const utility::string_t &value);

  /// <summary>
  /// The time at which the enemy was last discovered
  /// </summary>
  utility::string_t getLastDiscoveredTime() const;
  bool lastDiscoveredTimeIsSet() const;
  void unsetLastDiscoveredTime();

  void setLastDiscoveredTime(const utility::string_t &value);

  /// <summary>
  /// Node at which the enemy was last discovered
  /// </summary>
  utility::string_t getLastDiscoveredAt() const;
  bool lastDiscoveredAtIsSet() const;
  void unsetLastDiscoveredAt();

  void setLastDiscoveredAt(const utility::string_t &value);

  /// <summary>
  /// Whether the enemy is currently discovered
  /// </summary>
  bool isIsDiscovered() const;
  bool isDiscoveredIsSet() const;
  void unsetIsDiscovered();

  void setIsDiscovered(bool value);

  /// <summary>
  /// Whether the enemy is using &#39;ticketing&#39;. Unknown usage.
  /// </summary>
  bool isIsUsingTicketing() const;
  bool isUsingTicketingIsSet() const;
  void unsetIsUsingTicketing();

  void setIsUsingTicketing(bool value);

  /// <summary>
  /// faux-id incorporating the actual description and Whether the enemy is
  /// discovered.
  /// </summary>
  utility::string_t getPid() const;
  bool pidIsSet() const;
  void unsetPid();

  void setPid(const utility::string_t &value);

protected:
  utility::string_t m_LocationTag;
  bool m_LocationTagIsSet;
  utility::string_t m_AgentType;
  bool m_AgentTypeIsSet;
  double m_Rank;
  bool m_RankIsSet;
  double m_HealthPercent;
  bool m_HealthPercentIsSet;
  double m_FleeDamage;
  bool m_FleeDamageIsSet;
  utility::string_t m_Region;
  bool m_RegionIsSet;
  utility::string_t m_LastDiscoveredTime;
  bool m_LastDiscoveredTimeIsSet;
  utility::string_t m_LastDiscoveredAt;
  bool m_LastDiscoveredAtIsSet;
  bool m_IsDiscovered;
  bool m_IsDiscoveredIsSet;
  bool m_IsUsingTicketing;
  bool m_IsUsingTicketingIsSet;
  utility::string_t m_Pid;
  bool m_PidIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PersistentEnemies_inner_H_ */
