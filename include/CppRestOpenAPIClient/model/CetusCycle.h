/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CetusCycle.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_CetusCycle_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_CetusCycle_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

/// <summary>
///
/// </summary>
class CetusCycle : public ModelBase {
public:
  CetusCycle();
  virtual ~CetusCycle();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// CetusCycle members

  /// <summary>
  /// unique identifier for this object/event/thing
  /// </summary>
  utility::string_t getId() const;
  bool idIsSet() const;
  void unsetId();

  void setId(const utility::string_t &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event began
  /// </summary>
  utility::datetime getActivation() const;
  bool activationIsSet() const;
  void unsetActivation();

  void setActivation(const utility::datetime &value);

  /// <summary>
  /// ISO-8601 formatted timestamp for when the event is expected to end
  /// </summary>
  utility::datetime getExpiry() const;
  bool expiryIsSet() const;
  void unsetExpiry();

  void setExpiry(const utility::datetime &value);

  /// <summary>
  /// Short-time-formatted duration string representing the start of the event
  /// </summary>
  utility::string_t getStartString() const;
  bool startStringIsSet() const;
  void unsetStartString();

  void setStartString(const utility::string_t &value);

  /// <summary>
  /// Whether the event is currently active
  /// </summary>
  bool isActive() const;
  bool activeIsSet() const;
  void unsetActive();

  void setActive(bool value);

  /// <summary>
  ///
  /// </summary>
  bool isIsDay() const;
  bool isDayIsSet() const;
  void unsetIsDay();

  void setIsDay(bool value);

  /// <summary>
  /// Describes the current time. e.g. \&quot;day\&quot; or \&quot;night\&quot;
  /// </summary>
  utility::string_t getState() const;
  bool stateIsSet() const;
  void unsetState();

  void setState(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getTimeLeft() const;
  bool timeLeftIsSet() const;
  void unsetTimeLeft();

  void setTimeLeft(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  bool isIsCetus() const;
  bool isCetusIsSet() const;
  void unsetIsCetus();

  void setIsCetus(bool value);

  /// <summary>
  /// A short description of the remaining time until the next day/night change.
  /// </summary>
  utility::string_t getShortString() const;
  bool shortStringIsSet() const;
  void unsetShortString();

  void setShortString(const utility::string_t &value);

protected:
  utility::string_t m_Id;
  bool m_IdIsSet;
  utility::datetime m_Activation;
  bool m_ActivationIsSet;
  utility::datetime m_Expiry;
  bool m_ExpiryIsSet;
  utility::string_t m_StartString;
  bool m_StartStringIsSet;
  bool m_Active;
  bool m_ActiveIsSet;
  bool m_IsDay;
  bool m_IsDayIsSet;
  utility::string_t m_State;
  bool m_StateIsSet;
  utility::string_t m_TimeLeft;
  bool m_TimeLeftIsSet;
  bool m_IsCetus;
  bool m_IsCetusIsSet;
  utility::string_t m_ShortString;
  bool m_ShortStringIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_CetusCycle_H_ */
