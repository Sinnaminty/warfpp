/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Conclave_categories.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_categories_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_categories_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Conclave_modes_PVPMODE_ALL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Conclave_modes_PVPMODE_ALL;

/// <summary>
///
/// </summary>
class Conclave_categories : public ModelBase {
public:
  Conclave_categories();
  virtual ~Conclave_categories();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Conclave_categories members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
  getPVPChallengeTypeCategoryDAILYROOT() const;
  bool pVPChallengeTypeCategoryDAILYROOTIsSet() const;
  void unsetPVPChallengeTypeCategory_DAILY_ROOT();

  void setPVPChallengeTypeCategoryDAILYROOT(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
  getPVPChallengeTypeCategoryDAILY() const;
  bool pVPChallengeTypeCategoryDAILYIsSet() const;
  void unsetPVPChallengeTypeCategory_DAILY();

  void setPVPChallengeTypeCategoryDAILY(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
  getPVPChallengeTypeCategoryWEEKLY() const;
  bool pVPChallengeTypeCategoryWEEKLYIsSet() const;
  void unsetPVPChallengeTypeCategory_WEEKLY();

  void setPVPChallengeTypeCategoryWEEKLY(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
  getPVPChallengeTypeCategoryWEEKLYROOT() const;
  bool pVPChallengeTypeCategoryWEEKLYROOTIsSet() const;
  void unsetPVPChallengeTypeCategory_WEEKLY_ROOT();

  void setPVPChallengeTypeCategoryWEEKLYROOT(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
  getPVPChallengeTypeCategoryMODEAFFECTOR() const;
  bool pVPChallengeTypeCategoryMODEAFFECTORIsSet() const;
  void unsetPVPChallengeTypeCategory_MODEAFFECTOR();

  void setPVPChallengeTypeCategoryMODEAFFECTOR(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

protected:
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
      m_PVPChallengeTypeCategory_DAILY_ROOT;
  bool m_PVPChallengeTypeCategory_DAILY_ROOTIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPChallengeTypeCategory_DAILY;
  bool m_PVPChallengeTypeCategory_DAILYIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPChallengeTypeCategory_WEEKLY;
  bool m_PVPChallengeTypeCategory_WEEKLYIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
      m_PVPChallengeTypeCategory_WEEKLY_ROOT;
  bool m_PVPChallengeTypeCategory_WEEKLY_ROOTIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL>
      m_PVPChallengeTypeCategory_MODEAFFECTOR;
  bool m_PVPChallengeTypeCategory_MODEAFFECTORIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_categories_H_ */
