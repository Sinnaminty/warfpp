/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Attack.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Attack_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Attack_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Attack_falloff.h"
#include "CppRestOpenAPIClient/model/Attack_pellet.h"
#include "CppRestOpenAPIClient/model/Damage.h"
#include "CppRestOpenAPIClient/model/SlamAttack.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Attack_pellet;
class Attack_falloff;
class Damage;
class SlamAttack;

/// <summary>
///
/// </summary>
class Attack : public ModelBase {
public:
  Attack();
  virtual ~Attack();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Attack members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getName() const;
  bool nameIsSet() const;
  void unsetName();

  void setName(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  float getCritChance() const;
  bool critChanceIsSet() const;
  void unsetCrit_chance();

  void setCritChance(float value);

  /// <summary>
  ///
  /// </summary>
  float getCritMult() const;
  bool critMultIsSet() const;
  void unsetCrit_mult();

  void setCritMult(float value);

  /// <summary>
  ///
  /// </summary>
  float getStatusChance() const;
  bool statusChanceIsSet() const;
  void unsetStatus_chance();

  void setStatusChance(float value);

  /// <summary>
  ///
  /// </summary>
  float getShotType() const;
  bool shotTypeIsSet() const;
  void unsetShot_type();

  void setShotType(float value);

  /// <summary>
  ///
  /// </summary>
  float getShotSpeed() const;
  bool shotSpeedIsSet() const;
  void unsetShot_speed();

  void setShotSpeed(float value);

  /// <summary>
  ///
  /// </summary>
  float getDuration() const;
  bool durationIsSet() const;
  void unsetDuration();

  void setDuration(float value);

  /// <summary>
  ///
  /// </summary>
  float getRadius() const;
  bool radiusIsSet() const;
  void unsetRadius();

  void setRadius(float value);

  /// <summary>
  ///
  /// </summary>
  float getSpeed() const;
  bool speedIsSet() const;
  void unsetSpeed();

  void setSpeed(float value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Attack_pellet> getPellet() const;
  bool pelletIsSet() const;
  void unsetPellet();

  void setPellet(const std::shared_ptr<Attack_pellet> &value);

  /// <summary>
  ///
  /// </summary>
  float getChargeTime() const;
  bool chargeTimeIsSet() const;
  void unsetCharge_time();

  void setChargeTime(float value);

  /// <summary>
  ///
  /// </summary>
  float getFlight() const;
  bool flightIsSet() const;
  void unsetFlight();

  void setFlight(float value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Attack_falloff> getFalloff() const;
  bool falloffIsSet() const;
  void unsetFalloff();

  void setFalloff(const std::shared_ptr<Attack_falloff> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Damage> getDamage() const;
  bool damageIsSet() const;
  void unsetDamage();

  void setDamage(const std::shared_ptr<Damage> &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSlide() const;
  bool slideIsSet() const;
  void unsetSlide();

  void setSlide(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getJump() const;
  bool jumpIsSet() const;
  void unsetJump();

  void setJump(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getWall() const;
  bool wallIsSet() const;
  void unsetWall();

  void setWall(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  float getChanneling() const;
  bool channelingIsSet() const;
  void unsetChanneling();

  void setChanneling(float value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<SlamAttack> getSlam() const;
  bool slamIsSet() const;
  void unsetSlam();

  void setSlam(const std::shared_ptr<SlamAttack> &value);

protected:
  utility::string_t m_Name;
  bool m_NameIsSet;
  float m_Crit_chance;
  bool m_Crit_chanceIsSet;
  float m_Crit_mult;
  bool m_Crit_multIsSet;
  float m_Status_chance;
  bool m_Status_chanceIsSet;
  float m_Shot_type;
  bool m_Shot_typeIsSet;
  float m_Shot_speed;
  bool m_Shot_speedIsSet;
  float m_Duration;
  bool m_DurationIsSet;
  float m_Radius;
  bool m_RadiusIsSet;
  float m_Speed;
  bool m_SpeedIsSet;
  std::shared_ptr<Attack_pellet> m_Pellet;
  bool m_PelletIsSet;
  float m_Charge_time;
  bool m_Charge_timeIsSet;
  float m_Flight;
  bool m_FlightIsSet;
  std::shared_ptr<Attack_falloff> m_Falloff;
  bool m_FalloffIsSet;
  std::shared_ptr<Damage> m_Damage;
  bool m_DamageIsSet;
  utility::string_t m_Slide;
  bool m_SlideIsSet;
  utility::string_t m_Jump;
  bool m_JumpIsSet;
  utility::string_t m_Wall;
  bool m_WallIsSet;
  float m_Channeling;
  bool m_ChannelingIsSet;
  std::shared_ptr<SlamAttack> m_Slam;
  bool m_SlamIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Attack_H_ */
