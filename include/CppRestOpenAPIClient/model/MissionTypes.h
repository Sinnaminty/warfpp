/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MissionTypes.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_MissionTypes_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_MissionTypes_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Conclave_modes_PVPMODE_ALL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Conclave_modes_PVPMODE_ALL;

/// <summary>
///
/// </summary>
class MissionTypes : public ModelBase {
public:
  MissionTypes();
  virtual ~MissionTypes();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// MissionTypes members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTEXCAVATE() const;
  bool mTEXCAVATEIsSet() const;
  void unsetMT_EXCAVATE();

  void setMTEXCAVATE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTSABOTAGE() const;
  bool mTSABOTAGEIsSet() const;
  void unsetMT_SABOTAGE();

  void setMTSABOTAGE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTMOBILEDEFENSE() const;
  bool mTMOBILEDEFENSEIsSet() const;
  void unsetMT_MOBILE_DEFENSE();

  void
  setMTMOBILEDEFENSE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTASSASSINATION() const;
  bool mTASSASSINATIONIsSet() const;
  void unsetMT_ASSASSINATION();

  void
  setMTASSASSINATION(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTEXTERMINATION() const;
  bool mTEXTERMINATIONIsSet() const;
  void unsetMT_EXTERMINATION();

  void
  setMTEXTERMINATION(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTHIVE() const;
  bool mTHIVEIsSet() const;
  void unsetMT_HIVE();

  void setMTHIVE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTDEFENSE() const;
  bool mTDEFENSEIsSet() const;
  void unsetMT_DEFENSE();

  void setMTDEFENSE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTTERRITORY() const;
  bool mTTERRITORYIsSet() const;
  void unsetMT_TERRITORY();

  void setMTTERRITORY(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTARENA() const;
  bool mTARENAIsSet() const;
  void unsetMT_ARENA();

  void setMTARENA(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTPVP() const;
  bool mTPVPIsSet() const;
  void unsetMT_PVP();

  void setMTPVP(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTRESCUE() const;
  bool mTRESCUEIsSet() const;
  void unsetMT_RESCUE();

  void setMTRESCUE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTINTEL() const;
  bool mTINTELIsSet() const;
  void unsetMT_INTEL();

  void setMTINTEL(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTSURVIVAL() const;
  bool mTSURVIVALIsSet() const;
  void unsetMT_SURVIVAL();

  void setMTSURVIVAL(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTCAPTURE() const;
  bool mTCAPTUREIsSet() const;
  void unsetMT_CAPTURE();

  void setMTCAPTURE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTSECTOR() const;
  bool mTSECTORIsSet() const;
  void unsetMT_SECTOR();

  void setMTSECTOR(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTRETRIEVAL() const;
  bool mTRETRIEVALIsSet() const;
  void unsetMT_RETRIEVAL();

  void setMTRETRIEVAL(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTASSAULT() const;
  bool mTASSAULTIsSet() const;
  void unsetMT_ASSAULT();

  void setMTASSAULT(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getMTEVACUATION() const;
  bool mTEVACUATIONIsSet() const;
  void unsetMT_EVACUATION();

  void
  setMTEVACUATION(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

protected:
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_EXCAVATE;
  bool m_MT_EXCAVATEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_SABOTAGE;
  bool m_MT_SABOTAGEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_MOBILE_DEFENSE;
  bool m_MT_MOBILE_DEFENSEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_ASSASSINATION;
  bool m_MT_ASSASSINATIONIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_EXTERMINATION;
  bool m_MT_EXTERMINATIONIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_HIVE;
  bool m_MT_HIVEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_DEFENSE;
  bool m_MT_DEFENSEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_TERRITORY;
  bool m_MT_TERRITORYIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_ARENA;
  bool m_MT_ARENAIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_PVP;
  bool m_MT_PVPIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_RESCUE;
  bool m_MT_RESCUEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_INTEL;
  bool m_MT_INTELIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_SURVIVAL;
  bool m_MT_SURVIVALIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_CAPTURE;
  bool m_MT_CAPTUREIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_SECTOR;
  bool m_MT_SECTORIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_RETRIEVAL;
  bool m_MT_RETRIEVALIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_ASSAULT;
  bool m_MT_ASSAULTIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_MT_EVACUATION;
  bool m_MT_EVACUATIONIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_MissionTypes_H_ */
