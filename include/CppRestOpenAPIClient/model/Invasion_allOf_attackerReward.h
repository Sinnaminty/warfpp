/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Invasion_allOf_attackerReward.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_allOf_attackerReward_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_allOf_attackerReward_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Reward_countedItems_inner.h"
#include <cpprest/details/basic_types.h>
#include <set>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Reward_countedItems_inner;

/// <summary>
///
/// </summary>
class Invasion_allOf_attackerReward : public ModelBase {
public:
  Invasion_allOf_attackerReward();
  virtual ~Invasion_allOf_attackerReward();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Invasion_allOf_attackerReward members

  /// <summary>
  /// Items that have a quantity attached
  /// </summary>
  std::set<std::shared_ptr<Reward_countedItems_inner>> &getCountedItems();
  bool countedItemsIsSet() const;
  void unsetCountedItems();

  void setCountedItems(
      const std::set<std::shared_ptr<Reward_countedItems_inner>> &value);

  /// <summary>
  /// thumbnail URL
  /// </summary>
  utility::string_t getThumbnail() const;
  bool thumbnailIsSet() const;
  void unsetThumbnail();

  void setThumbnail(const utility::string_t &value);

  /// <summary>
  /// RGB value as an int assigned to this reward
  /// </summary>
  double getColor() const;
  bool colorIsSet() const;
  void unsetColor();

  void setColor(double value);

  /// <summary>
  /// Amount of credits awarded
  /// </summary>
  int32_t getCredits() const;
  bool creditsIsSet() const;
  void unsetCredits();

  void setCredits(int32_t value);

  /// <summary>
  /// string representation of the reward
  /// </summary>
  utility::string_t getAsString() const;
  bool asStringIsSet() const;
  void unsetAsString();

  void setAsString(const utility::string_t &value);

  /// <summary>
  /// Items&#39; names possible to be won
  /// </summary>
  std::vector<utility::string_t> &getItems();
  bool itemsIsSet() const;
  void unsetItems();

  void setItems(const std::vector<utility::string_t> &value);

  /// <summary>
  /// formatted string describing all included items
  /// </summary>
  utility::string_t getItemString() const;
  bool itemStringIsSet() const;
  void unsetItemString();

  void setItemString(const utility::string_t &value);

protected:
  std::set<std::shared_ptr<Reward_countedItems_inner>> m_CountedItems;
  bool m_CountedItemsIsSet;
  utility::string_t m_Thumbnail;
  bool m_ThumbnailIsSet;
  double m_Color;
  bool m_ColorIsSet;
  int32_t m_Credits;
  bool m_CreditsIsSet;
  utility::string_t m_AsString;
  bool m_AsStringIsSet;
  std::vector<utility::string_t> m_Items;
  bool m_ItemsIsSet;
  utility::string_t m_ItemString;
  bool m_ItemStringIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Invasion_allOf_attackerReward_H_ */
