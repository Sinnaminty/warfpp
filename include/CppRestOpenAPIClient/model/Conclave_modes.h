/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Conclave_modes.h
 *
 *
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_modes_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_modes_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Conclave_modes_PVPMODE_ALL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Conclave_modes_PVPMODE_ALL;

/// <summary>
///
/// </summary>
class Conclave_modes : public ModelBase {
public:
  Conclave_modes();
  virtual ~Conclave_modes();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Conclave_modes members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODEALL() const;
  bool pVPMODEALLIsSet() const;
  void unsetPVPMODE_ALL();

  void setPVPMODEALL(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODETEAMDEATHMATCH() const;
  bool pVPMODETEAMDEATHMATCHIsSet() const;
  void unsetPVPMODE_TEAMDEATHMATCH();

  void setPVPMODETEAMDEATHMATCH(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODENONE() const;
  bool pVPMODENONEIsSet() const;
  void unsetPVPMODE_NONE();

  void setPVPMODENONE(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODECAPTURETHEFLAG() const;
  bool pVPMODECAPTURETHEFLAGIsSet() const;
  void unsetPVPMODE_CAPTURETHEFLAG();

  void setPVPMODECAPTURETHEFLAG(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODESPEEDBALL() const;
  bool pVPMODESPEEDBALLIsSet() const;
  void unsetPVPMODE_SPEEDBALL();

  void
  setPVPMODESPEEDBALL(const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> getPVPMODEDEATHMATCH() const;
  bool pVPMODEDEATHMATCHIsSet() const;
  void unsetPVPMODE_DEATHMATCH();

  void setPVPMODEDEATHMATCH(
      const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value);

protected:
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_ALL;
  bool m_PVPMODE_ALLIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_TEAMDEATHMATCH;
  bool m_PVPMODE_TEAMDEATHMATCHIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_NONE;
  bool m_PVPMODE_NONEIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_CAPTURETHEFLAG;
  bool m_PVPMODE_CAPTURETHEFLAGIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_SPEEDBALL;
  bool m_PVPMODE_SPEEDBALLIsSet;
  std::shared_ptr<Conclave_modes_PVPMODE_ALL> m_PVPMODE_DEATHMATCH;
  bool m_PVPMODE_DEATHMATCHIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Conclave_modes_H_ */
