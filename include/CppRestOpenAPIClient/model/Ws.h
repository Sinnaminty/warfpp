/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Ws.h
 *
 * Full World State Object
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Ws_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Ws_H_

#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Alerts.h"
#include "CppRestOpenAPIClient/model/Arbitration.h"
#include "CppRestOpenAPIClient/model/ArchonHunt.h"
#include "CppRestOpenAPIClient/model/CambionCycle.h"
#include "CppRestOpenAPIClient/model/CetusCycle.h"
#include "CppRestOpenAPIClient/model/ConclaveChallenges.h"
#include "CppRestOpenAPIClient/model/Construction.h"
#include "CppRestOpenAPIClient/model/DailyDeals.h"
#include "CppRestOpenAPIClient/model/DarkSectors.h"
#include "CppRestOpenAPIClient/model/EarthCycle.h"
#include "CppRestOpenAPIClient/model/Events.h"
#include "CppRestOpenAPIClient/model/Fissures.h"
#include "CppRestOpenAPIClient/model/FlashSales.h"
#include "CppRestOpenAPIClient/model/GlobalUpgrades.h"
#include "CppRestOpenAPIClient/model/Invasions.h"
#include "CppRestOpenAPIClient/model/News.h"
#include "CppRestOpenAPIClient/model/Nightwave.h"
#include "CppRestOpenAPIClient/model/PersistentEnemies.h"
#include "CppRestOpenAPIClient/model/Simaris.h"
#include "CppRestOpenAPIClient/model/Sortie.h"
#include "CppRestOpenAPIClient/model/SteelPath.h"
#include "CppRestOpenAPIClient/model/SyndicateMissions.h"
#include "CppRestOpenAPIClient/model/VallisCycle.h"
#include "CppRestOpenAPIClient/model/VoidTrader.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Arbitration;
class ArchonHunt;
class CambionCycle;
class CetusCycle;
class Construction;
class EarthCycle;
class Nightwave;
class Simaris;
class Sortie;
class SteelPath;
class VallisCycle;
class VoidTrader;

/// <summary>
/// Full World State Object
/// </summary>
class Ws : public ModelBase {
public:
  Ws();
  virtual ~Ws();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  bool fromJson(const web::json::value &json) override;

  void toMultipart(std::shared_ptr<MultipartFormData> multipart,
                   const utility::string_t &namePrefix) const override;
  bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &namePrefix) override;

  /////////////////////////////////////////////
  /// Ws members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getTimestamp() const;
  bool timestampIsSet() const;
  void unsetTimestamp();

  void setTimestamp(const utility::string_t &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Alerts> getAlerts() const;
  bool alertsIsSet() const;
  void unsetAlerts();

  void setAlerts(const std::shared_ptr<Alerts> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Arbitration> getArbitration() const;
  bool arbitrationIsSet() const;
  void unsetArbitration();

  void setArbitration(const std::shared_ptr<Arbitration> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ArchonHunt> getArchonHunt() const;
  bool archonHuntIsSet() const;
  void unsetArchonHunt();

  void setArchonHunt(const std::shared_ptr<ArchonHunt> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<CambionCycle> getCambionCycle() const;
  bool cambionCycleIsSet() const;
  void unsetCambionCycle();

  void setCambionCycle(const std::shared_ptr<CambionCycle> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<CetusCycle> getCetusCycle() const;
  bool cetusCycleIsSet() const;
  void unsetCetusCycle();

  void setCetusCycle(const std::shared_ptr<CetusCycle> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ConclaveChallenges> getConclaveChallenges() const;
  bool conclaveChallengesIsSet() const;
  void unsetConclaveChallenges();

  void setConclaveChallenges(const std::shared_ptr<ConclaveChallenges> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Construction> getConstructionProgress() const;
  bool constructionProgressIsSet() const;
  void unsetConstructionProgress();

  void setConstructionProgress(const std::shared_ptr<Construction> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<DailyDeals> getDailyDeals() const;
  bool dailyDealsIsSet() const;
  void unsetDailyDeals();

  void setDailyDeals(const std::shared_ptr<DailyDeals> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<DarkSectors> getDarkSectors() const;
  bool darkSectorsIsSet() const;
  void unsetDarkSectors();

  void setDarkSectors(const std::shared_ptr<DarkSectors> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<EarthCycle> getEarthCycle() const;
  bool earthCycleIsSet() const;
  void unsetEarthCycle();

  void setEarthCycle(const std::shared_ptr<EarthCycle> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Events> getEvents() const;
  bool eventsIsSet() const;
  void unsetEvents();

  void setEvents(const std::shared_ptr<Events> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Fissures> getFissures() const;
  bool fissuresIsSet() const;
  void unsetFissures();

  void setFissures(const std::shared_ptr<Fissures> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<FlashSales> getFlashSales() const;
  bool flashSalesIsSet() const;
  void unsetFlashSales();

  void setFlashSales(const std::shared_ptr<FlashSales> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<GlobalUpgrades> getGlobalUpgrades() const;
  bool globalUpgradesIsSet() const;
  void unsetGlobalUpgrades();

  void setGlobalUpgrades(const std::shared_ptr<GlobalUpgrades> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Invasions> getInvasions() const;
  bool invasionsIsSet() const;
  void unsetInvasions();

  void setInvasions(const std::shared_ptr<Invasions> &value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<Arbitration>> &getKuva();
  bool kuvaIsSet() const;
  void unsetKuva();

  void setKuva(const std::vector<std::shared_ptr<Arbitration>> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<News> getNews() const;
  bool newsIsSet() const;
  void unsetNews();

  void setNews(const std::shared_ptr<News> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Nightwave> getNightwave() const;
  bool nightwaveIsSet() const;
  void unsetNightwave();

  void setNightwave(const std::shared_ptr<Nightwave> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PersistentEnemies> getPersistentEnemies() const;
  bool persistentEnemiesIsSet() const;
  void unsetPersistentEnemies();

  void setPersistentEnemies(const std::shared_ptr<PersistentEnemies> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Simaris> getSimaris() const;
  bool simarisIsSet() const;
  void unsetSimaris();

  void setSimaris(const std::shared_ptr<Simaris> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Sortie> getSortie() const;
  bool sortieIsSet() const;
  void unsetSortie();

  void setSortie(const std::shared_ptr<Sortie> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<SteelPath> getSteelPath() const;
  bool steelPathIsSet() const;
  void unsetSteelPath();

  void setSteelPath(const std::shared_ptr<SteelPath> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<SyndicateMissions> getSyndicateMissions() const;
  bool syndicateMissionsIsSet() const;
  void unsetSyndicateMissions();

  void setSyndicateMissions(const std::shared_ptr<SyndicateMissions> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<VallisCycle> getVallisCycle() const;
  bool vallisCycleIsSet() const;
  void unsetVallisCycle();

  void setVallisCycle(const std::shared_ptr<VallisCycle> &value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<VoidTrader> getVoidTrader() const;
  bool voidTraderIsSet() const;
  void unsetVoidTrader();

  void setVoidTrader(const std::shared_ptr<VoidTrader> &value);

protected:
  utility::string_t m_Timestamp;
  bool m_TimestampIsSet;
  std::shared_ptr<Alerts> m_Alerts;
  bool m_AlertsIsSet;
  std::shared_ptr<Arbitration> m_Arbitration;
  bool m_ArbitrationIsSet;
  std::shared_ptr<ArchonHunt> m_ArchonHunt;
  bool m_ArchonHuntIsSet;
  std::shared_ptr<CambionCycle> m_CambionCycle;
  bool m_CambionCycleIsSet;
  std::shared_ptr<CetusCycle> m_CetusCycle;
  bool m_CetusCycleIsSet;
  std::shared_ptr<ConclaveChallenges> m_ConclaveChallenges;
  bool m_ConclaveChallengesIsSet;
  std::shared_ptr<Construction> m_ConstructionProgress;
  bool m_ConstructionProgressIsSet;
  std::shared_ptr<DailyDeals> m_DailyDeals;
  bool m_DailyDealsIsSet;
  std::shared_ptr<DarkSectors> m_DarkSectors;
  bool m_DarkSectorsIsSet;
  std::shared_ptr<EarthCycle> m_EarthCycle;
  bool m_EarthCycleIsSet;
  std::shared_ptr<Events> m_Events;
  bool m_EventsIsSet;
  std::shared_ptr<Fissures> m_Fissures;
  bool m_FissuresIsSet;
  std::shared_ptr<FlashSales> m_FlashSales;
  bool m_FlashSalesIsSet;
  std::shared_ptr<GlobalUpgrades> m_GlobalUpgrades;
  bool m_GlobalUpgradesIsSet;
  std::shared_ptr<Invasions> m_Invasions;
  bool m_InvasionsIsSet;
  std::vector<std::shared_ptr<Arbitration>> m_Kuva;
  bool m_KuvaIsSet;
  std::shared_ptr<News> m_News;
  bool m_NewsIsSet;
  std::shared_ptr<Nightwave> m_Nightwave;
  bool m_NightwaveIsSet;
  std::shared_ptr<PersistentEnemies> m_PersistentEnemies;
  bool m_PersistentEnemiesIsSet;
  std::shared_ptr<Simaris> m_Simaris;
  bool m_SimarisIsSet;
  std::shared_ptr<Sortie> m_Sortie;
  bool m_SortieIsSet;
  std::shared_ptr<SteelPath> m_SteelPath;
  bool m_SteelPathIsSet;
  std::shared_ptr<SyndicateMissions> m_SyndicateMissions;
  bool m_SyndicateMissionsIsSet;
  std::shared_ptr<VallisCycle> m_VallisCycle;
  bool m_VallisCycleIsSet;
  std::shared_ptr<VoidTrader> m_VoidTrader;
  bool m_VoidTraderIsSet;
};

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Ws_H_ */
