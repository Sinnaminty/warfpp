/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SortieData_bosses.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SortieData_bosses::SortieData_bosses() {
  m_SORTIE_BOSS_KELAIsSet = false;
  m_SORTIE_BOSS_AMBULASIsSet = false;
  m_SORTIE_BOSS_TYLIsSet = false;
  m_SORTIE_BOSS_ALADIsSet = false;
  m_SORTIE_BOSS_RUKIsSet = false;
  m_SORTIE_BOSS_HYENAIsSet = false;
  m_SORTIE_BOSS_KRILIsSet = false;
  m_SORTIE_BOSS_CORRUPTED_VORIsSet = false;
  m_SORTIE_BOSS_INFALADIsSet = false;
  m_SORTIE_BOSS_PHORIDIsSet = false;
  m_SORTIE_BOSS_JACKALIsSet = false;
  m_SORTIE_BOSS_RAPTORIsSet = false;
  m_SORTIE_BOSS_VORIsSet = false;
  m_SORTIE_BOSS_HEKIsSet = false;
  m_SORTIE_BOSS_NEFIsSet = false;
  m_SORTIE_BOSS_LEPHANTISIsSet = false;
}

SortieData_bosses::~SortieData_bosses() {}

void SortieData_bosses::validate() {
  // TODO: implement validation
}

web::json::value SortieData_bosses::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_SORTIE_BOSS_KELAIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_KELA"))] =
        ModelBase::toJson(m_SORTIE_BOSS_KELA);
  }
  if (m_SORTIE_BOSS_AMBULASIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS"))] =
        ModelBase::toJson(m_SORTIE_BOSS_AMBULAS);
  }
  if (m_SORTIE_BOSS_TYLIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_TYL"))] =
        ModelBase::toJson(m_SORTIE_BOSS_TYL);
  }
  if (m_SORTIE_BOSS_ALADIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD"))] =
        ModelBase::toJson(m_SORTIE_BOSS_ALAD);
  }
  if (m_SORTIE_BOSS_RUKIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_RUK"))] =
        ModelBase::toJson(m_SORTIE_BOSS_RUK);
  }
  if (m_SORTIE_BOSS_HYENAIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA"))] =
        ModelBase::toJson(m_SORTIE_BOSS_HYENA);
  }
  if (m_SORTIE_BOSS_KRILIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL"))] =
        ModelBase::toJson(m_SORTIE_BOSS_KRIL);
  }
  if (m_SORTIE_BOSS_CORRUPTED_VORIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR"))] =
        ModelBase::toJson(m_SORTIE_BOSS_CORRUPTED_VOR);
  }
  if (m_SORTIE_BOSS_INFALADIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD"))] =
        ModelBase::toJson(m_SORTIE_BOSS_INFALAD);
  }
  if (m_SORTIE_BOSS_PHORIDIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID"))] =
        ModelBase::toJson(m_SORTIE_BOSS_PHORID);
  }
  if (m_SORTIE_BOSS_JACKALIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL"))] =
        ModelBase::toJson(m_SORTIE_BOSS_JACKAL);
  }
  if (m_SORTIE_BOSS_RAPTORIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR"))] =
        ModelBase::toJson(m_SORTIE_BOSS_RAPTOR);
  }
  if (m_SORTIE_BOSS_VORIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_VOR"))] =
        ModelBase::toJson(m_SORTIE_BOSS_VOR);
  }
  if (m_SORTIE_BOSS_HEKIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_HEK"))] =
        ModelBase::toJson(m_SORTIE_BOSS_HEK);
  }
  if (m_SORTIE_BOSS_NEFIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_NEF"))] =
        ModelBase::toJson(m_SORTIE_BOSS_NEF);
  }
  if (m_SORTIE_BOSS_LEPHANTISIsSet) {
    val[utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS"))] =
        ModelBase::toJson(m_SORTIE_BOSS_LEPHANTIS);
  }

  return val;
}

bool SortieData_bosses::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_KELA")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_KELA")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSKELA;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSKELA);
      setSORTIEBOSSKELA(refVal_setSORTIEBOSSKELA);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSAMBULAS;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSAMBULAS);
      setSORTIEBOSSAMBULAS(refVal_setSORTIEBOSSAMBULAS);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_TYL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_TYL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSTYL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSTYL);
      setSORTIEBOSSTYL(refVal_setSORTIEBOSSTYL);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSALAD;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSALAD);
      setSORTIEBOSSALAD(refVal_setSORTIEBOSSALAD);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_RUK")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_RUK")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSRUK;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSRUK);
      setSORTIEBOSSRUK(refVal_setSORTIEBOSSRUK);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSHYENA;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSHYENA);
      setSORTIEBOSSHYENA(refVal_setSORTIEBOSSHYENA);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSKRIL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSKRIL);
      setSORTIEBOSSKRIL(refVal_setSORTIEBOSSKRIL);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR")))) {
    const web::json::value &fieldValue = val.at(
        utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSCORRUPTEDVOR;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSCORRUPTEDVOR);
      setSORTIEBOSSCORRUPTEDVOR(refVal_setSORTIEBOSSCORRUPTEDVOR);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSINFALAD;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSINFALAD);
      setSORTIEBOSSINFALAD(refVal_setSORTIEBOSSINFALAD);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSPHORID;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSPHORID);
      setSORTIEBOSSPHORID(refVal_setSORTIEBOSSPHORID);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSJACKAL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSJACKAL);
      setSORTIEBOSSJACKAL(refVal_setSORTIEBOSSJACKAL);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSRAPTOR;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSRAPTOR);
      setSORTIEBOSSRAPTOR(refVal_setSORTIEBOSSRAPTOR);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_VOR")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_VOR")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSVOR;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSVOR);
      setSORTIEBOSSVOR(refVal_setSORTIEBOSSVOR);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_HEK")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_HEK")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSHEK;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSHEK);
      setSORTIEBOSSHEK(refVal_setSORTIEBOSSHEK);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("SORTIE_BOSS_NEF")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_NEF")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSNEF;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSNEF);
      setSORTIEBOSSNEF(refVal_setSORTIEBOSSNEF);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
          refVal_setSORTIEBOSSLEPHANTIS;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSORTIEBOSSLEPHANTIS);
      setSORTIEBOSSLEPHANTIS(refVal_setSORTIEBOSSLEPHANTIS);
    }
  }
  return ok;
}

void SortieData_bosses::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_SORTIE_BOSS_KELAIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_KELA")),
        m_SORTIE_BOSS_KELA));
  }
  if (m_SORTIE_BOSS_AMBULASIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS")),
        m_SORTIE_BOSS_AMBULAS));
  }
  if (m_SORTIE_BOSS_TYLIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_TYL")),
        m_SORTIE_BOSS_TYL));
  }
  if (m_SORTIE_BOSS_ALADIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD")),
        m_SORTIE_BOSS_ALAD));
  }
  if (m_SORTIE_BOSS_RUKIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_RUK")),
        m_SORTIE_BOSS_RUK));
  }
  if (m_SORTIE_BOSS_HYENAIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA")),
        m_SORTIE_BOSS_HYENA));
  }
  if (m_SORTIE_BOSS_KRILIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL")),
        m_SORTIE_BOSS_KRIL));
  }
  if (m_SORTIE_BOSS_CORRUPTED_VORIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR")),
        m_SORTIE_BOSS_CORRUPTED_VOR));
  }
  if (m_SORTIE_BOSS_INFALADIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD")),
        m_SORTIE_BOSS_INFALAD));
  }
  if (m_SORTIE_BOSS_PHORIDIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID")),
        m_SORTIE_BOSS_PHORID));
  }
  if (m_SORTIE_BOSS_JACKALIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL")),
        m_SORTIE_BOSS_JACKAL));
  }
  if (m_SORTIE_BOSS_RAPTORIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR")),
        m_SORTIE_BOSS_RAPTOR));
  }
  if (m_SORTIE_BOSS_VORIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_VOR")),
        m_SORTIE_BOSS_VOR));
  }
  if (m_SORTIE_BOSS_HEKIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_HEK")),
        m_SORTIE_BOSS_HEK));
  }
  if (m_SORTIE_BOSS_NEFIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("SORTIE_BOSS_NEF")),
        m_SORTIE_BOSS_NEF));
  }
  if (m_SORTIE_BOSS_LEPHANTISIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS")),
        m_SORTIE_BOSS_LEPHANTIS));
  }
}

bool SortieData_bosses::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_KELA")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSKELA;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_KELA"))),
        refVal_setSORTIEBOSSKELA);
    setSORTIEBOSSKELA(refVal_setSORTIEBOSSKELA);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSAMBULAS;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_AMBULAS"))),
        refVal_setSORTIEBOSSAMBULAS);
    setSORTIEBOSSAMBULAS(refVal_setSORTIEBOSSAMBULAS);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_TYL")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> refVal_setSORTIEBOSSTYL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_TYL"))),
        refVal_setSORTIEBOSSTYL);
    setSORTIEBOSSTYL(refVal_setSORTIEBOSSTYL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSALAD;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_ALAD"))),
        refVal_setSORTIEBOSSALAD);
    setSORTIEBOSSALAD(refVal_setSORTIEBOSSALAD);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_RUK")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> refVal_setSORTIEBOSSRUK;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_RUK"))),
        refVal_setSORTIEBOSSRUK);
    setSORTIEBOSSRUK(refVal_setSORTIEBOSSRUK);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSHYENA;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_HYENA"))),
        refVal_setSORTIEBOSSHYENA);
    setSORTIEBOSSHYENA(refVal_setSORTIEBOSSHYENA);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSKRIL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_KRIL"))),
        refVal_setSORTIEBOSSKRIL);
    setSORTIEBOSSKRIL(refVal_setSORTIEBOSSKRIL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSCORRUPTEDVOR;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_CORRUPTED_VOR"))),
        refVal_setSORTIEBOSSCORRUPTEDVOR);
    setSORTIEBOSSCORRUPTEDVOR(refVal_setSORTIEBOSSCORRUPTEDVOR);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSINFALAD;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_INFALAD"))),
        refVal_setSORTIEBOSSINFALAD);
    setSORTIEBOSSINFALAD(refVal_setSORTIEBOSSINFALAD);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSPHORID;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_PHORID"))),
        refVal_setSORTIEBOSSPHORID);
    setSORTIEBOSSPHORID(refVal_setSORTIEBOSSPHORID);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSJACKAL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_JACKAL"))),
        refVal_setSORTIEBOSSJACKAL);
    setSORTIEBOSSJACKAL(refVal_setSORTIEBOSSJACKAL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSRAPTOR;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_RAPTOR"))),
        refVal_setSORTIEBOSSRAPTOR);
    setSORTIEBOSSRAPTOR(refVal_setSORTIEBOSSRAPTOR);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_VOR")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> refVal_setSORTIEBOSSVOR;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_VOR"))),
        refVal_setSORTIEBOSSVOR);
    setSORTIEBOSSVOR(refVal_setSORTIEBOSSVOR);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_HEK")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> refVal_setSORTIEBOSSHEK;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_HEK"))),
        refVal_setSORTIEBOSSHEK);
    setSORTIEBOSSHEK(refVal_setSORTIEBOSSHEK);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_NEF")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> refVal_setSORTIEBOSSNEF;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_NEF"))),
        refVal_setSORTIEBOSSNEF);
    setSORTIEBOSSNEF(refVal_setSORTIEBOSSNEF);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS")))) {
    std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
        refVal_setSORTIEBOSSLEPHANTIS;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SORTIE_BOSS_LEPHANTIS"))),
        refVal_setSORTIEBOSSLEPHANTIS);
    setSORTIEBOSSLEPHANTIS(refVal_setSORTIEBOSSLEPHANTIS);
  }
  return ok;
}

std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSKELA() const {
  return m_SORTIE_BOSS_KELA;
}

void SortieData_bosses::setSORTIEBOSSKELA(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_KELA = value;
  m_SORTIE_BOSS_KELAIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSKELAIsSet() const {
  return m_SORTIE_BOSS_KELAIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_KELA() {
  m_SORTIE_BOSS_KELAIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSAMBULAS() const {
  return m_SORTIE_BOSS_AMBULAS;
}

void SortieData_bosses::setSORTIEBOSSAMBULAS(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_AMBULAS = value;
  m_SORTIE_BOSS_AMBULASIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSAMBULASIsSet() const {
  return m_SORTIE_BOSS_AMBULASIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_AMBULAS() {
  m_SORTIE_BOSS_AMBULASIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSTYL() const {
  return m_SORTIE_BOSS_TYL;
}

void SortieData_bosses::setSORTIEBOSSTYL(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_TYL = value;
  m_SORTIE_BOSS_TYLIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSTYLIsSet() const {
  return m_SORTIE_BOSS_TYLIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_TYL() {
  m_SORTIE_BOSS_TYLIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSALAD() const {
  return m_SORTIE_BOSS_ALAD;
}

void SortieData_bosses::setSORTIEBOSSALAD(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_ALAD = value;
  m_SORTIE_BOSS_ALADIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSALADIsSet() const {
  return m_SORTIE_BOSS_ALADIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_ALAD() {
  m_SORTIE_BOSS_ALADIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSRUK() const {
  return m_SORTIE_BOSS_RUK;
}

void SortieData_bosses::setSORTIEBOSSRUK(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_RUK = value;
  m_SORTIE_BOSS_RUKIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSRUKIsSet() const {
  return m_SORTIE_BOSS_RUKIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_RUK() {
  m_SORTIE_BOSS_RUKIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSHYENA() const {
  return m_SORTIE_BOSS_HYENA;
}

void SortieData_bosses::setSORTIEBOSSHYENA(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_HYENA = value;
  m_SORTIE_BOSS_HYENAIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSHYENAIsSet() const {
  return m_SORTIE_BOSS_HYENAIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_HYENA() {
  m_SORTIE_BOSS_HYENAIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSKRIL() const {
  return m_SORTIE_BOSS_KRIL;
}

void SortieData_bosses::setSORTIEBOSSKRIL(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_KRIL = value;
  m_SORTIE_BOSS_KRILIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSKRILIsSet() const {
  return m_SORTIE_BOSS_KRILIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_KRIL() {
  m_SORTIE_BOSS_KRILIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSCORRUPTEDVOR() const {
  return m_SORTIE_BOSS_CORRUPTED_VOR;
}

void SortieData_bosses::setSORTIEBOSSCORRUPTEDVOR(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_CORRUPTED_VOR = value;
  m_SORTIE_BOSS_CORRUPTED_VORIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSCORRUPTEDVORIsSet() const {
  return m_SORTIE_BOSS_CORRUPTED_VORIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_CORRUPTED_VOR() {
  m_SORTIE_BOSS_CORRUPTED_VORIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSINFALAD() const {
  return m_SORTIE_BOSS_INFALAD;
}

void SortieData_bosses::setSORTIEBOSSINFALAD(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_INFALAD = value;
  m_SORTIE_BOSS_INFALADIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSINFALADIsSet() const {
  return m_SORTIE_BOSS_INFALADIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_INFALAD() {
  m_SORTIE_BOSS_INFALADIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSPHORID() const {
  return m_SORTIE_BOSS_PHORID;
}

void SortieData_bosses::setSORTIEBOSSPHORID(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_PHORID = value;
  m_SORTIE_BOSS_PHORIDIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSPHORIDIsSet() const {
  return m_SORTIE_BOSS_PHORIDIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_PHORID() {
  m_SORTIE_BOSS_PHORIDIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSJACKAL() const {
  return m_SORTIE_BOSS_JACKAL;
}

void SortieData_bosses::setSORTIEBOSSJACKAL(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_JACKAL = value;
  m_SORTIE_BOSS_JACKALIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSJACKALIsSet() const {
  return m_SORTIE_BOSS_JACKALIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_JACKAL() {
  m_SORTIE_BOSS_JACKALIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSRAPTOR() const {
  return m_SORTIE_BOSS_RAPTOR;
}

void SortieData_bosses::setSORTIEBOSSRAPTOR(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_RAPTOR = value;
  m_SORTIE_BOSS_RAPTORIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSRAPTORIsSet() const {
  return m_SORTIE_BOSS_RAPTORIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_RAPTOR() {
  m_SORTIE_BOSS_RAPTORIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSVOR() const {
  return m_SORTIE_BOSS_VOR;
}

void SortieData_bosses::setSORTIEBOSSVOR(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_VOR = value;
  m_SORTIE_BOSS_VORIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSVORIsSet() const {
  return m_SORTIE_BOSS_VORIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_VOR() {
  m_SORTIE_BOSS_VORIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSHEK() const {
  return m_SORTIE_BOSS_HEK;
}

void SortieData_bosses::setSORTIEBOSSHEK(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_HEK = value;
  m_SORTIE_BOSS_HEKIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSHEKIsSet() const {
  return m_SORTIE_BOSS_HEKIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_HEK() {
  m_SORTIE_BOSS_HEKIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSNEF() const {
  return m_SORTIE_BOSS_NEF;
}

void SortieData_bosses::setSORTIEBOSSNEF(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_NEF = value;
  m_SORTIE_BOSS_NEFIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSNEFIsSet() const {
  return m_SORTIE_BOSS_NEFIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_NEF() {
  m_SORTIE_BOSS_NEFIsSet = false;
}
std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA>
SortieData_bosses::getSORTIEBOSSLEPHANTIS() const {
  return m_SORTIE_BOSS_LEPHANTIS;
}

void SortieData_bosses::setSORTIEBOSSLEPHANTIS(
    const std::shared_ptr<SortieData_bosses_SORTIE_BOSS_KELA> &value) {
  m_SORTIE_BOSS_LEPHANTIS = value;
  m_SORTIE_BOSS_LEPHANTISIsSet = true;
}

bool SortieData_bosses::sORTIEBOSSLEPHANTISIsSet() const {
  return m_SORTIE_BOSS_LEPHANTISIsSet;
}

void SortieData_bosses::unsetSORTIE_BOSS_LEPHANTIS() {
  m_SORTIE_BOSS_LEPHANTISIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
