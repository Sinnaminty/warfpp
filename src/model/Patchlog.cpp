/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Patchlog.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Patchlog::Patchlog() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_date = utility::datetime();
  m_dateIsSet = false;
  m_Url = utility::conversions::to_string_t("");
  m_UrlIsSet = false;
  m_Additions = utility::conversions::to_string_t("");
  m_AdditionsIsSet = false;
  m_Changes = utility::conversions::to_string_t("");
  m_ChangesIsSet = false;
  m_Fixes = utility::conversions::to_string_t("");
  m_FixesIsSet = false;
}

Patchlog::~Patchlog() {}

void Patchlog::validate() {
  // TODO: implement validation
}

web::json::value Patchlog::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_dateIsSet) {
    val[utility::conversions::to_string_t(U("date"))] =
        ModelBase::toJson(m_date);
  }
  if (m_UrlIsSet) {
    val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
  }
  if (m_AdditionsIsSet) {
    val[utility::conversions::to_string_t(U("additions"))] =
        ModelBase::toJson(m_Additions);
  }
  if (m_ChangesIsSet) {
    val[utility::conversions::to_string_t(U("changes"))] =
        ModelBase::toJson(m_Changes);
  }
  if (m_FixesIsSet) {
    val[utility::conversions::to_string_t(U("fixes"))] =
        ModelBase::toJson(m_Fixes);
  }

  return val;
}

bool Patchlog::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("date")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("date")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
      setDate(refVal_setDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("url")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("url")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
      setUrl(refVal_setUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("additions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("additions")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAdditions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAdditions);
      setAdditions(refVal_setAdditions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("changes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("changes")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setChanges;
      ok &= ModelBase::fromJson(fieldValue, refVal_setChanges);
      setChanges(refVal_setChanges);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("fixes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("fixes")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setFixes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFixes);
      setFixes(refVal_setFixes);
    }
  }
  return ok;
}

void Patchlog::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_dateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("date")), m_date));
  }
  if (m_UrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
  }
  if (m_AdditionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("additions")),
        m_Additions));
  }
  if (m_ChangesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("changes")),
        m_Changes));
  }
  if (m_FixesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("fixes")), m_Fixes));
  }
}

bool Patchlog::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("date")))) {
    utility::datetime refVal_setDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("date"))),
        refVal_setDate);
    setDate(refVal_setDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("url")))) {
    utility::string_t refVal_setUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("url"))),
        refVal_setUrl);
    setUrl(refVal_setUrl);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("additions")))) {
    utility::string_t refVal_setAdditions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("additions"))),
        refVal_setAdditions);
    setAdditions(refVal_setAdditions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("changes")))) {
    utility::string_t refVal_setChanges;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("changes"))),
        refVal_setChanges);
    setChanges(refVal_setChanges);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("fixes")))) {
    utility::string_t refVal_setFixes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("fixes"))),
        refVal_setFixes);
    setFixes(refVal_setFixes);
  }
  return ok;
}

utility::string_t Patchlog::getName() const { return m_Name; }

void Patchlog::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool Patchlog::nameIsSet() const { return m_NameIsSet; }

void Patchlog::unsetName() { m_NameIsSet = false; }
utility::datetime Patchlog::getDate() const { return m_date; }

void Patchlog::setDate(const utility::datetime &value) {
  m_date = value;
  m_dateIsSet = true;
}

bool Patchlog::dateIsSet() const { return m_dateIsSet; }

void Patchlog::unsetdate() { m_dateIsSet = false; }
utility::string_t Patchlog::getUrl() const { return m_Url; }

void Patchlog::setUrl(const utility::string_t &value) {
  m_Url = value;
  m_UrlIsSet = true;
}

bool Patchlog::urlIsSet() const { return m_UrlIsSet; }

void Patchlog::unsetUrl() { m_UrlIsSet = false; }
utility::string_t Patchlog::getAdditions() const { return m_Additions; }

void Patchlog::setAdditions(const utility::string_t &value) {
  m_Additions = value;
  m_AdditionsIsSet = true;
}

bool Patchlog::additionsIsSet() const { return m_AdditionsIsSet; }

void Patchlog::unsetAdditions() { m_AdditionsIsSet = false; }
utility::string_t Patchlog::getChanges() const { return m_Changes; }

void Patchlog::setChanges(const utility::string_t &value) {
  m_Changes = value;
  m_ChangesIsSet = true;
}

bool Patchlog::changesIsSet() const { return m_ChangesIsSet; }

void Patchlog::unsetChanges() { m_ChangesIsSet = false; }
utility::string_t Patchlog::getFixes() const { return m_Fixes; }

void Patchlog::setFixes(const utility::string_t &value) {
  m_Fixes = value;
  m_FixesIsSet = true;
}

bool Patchlog::fixesIsSet() const { return m_FixesIsSet; }

void Patchlog::unsetFixes() { m_FixesIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
