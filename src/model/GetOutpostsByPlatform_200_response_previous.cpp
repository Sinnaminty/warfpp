/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/GetOutpostsByPlatform_200_response_previous.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GetOutpostsByPlatform_200_response_previous::
    GetOutpostsByPlatform_200_response_previous() {
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
}

GetOutpostsByPlatform_200_response_previous::
    ~GetOutpostsByPlatform_200_response_previous() {}

void GetOutpostsByPlatform_200_response_previous::validate() {
  // TODO: implement validation
}

web::json::value GetOutpostsByPlatform_200_response_previous::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }

  return val;
}

bool GetOutpostsByPlatform_200_response_previous::fromJson(
    const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  return ok;
}

void GetOutpostsByPlatform_200_response_previous::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
}

bool GetOutpostsByPlatform_200_response_previous::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  return ok;
}

utility::datetime
GetOutpostsByPlatform_200_response_previous::getActivation() const {
  return m_Activation;
}

void GetOutpostsByPlatform_200_response_previous::setActivation(
    const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool GetOutpostsByPlatform_200_response_previous::activationIsSet() const {
  return m_ActivationIsSet;
}

void GetOutpostsByPlatform_200_response_previous::unsetActivation() {
  m_ActivationIsSet = false;
}
utility::datetime
GetOutpostsByPlatform_200_response_previous::getExpiry() const {
  return m_Expiry;
}

void GetOutpostsByPlatform_200_response_previous::setExpiry(
    const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool GetOutpostsByPlatform_200_response_previous::expiryIsSet() const {
  return m_ExpiryIsSet;
}

void GetOutpostsByPlatform_200_response_previous::unsetExpiry() {
  m_ExpiryIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
