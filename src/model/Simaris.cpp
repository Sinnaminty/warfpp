/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Simaris.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Simaris::Simaris() {
  m_Target = utility::conversions::to_string_t("");
  m_TargetIsSet = false;
  m_IsTargetActive = false;
  m_IsTargetActiveIsSet = false;
  m_AsString = utility::conversions::to_string_t("");
  m_AsStringIsSet = false;
}

Simaris::~Simaris() {}

void Simaris::validate() {
  // TODO: implement validation
}

web::json::value Simaris::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_TargetIsSet) {
    val[utility::conversions::to_string_t(U("target"))] =
        ModelBase::toJson(m_Target);
  }
  if (m_IsTargetActiveIsSet) {
    val[utility::conversions::to_string_t(U("isTargetActive"))] =
        ModelBase::toJson(m_IsTargetActive);
  }
  if (m_AsStringIsSet) {
    val[utility::conversions::to_string_t(U("asString"))] =
        ModelBase::toJson(m_AsString);
  }

  return val;
}

bool Simaris::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("target")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("target")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTarget;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTarget);
      setTarget(refVal_setTarget);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isTargetActive")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isTargetActive")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsTargetActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsTargetActive);
      setIsTargetActive(refVal_setIsTargetActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("asString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("asString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAsString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAsString);
      setAsString(refVal_setAsString);
    }
  }
  return ok;
}

void Simaris::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                          const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_TargetIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("target")), m_Target));
  }
  if (m_IsTargetActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isTargetActive")),
        m_IsTargetActive));
  }
  if (m_AsStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("asString")),
        m_AsString));
  }
}

bool Simaris::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("target")))) {
    utility::string_t refVal_setTarget;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("target"))),
        refVal_setTarget);
    setTarget(refVal_setTarget);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("isTargetActive")))) {
    bool refVal_setIsTargetActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("isTargetActive"))),
        refVal_setIsTargetActive);
    setIsTargetActive(refVal_setIsTargetActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("asString")))) {
    utility::string_t refVal_setAsString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("asString"))),
        refVal_setAsString);
    setAsString(refVal_setAsString);
  }
  return ok;
}

utility::string_t Simaris::getTarget() const { return m_Target; }

void Simaris::setTarget(const utility::string_t &value) {
  m_Target = value;
  m_TargetIsSet = true;
}

bool Simaris::targetIsSet() const { return m_TargetIsSet; }

void Simaris::unsetTarget() { m_TargetIsSet = false; }
bool Simaris::isIsTargetActive() const { return m_IsTargetActive; }

void Simaris::setIsTargetActive(bool value) {
  m_IsTargetActive = value;
  m_IsTargetActiveIsSet = true;
}

bool Simaris::isTargetActiveIsSet() const { return m_IsTargetActiveIsSet; }

void Simaris::unsetIsTargetActive() { m_IsTargetActiveIsSet = false; }
utility::string_t Simaris::getAsString() const { return m_AsString; }

void Simaris::setAsString(const utility::string_t &value) {
  m_AsString = value;
  m_AsStringIsSet = true;
}

bool Simaris::asStringIsSet() const { return m_AsStringIsSet; }

void Simaris::unsetAsString() { m_AsStringIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
