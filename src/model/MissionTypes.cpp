/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/MissionTypes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

MissionTypes::MissionTypes() {
  m_MT_EXCAVATEIsSet = false;
  m_MT_SABOTAGEIsSet = false;
  m_MT_MOBILE_DEFENSEIsSet = false;
  m_MT_ASSASSINATIONIsSet = false;
  m_MT_EXTERMINATIONIsSet = false;
  m_MT_HIVEIsSet = false;
  m_MT_DEFENSEIsSet = false;
  m_MT_TERRITORYIsSet = false;
  m_MT_ARENAIsSet = false;
  m_MT_PVPIsSet = false;
  m_MT_RESCUEIsSet = false;
  m_MT_INTELIsSet = false;
  m_MT_SURVIVALIsSet = false;
  m_MT_CAPTUREIsSet = false;
  m_MT_SECTORIsSet = false;
  m_MT_RETRIEVALIsSet = false;
  m_MT_ASSAULTIsSet = false;
  m_MT_EVACUATIONIsSet = false;
}

MissionTypes::~MissionTypes() {}

void MissionTypes::validate() {
  // TODO: implement validation
}

web::json::value MissionTypes::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_MT_EXCAVATEIsSet) {
    val[utility::conversions::to_string_t(U("MT_EXCAVATE"))] =
        ModelBase::toJson(m_MT_EXCAVATE);
  }
  if (m_MT_SABOTAGEIsSet) {
    val[utility::conversions::to_string_t(U("MT_SABOTAGE"))] =
        ModelBase::toJson(m_MT_SABOTAGE);
  }
  if (m_MT_MOBILE_DEFENSEIsSet) {
    val[utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE"))] =
        ModelBase::toJson(m_MT_MOBILE_DEFENSE);
  }
  if (m_MT_ASSASSINATIONIsSet) {
    val[utility::conversions::to_string_t(U("MT_ASSASSINATION"))] =
        ModelBase::toJson(m_MT_ASSASSINATION);
  }
  if (m_MT_EXTERMINATIONIsSet) {
    val[utility::conversions::to_string_t(U("MT_EXTERMINATION"))] =
        ModelBase::toJson(m_MT_EXTERMINATION);
  }
  if (m_MT_HIVEIsSet) {
    val[utility::conversions::to_string_t(U("MT_HIVE"))] =
        ModelBase::toJson(m_MT_HIVE);
  }
  if (m_MT_DEFENSEIsSet) {
    val[utility::conversions::to_string_t(U("MT_DEFENSE"))] =
        ModelBase::toJson(m_MT_DEFENSE);
  }
  if (m_MT_TERRITORYIsSet) {
    val[utility::conversions::to_string_t(U("MT_TERRITORY"))] =
        ModelBase::toJson(m_MT_TERRITORY);
  }
  if (m_MT_ARENAIsSet) {
    val[utility::conversions::to_string_t(U("MT_ARENA"))] =
        ModelBase::toJson(m_MT_ARENA);
  }
  if (m_MT_PVPIsSet) {
    val[utility::conversions::to_string_t(U("MT_PVP"))] =
        ModelBase::toJson(m_MT_PVP);
  }
  if (m_MT_RESCUEIsSet) {
    val[utility::conversions::to_string_t(U("MT_RESCUE"))] =
        ModelBase::toJson(m_MT_RESCUE);
  }
  if (m_MT_INTELIsSet) {
    val[utility::conversions::to_string_t(U("MT_INTEL"))] =
        ModelBase::toJson(m_MT_INTEL);
  }
  if (m_MT_SURVIVALIsSet) {
    val[utility::conversions::to_string_t(U("MT_SURVIVAL"))] =
        ModelBase::toJson(m_MT_SURVIVAL);
  }
  if (m_MT_CAPTUREIsSet) {
    val[utility::conversions::to_string_t(U("MT_CAPTURE"))] =
        ModelBase::toJson(m_MT_CAPTURE);
  }
  if (m_MT_SECTORIsSet) {
    val[utility::conversions::to_string_t(U("MT_SECTOR"))] =
        ModelBase::toJson(m_MT_SECTOR);
  }
  if (m_MT_RETRIEVALIsSet) {
    val[utility::conversions::to_string_t(U("MT_RETRIEVAL"))] =
        ModelBase::toJson(m_MT_RETRIEVAL);
  }
  if (m_MT_ASSAULTIsSet) {
    val[utility::conversions::to_string_t(U("MT_ASSAULT"))] =
        ModelBase::toJson(m_MT_ASSAULT);
  }
  if (m_MT_EVACUATIONIsSet) {
    val[utility::conversions::to_string_t(U("MT_EVACUATION"))] =
        ModelBase::toJson(m_MT_EVACUATION);
  }

  return val;
}

bool MissionTypes::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("MT_EXCAVATE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_EXCAVATE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEXCAVATE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTEXCAVATE);
      setMTEXCAVATE(refVal_setMTEXCAVATE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_SABOTAGE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_SABOTAGE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSABOTAGE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTSABOTAGE);
      setMTSABOTAGE(refVal_setMTSABOTAGE);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTMOBILEDEFENSE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTMOBILEDEFENSE);
      setMTMOBILEDEFENSE(refVal_setMTMOBILEDEFENSE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_ASSASSINATION")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_ASSASSINATION")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTASSASSINATION;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTASSASSINATION);
      setMTASSASSINATION(refVal_setMTASSASSINATION);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_EXTERMINATION")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_EXTERMINATION")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEXTERMINATION;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTEXTERMINATION);
      setMTEXTERMINATION(refVal_setMTEXTERMINATION);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_HIVE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_HIVE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTHIVE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTHIVE);
      setMTHIVE(refVal_setMTHIVE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_DEFENSE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_DEFENSE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTDEFENSE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTDEFENSE);
      setMTDEFENSE(refVal_setMTDEFENSE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_TERRITORY")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_TERRITORY")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTTERRITORY;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTTERRITORY);
      setMTTERRITORY(refVal_setMTTERRITORY);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_ARENA")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_ARENA")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTARENA;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTARENA);
      setMTARENA(refVal_setMTARENA);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_PVP")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_PVP")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTPVP;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTPVP);
      setMTPVP(refVal_setMTPVP);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_RESCUE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_RESCUE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTRESCUE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTRESCUE);
      setMTRESCUE(refVal_setMTRESCUE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_INTEL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_INTEL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTINTEL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTINTEL);
      setMTINTEL(refVal_setMTINTEL);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_SURVIVAL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_SURVIVAL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSURVIVAL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTSURVIVAL);
      setMTSURVIVAL(refVal_setMTSURVIVAL);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_CAPTURE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_CAPTURE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTCAPTURE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTCAPTURE);
      setMTCAPTURE(refVal_setMTCAPTURE);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_SECTOR")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_SECTOR")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSECTOR;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTSECTOR);
      setMTSECTOR(refVal_setMTSECTOR);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_RETRIEVAL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_RETRIEVAL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTRETRIEVAL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTRETRIEVAL);
      setMTRETRIEVAL(refVal_setMTRETRIEVAL);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_ASSAULT")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_ASSAULT")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTASSAULT;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTASSAULT);
      setMTASSAULT(refVal_setMTASSAULT);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("MT_EVACUATION")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("MT_EVACUATION")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEVACUATION;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMTEVACUATION);
      setMTEVACUATION(refVal_setMTEVACUATION);
    }
  }
  return ok;
}

void MissionTypes::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_MT_EXCAVATEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_EXCAVATE")),
        m_MT_EXCAVATE));
  }
  if (m_MT_SABOTAGEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_SABOTAGE")),
        m_MT_SABOTAGE));
  }
  if (m_MT_MOBILE_DEFENSEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE")),
        m_MT_MOBILE_DEFENSE));
  }
  if (m_MT_ASSASSINATIONIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_ASSASSINATION")),
        m_MT_ASSASSINATION));
  }
  if (m_MT_EXTERMINATIONIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_EXTERMINATION")),
        m_MT_EXTERMINATION));
  }
  if (m_MT_HIVEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_HIVE")),
        m_MT_HIVE));
  }
  if (m_MT_DEFENSEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_DEFENSE")),
        m_MT_DEFENSE));
  }
  if (m_MT_TERRITORYIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_TERRITORY")),
        m_MT_TERRITORY));
  }
  if (m_MT_ARENAIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_ARENA")),
        m_MT_ARENA));
  }
  if (m_MT_PVPIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_PVP")), m_MT_PVP));
  }
  if (m_MT_RESCUEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_RESCUE")),
        m_MT_RESCUE));
  }
  if (m_MT_INTELIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_INTEL")),
        m_MT_INTEL));
  }
  if (m_MT_SURVIVALIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_SURVIVAL")),
        m_MT_SURVIVAL));
  }
  if (m_MT_CAPTUREIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_CAPTURE")),
        m_MT_CAPTURE));
  }
  if (m_MT_SECTORIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_SECTOR")),
        m_MT_SECTOR));
  }
  if (m_MT_RETRIEVALIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_RETRIEVAL")),
        m_MT_RETRIEVAL));
  }
  if (m_MT_ASSAULTIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_ASSAULT")),
        m_MT_ASSAULT));
  }
  if (m_MT_EVACUATIONIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("MT_EVACUATION")),
        m_MT_EVACUATION));
  }
}

bool MissionTypes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_EXCAVATE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEXCAVATE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_EXCAVATE"))),
        refVal_setMTEXCAVATE);
    setMTEXCAVATE(refVal_setMTEXCAVATE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_SABOTAGE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSABOTAGE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_SABOTAGE"))),
        refVal_setMTSABOTAGE);
    setMTSABOTAGE(refVal_setMTSABOTAGE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTMOBILEDEFENSE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_MOBILE_DEFENSE"))),
        refVal_setMTMOBILEDEFENSE);
    setMTMOBILEDEFENSE(refVal_setMTMOBILEDEFENSE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_ASSASSINATION")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTASSASSINATION;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_ASSASSINATION"))),
        refVal_setMTASSASSINATION);
    setMTASSASSINATION(refVal_setMTASSASSINATION);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_EXTERMINATION")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEXTERMINATION;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_EXTERMINATION"))),
        refVal_setMTEXTERMINATION);
    setMTEXTERMINATION(refVal_setMTEXTERMINATION);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("MT_HIVE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTHIVE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("MT_HIVE"))),
        refVal_setMTHIVE);
    setMTHIVE(refVal_setMTHIVE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_DEFENSE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTDEFENSE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_DEFENSE"))),
        refVal_setMTDEFENSE);
    setMTDEFENSE(refVal_setMTDEFENSE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_TERRITORY")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTTERRITORY;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_TERRITORY"))),
        refVal_setMTTERRITORY);
    setMTTERRITORY(refVal_setMTTERRITORY);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("MT_ARENA")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTARENA;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("MT_ARENA"))),
        refVal_setMTARENA);
    setMTARENA(refVal_setMTARENA);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("MT_PVP")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTPVP;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("MT_PVP"))),
        refVal_setMTPVP);
    setMTPVP(refVal_setMTPVP);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_RESCUE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTRESCUE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_RESCUE"))),
        refVal_setMTRESCUE);
    setMTRESCUE(refVal_setMTRESCUE);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("MT_INTEL")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTINTEL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("MT_INTEL"))),
        refVal_setMTINTEL);
    setMTINTEL(refVal_setMTINTEL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_SURVIVAL")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSURVIVAL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_SURVIVAL"))),
        refVal_setMTSURVIVAL);
    setMTSURVIVAL(refVal_setMTSURVIVAL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_CAPTURE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTCAPTURE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_CAPTURE"))),
        refVal_setMTCAPTURE);
    setMTCAPTURE(refVal_setMTCAPTURE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_SECTOR")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTSECTOR;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_SECTOR"))),
        refVal_setMTSECTOR);
    setMTSECTOR(refVal_setMTSECTOR);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_RETRIEVAL")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTRETRIEVAL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_RETRIEVAL"))),
        refVal_setMTRETRIEVAL);
    setMTRETRIEVAL(refVal_setMTRETRIEVAL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_ASSAULT")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTASSAULT;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_ASSAULT"))),
        refVal_setMTASSAULT);
    setMTASSAULT(refVal_setMTASSAULT);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("MT_EVACUATION")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setMTEVACUATION;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("MT_EVACUATION"))),
        refVal_setMTEVACUATION);
    setMTEVACUATION(refVal_setMTEVACUATION);
  }
  return ok;
}

std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTEXCAVATE() const {
  return m_MT_EXCAVATE;
}

void MissionTypes::setMTEXCAVATE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_EXCAVATE = value;
  m_MT_EXCAVATEIsSet = true;
}

bool MissionTypes::mTEXCAVATEIsSet() const { return m_MT_EXCAVATEIsSet; }

void MissionTypes::unsetMT_EXCAVATE() { m_MT_EXCAVATEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTSABOTAGE() const {
  return m_MT_SABOTAGE;
}

void MissionTypes::setMTSABOTAGE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_SABOTAGE = value;
  m_MT_SABOTAGEIsSet = true;
}

bool MissionTypes::mTSABOTAGEIsSet() const { return m_MT_SABOTAGEIsSet; }

void MissionTypes::unsetMT_SABOTAGE() { m_MT_SABOTAGEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTMOBILEDEFENSE() const {
  return m_MT_MOBILE_DEFENSE;
}

void MissionTypes::setMTMOBILEDEFENSE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_MOBILE_DEFENSE = value;
  m_MT_MOBILE_DEFENSEIsSet = true;
}

bool MissionTypes::mTMOBILEDEFENSEIsSet() const {
  return m_MT_MOBILE_DEFENSEIsSet;
}

void MissionTypes::unsetMT_MOBILE_DEFENSE() {
  m_MT_MOBILE_DEFENSEIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTASSASSINATION() const {
  return m_MT_ASSASSINATION;
}

void MissionTypes::setMTASSASSINATION(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_ASSASSINATION = value;
  m_MT_ASSASSINATIONIsSet = true;
}

bool MissionTypes::mTASSASSINATIONIsSet() const {
  return m_MT_ASSASSINATIONIsSet;
}

void MissionTypes::unsetMT_ASSASSINATION() { m_MT_ASSASSINATIONIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTEXTERMINATION() const {
  return m_MT_EXTERMINATION;
}

void MissionTypes::setMTEXTERMINATION(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_EXTERMINATION = value;
  m_MT_EXTERMINATIONIsSet = true;
}

bool MissionTypes::mTEXTERMINATIONIsSet() const {
  return m_MT_EXTERMINATIONIsSet;
}

void MissionTypes::unsetMT_EXTERMINATION() { m_MT_EXTERMINATIONIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTHIVE() const {
  return m_MT_HIVE;
}

void MissionTypes::setMTHIVE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_HIVE = value;
  m_MT_HIVEIsSet = true;
}

bool MissionTypes::mTHIVEIsSet() const { return m_MT_HIVEIsSet; }

void MissionTypes::unsetMT_HIVE() { m_MT_HIVEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTDEFENSE() const {
  return m_MT_DEFENSE;
}

void MissionTypes::setMTDEFENSE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_DEFENSE = value;
  m_MT_DEFENSEIsSet = true;
}

bool MissionTypes::mTDEFENSEIsSet() const { return m_MT_DEFENSEIsSet; }

void MissionTypes::unsetMT_DEFENSE() { m_MT_DEFENSEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTTERRITORY() const {
  return m_MT_TERRITORY;
}

void MissionTypes::setMTTERRITORY(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_TERRITORY = value;
  m_MT_TERRITORYIsSet = true;
}

bool MissionTypes::mTTERRITORYIsSet() const { return m_MT_TERRITORYIsSet; }

void MissionTypes::unsetMT_TERRITORY() { m_MT_TERRITORYIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTARENA() const {
  return m_MT_ARENA;
}

void MissionTypes::setMTARENA(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_ARENA = value;
  m_MT_ARENAIsSet = true;
}

bool MissionTypes::mTARENAIsSet() const { return m_MT_ARENAIsSet; }

void MissionTypes::unsetMT_ARENA() { m_MT_ARENAIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTPVP() const {
  return m_MT_PVP;
}

void MissionTypes::setMTPVP(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_PVP = value;
  m_MT_PVPIsSet = true;
}

bool MissionTypes::mTPVPIsSet() const { return m_MT_PVPIsSet; }

void MissionTypes::unsetMT_PVP() { m_MT_PVPIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTRESCUE() const {
  return m_MT_RESCUE;
}

void MissionTypes::setMTRESCUE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_RESCUE = value;
  m_MT_RESCUEIsSet = true;
}

bool MissionTypes::mTRESCUEIsSet() const { return m_MT_RESCUEIsSet; }

void MissionTypes::unsetMT_RESCUE() { m_MT_RESCUEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTINTEL() const {
  return m_MT_INTEL;
}

void MissionTypes::setMTINTEL(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_INTEL = value;
  m_MT_INTELIsSet = true;
}

bool MissionTypes::mTINTELIsSet() const { return m_MT_INTELIsSet; }

void MissionTypes::unsetMT_INTEL() { m_MT_INTELIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTSURVIVAL() const {
  return m_MT_SURVIVAL;
}

void MissionTypes::setMTSURVIVAL(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_SURVIVAL = value;
  m_MT_SURVIVALIsSet = true;
}

bool MissionTypes::mTSURVIVALIsSet() const { return m_MT_SURVIVALIsSet; }

void MissionTypes::unsetMT_SURVIVAL() { m_MT_SURVIVALIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTCAPTURE() const {
  return m_MT_CAPTURE;
}

void MissionTypes::setMTCAPTURE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_CAPTURE = value;
  m_MT_CAPTUREIsSet = true;
}

bool MissionTypes::mTCAPTUREIsSet() const { return m_MT_CAPTUREIsSet; }

void MissionTypes::unsetMT_CAPTURE() { m_MT_CAPTUREIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTSECTOR() const {
  return m_MT_SECTOR;
}

void MissionTypes::setMTSECTOR(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_SECTOR = value;
  m_MT_SECTORIsSet = true;
}

bool MissionTypes::mTSECTORIsSet() const { return m_MT_SECTORIsSet; }

void MissionTypes::unsetMT_SECTOR() { m_MT_SECTORIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTRETRIEVAL() const {
  return m_MT_RETRIEVAL;
}

void MissionTypes::setMTRETRIEVAL(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_RETRIEVAL = value;
  m_MT_RETRIEVALIsSet = true;
}

bool MissionTypes::mTRETRIEVALIsSet() const { return m_MT_RETRIEVALIsSet; }

void MissionTypes::unsetMT_RETRIEVAL() { m_MT_RETRIEVALIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> MissionTypes::getMTASSAULT() const {
  return m_MT_ASSAULT;
}

void MissionTypes::setMTASSAULT(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_ASSAULT = value;
  m_MT_ASSAULTIsSet = true;
}

bool MissionTypes::mTASSAULTIsSet() const { return m_MT_ASSAULTIsSet; }

void MissionTypes::unsetMT_ASSAULT() { m_MT_ASSAULTIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
MissionTypes::getMTEVACUATION() const {
  return m_MT_EVACUATION;
}

void MissionTypes::setMTEVACUATION(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_MT_EVACUATION = value;
  m_MT_EVACUATIONIsSet = true;
}

bool MissionTypes::mTEVACUATIONIsSet() const { return m_MT_EVACUATIONIsSet; }

void MissionTypes::unsetMT_EVACUATION() { m_MT_EVACUATIONIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
