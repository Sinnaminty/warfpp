/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SyndicateJob.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SyndicateJob::SyndicateJob() {
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_RewardPoolIsSet = false;
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_EnemyLevelsIsSet = false;
  m_StandingStagesIsSet = false;
  m_MinMR = 0.0;
  m_MinMRIsSet = false;
}

SyndicateJob::~SyndicateJob() {}

void SyndicateJob::validate() {
  // TODO: implement validation
}

web::json::value SyndicateJob::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_RewardPoolIsSet) {
    val[utility::conversions::to_string_t(U("rewardPool"))] =
        ModelBase::toJson(m_RewardPool);
  }
  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_EnemyLevelsIsSet) {
    val[utility::conversions::to_string_t(U("enemyLevels"))] =
        ModelBase::toJson(m_EnemyLevels);
  }
  if (m_StandingStagesIsSet) {
    val[utility::conversions::to_string_t(U("standingStages"))] =
        ModelBase::toJson(m_StandingStages);
  }
  if (m_MinMRIsSet) {
    val[utility::conversions::to_string_t(U("minMR"))] =
        ModelBase::toJson(m_MinMR);
  }

  return val;
}

bool SyndicateJob::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rewardPool")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rewardPool")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setRewardPool;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRewardPool);
      setRewardPool(refVal_setRewardPool);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("enemyLevels")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("enemyLevels")));
    if (!fieldValue.is_null()) {
      std::vector<double> refVal_setEnemyLevels;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnemyLevels);
      setEnemyLevels(refVal_setEnemyLevels);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("standingStages")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("standingStages")));
    if (!fieldValue.is_null()) {
      std::vector<double> refVal_setStandingStages;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStandingStages);
      setStandingStages(refVal_setStandingStages);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("minMR")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("minMR")));
    if (!fieldValue.is_null()) {
      double refVal_setMinMR;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMinMR);
      setMinMR(refVal_setMinMR);
    }
  }
  return ok;
}

void SyndicateJob::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_RewardPoolIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rewardPool")),
        m_RewardPool));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_EnemyLevelsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("enemyLevels")),
        m_EnemyLevels));
  }
  if (m_StandingStagesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("standingStages")),
        m_StandingStages));
  }
  if (m_MinMRIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("minMR")), m_MinMR));
  }
}

bool SyndicateJob::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("rewardPool")))) {
    std::vector<utility::string_t> refVal_setRewardPool;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("rewardPool"))),
        refVal_setRewardPool);
    setRewardPool(refVal_setRewardPool);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("enemyLevels")))) {
    std::vector<double> refVal_setEnemyLevels;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("enemyLevels"))),
        refVal_setEnemyLevels);
    setEnemyLevels(refVal_setEnemyLevels);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("standingStages")))) {
    std::vector<double> refVal_setStandingStages;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("standingStages"))),
        refVal_setStandingStages);
    setStandingStages(refVal_setStandingStages);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("minMR")))) {
    double refVal_setMinMR;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("minMR"))),
        refVal_setMinMR);
    setMinMR(refVal_setMinMR);
  }
  return ok;
}

utility::datetime SyndicateJob::getActivation() const { return m_Activation; }

void SyndicateJob::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool SyndicateJob::activationIsSet() const { return m_ActivationIsSet; }

void SyndicateJob::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime SyndicateJob::getExpiry() const { return m_Expiry; }

void SyndicateJob::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool SyndicateJob::expiryIsSet() const { return m_ExpiryIsSet; }

void SyndicateJob::unsetExpiry() { m_ExpiryIsSet = false; }
std::vector<utility::string_t> &SyndicateJob::getRewardPool() {
  return m_RewardPool;
}

void SyndicateJob::setRewardPool(const std::vector<utility::string_t> &value) {
  m_RewardPool = value;
  m_RewardPoolIsSet = true;
}

bool SyndicateJob::rewardPoolIsSet() const { return m_RewardPoolIsSet; }

void SyndicateJob::unsetRewardPool() { m_RewardPoolIsSet = false; }
utility::string_t SyndicateJob::getType() const { return m_Type; }

void SyndicateJob::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool SyndicateJob::typeIsSet() const { return m_TypeIsSet; }

void SyndicateJob::unsetType() { m_TypeIsSet = false; }
std::vector<double> &SyndicateJob::getEnemyLevels() { return m_EnemyLevels; }

void SyndicateJob::setEnemyLevels(std::vector<double> value) {
  m_EnemyLevels = value;
  m_EnemyLevelsIsSet = true;
}

bool SyndicateJob::enemyLevelsIsSet() const { return m_EnemyLevelsIsSet; }

void SyndicateJob::unsetEnemyLevels() { m_EnemyLevelsIsSet = false; }
std::vector<double> &SyndicateJob::getStandingStages() {
  return m_StandingStages;
}

void SyndicateJob::setStandingStages(std::vector<double> value) {
  m_StandingStages = value;
  m_StandingStagesIsSet = true;
}

bool SyndicateJob::standingStagesIsSet() const { return m_StandingStagesIsSet; }

void SyndicateJob::unsetStandingStages() { m_StandingStagesIsSet = false; }
double SyndicateJob::getMinMR() const { return m_MinMR; }

void SyndicateJob::setMinMR(double value) {
  m_MinMR = value;
  m_MinMRIsSet = true;
}

bool SyndicateJob::minMRIsSet() const { return m_MinMRIsSet; }

void SyndicateJob::unsetMinMR() { m_MinMRIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
