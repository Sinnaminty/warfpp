/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Nightwave.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Nightwave::Nightwave() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_StartString = utility::conversions::to_string_t("");
  m_StartStringIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_ParamsIsSet = false;
  m_RewardTypesIsSet = false;
  m_Season = 0.0;
  m_SeasonIsSet = false;
  m_Tag = utility::conversions::to_string_t("");
  m_TagIsSet = false;
  m_Phase = 0.0;
  m_PhaseIsSet = false;
  m_PossibleChallengesIsSet = false;
  m_ActiveChallengesIsSet = false;
}

Nightwave::~Nightwave() {}

void Nightwave::validate() {
  // TODO: implement validation
}

web::json::value Nightwave::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_StartStringIsSet) {
    val[utility::conversions::to_string_t(U("startString"))] =
        ModelBase::toJson(m_StartString);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_ParamsIsSet) {
    val[utility::conversions::to_string_t(U("params"))] =
        ModelBase::toJson(m_Params);
  }
  if (m_RewardTypesIsSet) {
    val[utility::conversions::to_string_t(U("rewardTypes"))] =
        ModelBase::toJson(m_RewardTypes);
  }
  if (m_SeasonIsSet) {
    val[utility::conversions::to_string_t(U("season"))] =
        ModelBase::toJson(m_Season);
  }
  if (m_TagIsSet) {
    val[utility::conversions::to_string_t(U("tag"))] = ModelBase::toJson(m_Tag);
  }
  if (m_PhaseIsSet) {
    val[utility::conversions::to_string_t(U("phase"))] =
        ModelBase::toJson(m_Phase);
  }
  if (m_PossibleChallengesIsSet) {
    val[utility::conversions::to_string_t(U("possibleChallenges"))] =
        ModelBase::toJson(m_PossibleChallenges);
  }
  if (m_ActiveChallengesIsSet) {
    val[utility::conversions::to_string_t(U("activeChallenges"))] =
        ModelBase::toJson(m_ActiveChallenges);
  }

  return val;
}

bool Nightwave::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("startString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("startString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStartString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStartString);
      setStartString(refVal_setStartString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("params")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("params")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Object> refVal_setParams;
      ok &= ModelBase::fromJson(fieldValue, refVal_setParams);
      setParams(refVal_setParams);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rewardTypes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rewardTypes")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setRewardTypes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTypes);
      setRewardTypes(refVal_setRewardTypes);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("season")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("season")));
    if (!fieldValue.is_null()) {
      double refVal_setSeason;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSeason);
      setSeason(refVal_setSeason);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tag")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tag")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTag;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTag);
      setTag(refVal_setTag);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("phase")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("phase")));
    if (!fieldValue.is_null()) {
      double refVal_setPhase;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPhase);
      setPhase(refVal_setPhase);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("possibleChallenges")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("possibleChallenges")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<NightwaveChallenge>>
          refVal_setPossibleChallenges;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPossibleChallenges);
      setPossibleChallenges(refVal_setPossibleChallenges);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activeChallenges")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activeChallenges")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<NightwaveChallenge>>
          refVal_setActiveChallenges;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActiveChallenges);
      setActiveChallenges(refVal_setActiveChallenges);
    }
  }
  return ok;
}

void Nightwave::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_StartStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("startString")),
        m_StartString));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_ParamsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("params")), m_Params));
  }
  if (m_RewardTypesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rewardTypes")),
        m_RewardTypes));
  }
  if (m_SeasonIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("season")), m_Season));
  }
  if (m_TagIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tag")), m_Tag));
  }
  if (m_PhaseIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("phase")), m_Phase));
  }
  if (m_PossibleChallengesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("possibleChallenges")),
        m_PossibleChallenges));
  }
  if (m_ActiveChallengesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activeChallenges")),
        m_ActiveChallenges));
  }
}

bool Nightwave::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("startString")))) {
    utility::string_t refVal_setStartString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("startString"))),
        refVal_setStartString);
    setStartString(refVal_setStartString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("params")))) {
    std::shared_ptr<Object> refVal_setParams;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("params"))),
        refVal_setParams);
    setParams(refVal_setParams);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("rewardTypes")))) {
    std::vector<utility::string_t> refVal_setRewardTypes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("rewardTypes"))),
        refVal_setRewardTypes);
    setRewardTypes(refVal_setRewardTypes);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("season")))) {
    double refVal_setSeason;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("season"))),
        refVal_setSeason);
    setSeason(refVal_setSeason);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tag")))) {
    utility::string_t refVal_setTag;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tag"))),
        refVal_setTag);
    setTag(refVal_setTag);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("phase")))) {
    double refVal_setPhase;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("phase"))),
        refVal_setPhase);
    setPhase(refVal_setPhase);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("possibleChallenges")))) {
    std::vector<std::shared_ptr<NightwaveChallenge>>
        refVal_setPossibleChallenges;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("possibleChallenges"))),
        refVal_setPossibleChallenges);
    setPossibleChallenges(refVal_setPossibleChallenges);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activeChallenges")))) {
    std::vector<std::shared_ptr<NightwaveChallenge>> refVal_setActiveChallenges;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activeChallenges"))),
        refVal_setActiveChallenges);
    setActiveChallenges(refVal_setActiveChallenges);
  }
  return ok;
}

utility::string_t Nightwave::getId() const { return m_Id; }

void Nightwave::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool Nightwave::idIsSet() const { return m_IdIsSet; }

void Nightwave::unsetId() { m_IdIsSet = false; }
utility::datetime Nightwave::getActivation() const { return m_Activation; }

void Nightwave::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool Nightwave::activationIsSet() const { return m_ActivationIsSet; }

void Nightwave::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime Nightwave::getExpiry() const { return m_Expiry; }

void Nightwave::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool Nightwave::expiryIsSet() const { return m_ExpiryIsSet; }

void Nightwave::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t Nightwave::getStartString() const { return m_StartString; }

void Nightwave::setStartString(const utility::string_t &value) {
  m_StartString = value;
  m_StartStringIsSet = true;
}

bool Nightwave::startStringIsSet() const { return m_StartStringIsSet; }

void Nightwave::unsetStartString() { m_StartStringIsSet = false; }
bool Nightwave::isActive() const { return m_Active; }

void Nightwave::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool Nightwave::activeIsSet() const { return m_ActiveIsSet; }

void Nightwave::unsetActive() { m_ActiveIsSet = false; }
std::shared_ptr<Object> Nightwave::getParams() const { return m_Params; }

void Nightwave::setParams(const std::shared_ptr<Object> &value) {
  m_Params = value;
  m_ParamsIsSet = true;
}

bool Nightwave::paramsIsSet() const { return m_ParamsIsSet; }

void Nightwave::unsetParams() { m_ParamsIsSet = false; }
std::vector<utility::string_t> &Nightwave::getRewardTypes() {
  return m_RewardTypes;
}

void Nightwave::setRewardTypes(const std::vector<utility::string_t> &value) {
  m_RewardTypes = value;
  m_RewardTypesIsSet = true;
}

bool Nightwave::rewardTypesIsSet() const { return m_RewardTypesIsSet; }

void Nightwave::unsetRewardTypes() { m_RewardTypesIsSet = false; }
double Nightwave::getSeason() const { return m_Season; }

void Nightwave::setSeason(double value) {
  m_Season = value;
  m_SeasonIsSet = true;
}

bool Nightwave::seasonIsSet() const { return m_SeasonIsSet; }

void Nightwave::unsetSeason() { m_SeasonIsSet = false; }
utility::string_t Nightwave::getTag() const { return m_Tag; }

void Nightwave::setTag(const utility::string_t &value) {
  m_Tag = value;
  m_TagIsSet = true;
}

bool Nightwave::tagIsSet() const { return m_TagIsSet; }

void Nightwave::unsetTag() { m_TagIsSet = false; }
double Nightwave::getPhase() const { return m_Phase; }

void Nightwave::setPhase(double value) {
  m_Phase = value;
  m_PhaseIsSet = true;
}

bool Nightwave::phaseIsSet() const { return m_PhaseIsSet; }

void Nightwave::unsetPhase() { m_PhaseIsSet = false; }
std::vector<std::shared_ptr<NightwaveChallenge>> &
Nightwave::getPossibleChallenges() {
  return m_PossibleChallenges;
}

void Nightwave::setPossibleChallenges(
    const std::vector<std::shared_ptr<NightwaveChallenge>> &value) {
  m_PossibleChallenges = value;
  m_PossibleChallengesIsSet = true;
}

bool Nightwave::possibleChallengesIsSet() const {
  return m_PossibleChallengesIsSet;
}

void Nightwave::unsetPossibleChallenges() { m_PossibleChallengesIsSet = false; }
std::vector<std::shared_ptr<NightwaveChallenge>> &
Nightwave::getActiveChallenges() {
  return m_ActiveChallenges;
}

void Nightwave::setActiveChallenges(
    const std::vector<std::shared_ptr<NightwaveChallenge>> &value) {
  m_ActiveChallenges = value;
  m_ActiveChallengesIsSet = true;
}

bool Nightwave::activeChallengesIsSet() const {
  return m_ActiveChallengesIsSet;
}

void Nightwave::unsetActiveChallenges() { m_ActiveChallengesIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
