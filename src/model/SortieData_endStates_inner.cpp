/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SortieData_endStates_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SortieData_endStates_inner::SortieData_endStates_inner() {
  m_RegionsIsSet = false;
  m_BossName = utility::conversions::to_string_t("");
  m_BossNameIsSet = false;
}

SortieData_endStates_inner::~SortieData_endStates_inner() {}

void SortieData_endStates_inner::validate() {
  // TODO: implement validation
}

web::json::value SortieData_endStates_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_RegionsIsSet) {
    val[utility::conversions::to_string_t(U("regions"))] =
        ModelBase::toJson(m_Regions);
  }
  if (m_BossNameIsSet) {
    val[utility::conversions::to_string_t(U("bossName"))] =
        ModelBase::toJson(m_BossName);
  }

  return val;
}

bool SortieData_endStates_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("regions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("regions")));
    if (!fieldValue.is_null()) {
      std::set<std::shared_ptr<SortieData_endStates_inner_regions_inner>>
          refVal_setRegions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRegions);
      setRegions(refVal_setRegions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("bossName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bossName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBossName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBossName);
      setBossName(refVal_setBossName);
    }
  }
  return ok;
}

void SortieData_endStates_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_RegionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("regions")),
        m_Regions));
  }
  if (m_BossNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bossName")),
        m_BossName));
  }
}

bool SortieData_endStates_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("regions")))) {
    std::set<std::shared_ptr<SortieData_endStates_inner_regions_inner>>
        refVal_setRegions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("regions"))),
        refVal_setRegions);
    setRegions(refVal_setRegions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("bossName")))) {
    utility::string_t refVal_setBossName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("bossName"))),
        refVal_setBossName);
    setBossName(refVal_setBossName);
  }
  return ok;
}

std::set<std::shared_ptr<SortieData_endStates_inner_regions_inner>> &
SortieData_endStates_inner::getRegions() {
  return m_Regions;
}

void SortieData_endStates_inner::setRegions(
    const std::set<std::shared_ptr<SortieData_endStates_inner_regions_inner>>
        &value) {
  m_Regions = value;
  m_RegionsIsSet = true;
}

bool SortieData_endStates_inner::regionsIsSet() const { return m_RegionsIsSet; }

void SortieData_endStates_inner::unsetRegions() { m_RegionsIsSet = false; }
utility::string_t SortieData_endStates_inner::getBossName() const {
  return m_BossName;
}

void SortieData_endStates_inner::setBossName(const utility::string_t &value) {
  m_BossName = value;
  m_BossNameIsSet = true;
}

bool SortieData_endStates_inner::bossNameIsSet() const {
  return m_BossNameIsSet;
}

void SortieData_endStates_inner::unsetBossName() { m_BossNameIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
