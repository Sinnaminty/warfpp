/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Polarity.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

Polarity::ePolarity toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("Vazarin")))
    return Polarity::ePolarity::Polarity_VAZARIN;
  if (val == utility::conversions::to_string_t(U("Madurai")))
    return Polarity::ePolarity::Polarity_MADURAI;
  if (val == utility::conversions::to_string_t(U("Naramon")))
    return Polarity::ePolarity::Polarity_NARAMON;
  if (val == utility::conversions::to_string_t(U("Zenurik")))
    return Polarity::ePolarity::Polarity_ZENURIK;
  if (val == utility::conversions::to_string_t(U("Unairu")))
    return Polarity::ePolarity::Polarity_UNAIRU;
  if (val == utility::conversions::to_string_t(U("Penjaga")))
    return Polarity::ePolarity::Polarity_PENJAGA;
  if (val == utility::conversions::to_string_t(U("Unbra")))
    return Polarity::ePolarity::Polarity_UNBRA;
  return {};
}

EnumUnderlyingType fromEnum(Polarity::ePolarity e) {
  switch (e) {
  case Polarity::ePolarity::Polarity_VAZARIN:
    return U("Vazarin");
  case Polarity::ePolarity::Polarity_MADURAI:
    return U("Madurai");
  case Polarity::ePolarity::Polarity_NARAMON:
    return U("Naramon");
  case Polarity::ePolarity::Polarity_ZENURIK:
    return U("Zenurik");
  case Polarity::ePolarity::Polarity_UNAIRU:
    return U("Unairu");
  case Polarity::ePolarity::Polarity_PENJAGA:
    return U("Penjaga");
  case Polarity::ePolarity::Polarity_UNBRA:
    return U("Unbra");
  default:
    break;
  }
  return {};
}
} // namespace

Polarity::Polarity() {}

Polarity::~Polarity() {}

void Polarity::validate() {
  // TODO: implement validation
}

web::json::value Polarity::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool Polarity::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void Polarity::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Polarity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

Polarity::ePolarity Polarity::getValue() const { return m_value; }

void Polarity::setValue(Polarity::ePolarity const value) { m_value = value; }

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
