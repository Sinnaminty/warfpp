/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/DarkSectors.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DarkSectors::DarkSectors() {}

DarkSectors::~DarkSectors() {}

void DarkSectors::validate() {
  // TODO: implement validation
}

web::json::value DarkSectors::toJson() const {

  web::json::value val = web::json::value::object();

  return val;
}

bool DarkSectors::fromJson(const web::json::value &val) {
  bool ok = true;

  return ok;
}

void DarkSectors::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
}

bool DarkSectors::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  return ok;
}

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
