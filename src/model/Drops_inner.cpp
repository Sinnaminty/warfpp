/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Drops_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Drops_inner::Drops_inner() {
  m_Item = utility::conversions::to_string_t("");
  m_ItemIsSet = false;
  m_Chance = 0.0f;
  m_ChanceIsSet = false;
  m_Place = utility::conversions::to_string_t("");
  m_PlaceIsSet = false;
  m_Rarity = utility::conversions::to_string_t("");
  m_RarityIsSet = false;
}

Drops_inner::~Drops_inner() {}

void Drops_inner::validate() {
  // TODO: implement validation
}

web::json::value Drops_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ItemIsSet) {
    val[utility::conversions::to_string_t(U("item"))] =
        ModelBase::toJson(m_Item);
  }
  if (m_ChanceIsSet) {
    val[utility::conversions::to_string_t(U("chance"))] =
        ModelBase::toJson(m_Chance);
  }
  if (m_PlaceIsSet) {
    val[utility::conversions::to_string_t(U("place"))] =
        ModelBase::toJson(m_Place);
  }
  if (m_RarityIsSet) {
    val[utility::conversions::to_string_t(U("rarity"))] =
        ModelBase::toJson(m_Rarity);
  }

  return val;
}

bool Drops_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("item")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("item")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setItem;
      ok &= ModelBase::fromJson(fieldValue, refVal_setItem);
      setItem(refVal_setItem);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("chance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("chance")));
    if (!fieldValue.is_null()) {
      float refVal_setChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setChance);
      setChance(refVal_setChance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("place")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("place")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPlace;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPlace);
      setPlace(refVal_setPlace);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rarity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rarity")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRarity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRarity);
      setRarity(refVal_setRarity);
    }
  }
  return ok;
}

void Drops_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ItemIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("item")), m_Item));
  }
  if (m_ChanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("chance")), m_Chance));
  }
  if (m_PlaceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("place")), m_Place));
  }
  if (m_RarityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rarity")), m_Rarity));
  }
}

bool Drops_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("item")))) {
    utility::string_t refVal_setItem;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("item"))),
        refVal_setItem);
    setItem(refVal_setItem);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("chance")))) {
    float refVal_setChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("chance"))),
        refVal_setChance);
    setChance(refVal_setChance);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("place")))) {
    utility::string_t refVal_setPlace;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("place"))),
        refVal_setPlace);
    setPlace(refVal_setPlace);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("rarity")))) {
    utility::string_t refVal_setRarity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("rarity"))),
        refVal_setRarity);
    setRarity(refVal_setRarity);
  }
  return ok;
}

utility::string_t Drops_inner::getItem() const { return m_Item; }

void Drops_inner::setItem(const utility::string_t &value) {
  m_Item = value;
  m_ItemIsSet = true;
}

bool Drops_inner::itemIsSet() const { return m_ItemIsSet; }

void Drops_inner::unsetItem() { m_ItemIsSet = false; }
float Drops_inner::getChance() const { return m_Chance; }

void Drops_inner::setChance(float value) {
  m_Chance = value;
  m_ChanceIsSet = true;
}

bool Drops_inner::chanceIsSet() const { return m_ChanceIsSet; }

void Drops_inner::unsetChance() { m_ChanceIsSet = false; }
utility::string_t Drops_inner::getPlace() const { return m_Place; }

void Drops_inner::setPlace(const utility::string_t &value) {
  m_Place = value;
  m_PlaceIsSet = true;
}

bool Drops_inner::placeIsSet() const { return m_PlaceIsSet; }

void Drops_inner::unsetPlace() { m_PlaceIsSet = false; }
utility::string_t Drops_inner::getRarity() const { return m_Rarity; }

void Drops_inner::setRarity(const utility::string_t &value) {
  m_Rarity = value;
  m_RarityIsSet = true;
}

bool Drops_inner::rarityIsSet() const { return m_RarityIsSet; }

void Drops_inner::unsetRarity() { m_RarityIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
