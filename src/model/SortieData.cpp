/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SortieData.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SortieData::SortieData() {
  m_ModifierTypesIsSet = false;
  m_ModifierDescriptionsIsSet = false;
  m_BossesIsSet = false;
  m_EndStatesIsSet = false;
  m_ModifiersIsSet = false;
}

SortieData::~SortieData() {}

void SortieData::validate() {
  // TODO: implement validation
}

web::json::value SortieData::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ModifierTypesIsSet) {
    val[utility::conversions::to_string_t(U("modifierTypes"))] =
        ModelBase::toJson(m_ModifierTypes);
  }
  if (m_ModifierDescriptionsIsSet) {
    val[utility::conversions::to_string_t(U("modifierDescriptions"))] =
        ModelBase::toJson(m_ModifierDescriptions);
  }
  if (m_BossesIsSet) {
    val[utility::conversions::to_string_t(U("bosses"))] =
        ModelBase::toJson(m_Bosses);
  }
  if (m_EndStatesIsSet) {
    val[utility::conversions::to_string_t(U("endStates"))] =
        ModelBase::toJson(m_EndStates);
  }
  if (m_ModifiersIsSet) {
    val[utility::conversions::to_string_t(U("modifiers"))] =
        ModelBase::toJson(m_Modifiers);
  }

  return val;
}

bool SortieData::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("modifierTypes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("modifierTypes")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_modifierTypes> refVal_setModifierTypes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setModifierTypes);
      setModifierTypes(refVal_setModifierTypes);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("modifierDescriptions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("modifierDescriptions")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_modifierTypes> refVal_setModifierDescriptions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setModifierDescriptions);
      setModifierDescriptions(refVal_setModifierDescriptions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("bosses")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bosses")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SortieData_bosses> refVal_setBosses;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBosses);
      setBosses(refVal_setBosses);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("endStates")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("endStates")));
    if (!fieldValue.is_null()) {
      std::set<std::shared_ptr<SortieData_endStates_inner>> refVal_setEndStates;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEndStates);
      setEndStates(refVal_setEndStates);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("modifiers")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("modifiers")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setModifiers;
      ok &= ModelBase::fromJson(fieldValue, refVal_setModifiers);
      setModifiers(refVal_setModifiers);
    }
  }
  return ok;
}

void SortieData::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ModifierTypesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("modifierTypes")),
        m_ModifierTypes));
  }
  if (m_ModifierDescriptionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("modifierDescriptions")),
        m_ModifierDescriptions));
  }
  if (m_BossesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bosses")), m_Bosses));
  }
  if (m_EndStatesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("endStates")),
        m_EndStates));
  }
  if (m_ModifiersIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("modifiers")),
        m_Modifiers));
  }
}

bool SortieData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("modifierTypes")))) {
    std::shared_ptr<SortieData_modifierTypes> refVal_setModifierTypes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("modifierTypes"))),
        refVal_setModifierTypes);
    setModifierTypes(refVal_setModifierTypes);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("modifierDescriptions")))) {
    std::shared_ptr<SortieData_modifierTypes> refVal_setModifierDescriptions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("modifierDescriptions"))),
        refVal_setModifierDescriptions);
    setModifierDescriptions(refVal_setModifierDescriptions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("bosses")))) {
    std::shared_ptr<SortieData_bosses> refVal_setBosses;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("bosses"))),
        refVal_setBosses);
    setBosses(refVal_setBosses);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("endStates")))) {
    std::set<std::shared_ptr<SortieData_endStates_inner>> refVal_setEndStates;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("endStates"))),
        refVal_setEndStates);
    setEndStates(refVal_setEndStates);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("modifiers")))) {
    std::vector<utility::string_t> refVal_setModifiers;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("modifiers"))),
        refVal_setModifiers);
    setModifiers(refVal_setModifiers);
  }
  return ok;
}

std::shared_ptr<SortieData_modifierTypes> SortieData::getModifierTypes() const {
  return m_ModifierTypes;
}

void SortieData::setModifierTypes(
    const std::shared_ptr<SortieData_modifierTypes> &value) {
  m_ModifierTypes = value;
  m_ModifierTypesIsSet = true;
}

bool SortieData::modifierTypesIsSet() const { return m_ModifierTypesIsSet; }

void SortieData::unsetModifierTypes() { m_ModifierTypesIsSet = false; }
std::shared_ptr<SortieData_modifierTypes>
SortieData::getModifierDescriptions() const {
  return m_ModifierDescriptions;
}

void SortieData::setModifierDescriptions(
    const std::shared_ptr<SortieData_modifierTypes> &value) {
  m_ModifierDescriptions = value;
  m_ModifierDescriptionsIsSet = true;
}

bool SortieData::modifierDescriptionsIsSet() const {
  return m_ModifierDescriptionsIsSet;
}

void SortieData::unsetModifierDescriptions() {
  m_ModifierDescriptionsIsSet = false;
}
std::shared_ptr<SortieData_bosses> SortieData::getBosses() const {
  return m_Bosses;
}

void SortieData::setBosses(const std::shared_ptr<SortieData_bosses> &value) {
  m_Bosses = value;
  m_BossesIsSet = true;
}

bool SortieData::bossesIsSet() const { return m_BossesIsSet; }

void SortieData::unsetBosses() { m_BossesIsSet = false; }
std::set<std::shared_ptr<SortieData_endStates_inner>> &
SortieData::getEndStates() {
  return m_EndStates;
}

void SortieData::setEndStates(
    const std::set<std::shared_ptr<SortieData_endStates_inner>> &value) {
  m_EndStates = value;
  m_EndStatesIsSet = true;
}

bool SortieData::endStatesIsSet() const { return m_EndStatesIsSet; }

void SortieData::unsetEndStates() { m_EndStatesIsSet = false; }
std::vector<utility::string_t> &SortieData::getModifiers() {
  return m_Modifiers;
}

void SortieData::setModifiers(const std::vector<utility::string_t> &value) {
  m_Modifiers = value;
  m_ModifiersIsSet = true;
}

bool SortieData::modifiersIsSet() const { return m_ModifiersIsSet; }

void SortieData::unsetModifiers() { m_ModifiersIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
