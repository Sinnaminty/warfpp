/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Syndicates.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Syndicates::Syndicates() {
  m_ArbitersSyndicateIsSet = false;
  m_CephalonSudaSyndicateIsSet = false;
  m_NewLokaSyndicateIsSet = false;
  m_PerrinSyndicateIsSet = false;
  m_SteelMeridianSyndicateIsSet = false;
  m_RedVeilSyndicateIsSet = false;
  m_CetusSyndicateIsSet = false;
  m_QuillsSyndicateIsSet = false;
  m_AssassinsSyndicateIsSet = false;
  m_EventSyndicateIsSet = false;
}

Syndicates::~Syndicates() {}

void Syndicates::validate() {
  // TODO: implement validation
}

web::json::value Syndicates::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ArbitersSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("ArbitersSyndicate"))] =
        ModelBase::toJson(m_ArbitersSyndicate);
  }
  if (m_CephalonSudaSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("CephalonSudaSyndicate"))] =
        ModelBase::toJson(m_CephalonSudaSyndicate);
  }
  if (m_NewLokaSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("NewLokaSyndicate"))] =
        ModelBase::toJson(m_NewLokaSyndicate);
  }
  if (m_PerrinSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("PerrinSyndicate"))] =
        ModelBase::toJson(m_PerrinSyndicate);
  }
  if (m_SteelMeridianSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("SteelMeridianSyndicate"))] =
        ModelBase::toJson(m_SteelMeridianSyndicate);
  }
  if (m_RedVeilSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("RedVeilSyndicate"))] =
        ModelBase::toJson(m_RedVeilSyndicate);
  }
  if (m_CetusSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("CetusSyndicate"))] =
        ModelBase::toJson(m_CetusSyndicate);
  }
  if (m_QuillsSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("QuillsSyndicate"))] =
        ModelBase::toJson(m_QuillsSyndicate);
  }
  if (m_AssassinsSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("AssassinsSyndicate"))] =
        ModelBase::toJson(m_AssassinsSyndicate);
  }
  if (m_EventSyndicateIsSet) {
    val[utility::conversions::to_string_t(U("EventSyndicate"))] =
        ModelBase::toJson(m_EventSyndicate);
  }

  return val;
}

bool Syndicates::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(
          utility::conversions::to_string_t(U("ArbitersSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("ArbitersSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setArbitersSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArbitersSyndicate);
      setArbitersSyndicate(refVal_setArbitersSyndicate);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("CephalonSudaSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("CephalonSudaSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate>
          refVal_setCephalonSudaSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCephalonSudaSyndicate);
      setCephalonSudaSyndicate(refVal_setCephalonSudaSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("NewLokaSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("NewLokaSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setNewLokaSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNewLokaSyndicate);
      setNewLokaSyndicate(refVal_setNewLokaSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("PerrinSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PerrinSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setPerrinSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPerrinSyndicate);
      setPerrinSyndicate(refVal_setPerrinSyndicate);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("SteelMeridianSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("SteelMeridianSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate>
          refVal_setSteelMeridianSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSteelMeridianSyndicate);
      setSteelMeridianSyndicate(refVal_setSteelMeridianSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("RedVeilSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("RedVeilSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setRedVeilSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRedVeilSyndicate);
      setRedVeilSyndicate(refVal_setRedVeilSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("CetusSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("CetusSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setCetusSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCetusSyndicate);
      setCetusSyndicate(refVal_setCetusSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("QuillsSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("QuillsSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setQuillsSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setQuillsSyndicate);
      setQuillsSyndicate(refVal_setQuillsSyndicate);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("AssassinsSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("AssassinsSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate>
          refVal_setAssassinsSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAssassinsSyndicate);
      setAssassinsSyndicate(refVal_setAssassinsSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("EventSyndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("EventSyndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setEventSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEventSyndicate);
      setEventSyndicate(refVal_setEventSyndicate);
    }
  }
  return ok;
}

void Syndicates::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ArbitersSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("ArbitersSyndicate")),
        m_ArbitersSyndicate));
  }
  if (m_CephalonSudaSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("CephalonSudaSyndicate")),
        m_CephalonSudaSyndicate));
  }
  if (m_NewLokaSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("NewLokaSyndicate")),
        m_NewLokaSyndicate));
  }
  if (m_PerrinSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("PerrinSyndicate")),
        m_PerrinSyndicate));
  }
  if (m_SteelMeridianSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("SteelMeridianSyndicate")),
        m_SteelMeridianSyndicate));
  }
  if (m_RedVeilSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("RedVeilSyndicate")),
        m_RedVeilSyndicate));
  }
  if (m_CetusSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("CetusSyndicate")),
        m_CetusSyndicate));
  }
  if (m_QuillsSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("QuillsSyndicate")),
        m_QuillsSyndicate));
  }
  if (m_AssassinsSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("AssassinsSyndicate")),
        m_AssassinsSyndicate));
  }
  if (m_EventSyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("EventSyndicate")),
        m_EventSyndicate));
  }
}

bool Syndicates::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("ArbitersSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setArbitersSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("ArbitersSyndicate"))),
        refVal_setArbitersSyndicate);
    setArbitersSyndicate(refVal_setArbitersSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("CephalonSudaSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate>
        refVal_setCephalonSudaSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("CephalonSudaSyndicate"))),
        refVal_setCephalonSudaSyndicate);
    setCephalonSudaSyndicate(refVal_setCephalonSudaSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("NewLokaSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setNewLokaSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("NewLokaSyndicate"))),
        refVal_setNewLokaSyndicate);
    setNewLokaSyndicate(refVal_setNewLokaSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PerrinSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setPerrinSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PerrinSyndicate"))),
        refVal_setPerrinSyndicate);
    setPerrinSyndicate(refVal_setPerrinSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("SteelMeridianSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate>
        refVal_setSteelMeridianSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("SteelMeridianSyndicate"))),
        refVal_setSteelMeridianSyndicate);
    setSteelMeridianSyndicate(refVal_setSteelMeridianSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("RedVeilSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setRedVeilSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("RedVeilSyndicate"))),
        refVal_setRedVeilSyndicate);
    setRedVeilSyndicate(refVal_setRedVeilSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("CetusSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setCetusSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("CetusSyndicate"))),
        refVal_setCetusSyndicate);
    setCetusSyndicate(refVal_setCetusSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("QuillsSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setQuillsSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("QuillsSyndicate"))),
        refVal_setQuillsSyndicate);
    setQuillsSyndicate(refVal_setQuillsSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("AssassinsSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setAssassinsSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("AssassinsSyndicate"))),
        refVal_setAssassinsSyndicate);
    setAssassinsSyndicate(refVal_setAssassinsSyndicate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("EventSyndicate")))) {
    std::shared_ptr<Syndicates_ArbitersSyndicate> refVal_setEventSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("EventSyndicate"))),
        refVal_setEventSyndicate);
    setEventSyndicate(refVal_setEventSyndicate);
  }
  return ok;
}

std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getArbitersSyndicate() const {
  return m_ArbitersSyndicate;
}

void Syndicates::setArbitersSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_ArbitersSyndicate = value;
  m_ArbitersSyndicateIsSet = true;
}

bool Syndicates::arbitersSyndicateIsSet() const {
  return m_ArbitersSyndicateIsSet;
}

void Syndicates::unsetArbitersSyndicate() { m_ArbitersSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getCephalonSudaSyndicate() const {
  return m_CephalonSudaSyndicate;
}

void Syndicates::setCephalonSudaSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_CephalonSudaSyndicate = value;
  m_CephalonSudaSyndicateIsSet = true;
}

bool Syndicates::cephalonSudaSyndicateIsSet() const {
  return m_CephalonSudaSyndicateIsSet;
}

void Syndicates::unsetCephalonSudaSyndicate() {
  m_CephalonSudaSyndicateIsSet = false;
}
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getNewLokaSyndicate() const {
  return m_NewLokaSyndicate;
}

void Syndicates::setNewLokaSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_NewLokaSyndicate = value;
  m_NewLokaSyndicateIsSet = true;
}

bool Syndicates::newLokaSyndicateIsSet() const {
  return m_NewLokaSyndicateIsSet;
}

void Syndicates::unsetNewLokaSyndicate() { m_NewLokaSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getPerrinSyndicate() const {
  return m_PerrinSyndicate;
}

void Syndicates::setPerrinSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_PerrinSyndicate = value;
  m_PerrinSyndicateIsSet = true;
}

bool Syndicates::perrinSyndicateIsSet() const { return m_PerrinSyndicateIsSet; }

void Syndicates::unsetPerrinSyndicate() { m_PerrinSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getSteelMeridianSyndicate() const {
  return m_SteelMeridianSyndicate;
}

void Syndicates::setSteelMeridianSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_SteelMeridianSyndicate = value;
  m_SteelMeridianSyndicateIsSet = true;
}

bool Syndicates::steelMeridianSyndicateIsSet() const {
  return m_SteelMeridianSyndicateIsSet;
}

void Syndicates::unsetSteelMeridianSyndicate() {
  m_SteelMeridianSyndicateIsSet = false;
}
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getRedVeilSyndicate() const {
  return m_RedVeilSyndicate;
}

void Syndicates::setRedVeilSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_RedVeilSyndicate = value;
  m_RedVeilSyndicateIsSet = true;
}

bool Syndicates::redVeilSyndicateIsSet() const {
  return m_RedVeilSyndicateIsSet;
}

void Syndicates::unsetRedVeilSyndicate() { m_RedVeilSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getCetusSyndicate() const {
  return m_CetusSyndicate;
}

void Syndicates::setCetusSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_CetusSyndicate = value;
  m_CetusSyndicateIsSet = true;
}

bool Syndicates::cetusSyndicateIsSet() const { return m_CetusSyndicateIsSet; }

void Syndicates::unsetCetusSyndicate() { m_CetusSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getQuillsSyndicate() const {
  return m_QuillsSyndicate;
}

void Syndicates::setQuillsSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_QuillsSyndicate = value;
  m_QuillsSyndicateIsSet = true;
}

bool Syndicates::quillsSyndicateIsSet() const { return m_QuillsSyndicateIsSet; }

void Syndicates::unsetQuillsSyndicate() { m_QuillsSyndicateIsSet = false; }
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getAssassinsSyndicate() const {
  return m_AssassinsSyndicate;
}

void Syndicates::setAssassinsSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_AssassinsSyndicate = value;
  m_AssassinsSyndicateIsSet = true;
}

bool Syndicates::assassinsSyndicateIsSet() const {
  return m_AssassinsSyndicateIsSet;
}

void Syndicates::unsetAssassinsSyndicate() {
  m_AssassinsSyndicateIsSet = false;
}
std::shared_ptr<Syndicates_ArbitersSyndicate>
Syndicates::getEventSyndicate() const {
  return m_EventSyndicate;
}

void Syndicates::setEventSyndicate(
    const std::shared_ptr<Syndicates_ArbitersSyndicate> &value) {
  m_EventSyndicate = value;
  m_EventSyndicateIsSet = true;
}

bool Syndicates::eventSyndicateIsSet() const { return m_EventSyndicateIsSet; }

void Syndicates::unsetEventSyndicate() { m_EventSyndicateIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
