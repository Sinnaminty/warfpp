/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/FissureTier.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

FissureTier::eFissureTier toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("Lith")))
    return FissureTier::eFissureTier::FissureTier_LITH;
  if (val == utility::conversions::to_string_t(U("Neo")))
    return FissureTier::eFissureTier::FissureTier_NEO;
  if (val == utility::conversions::to_string_t(U("Meso")))
    return FissureTier::eFissureTier::FissureTier_MESO;
  if (val == utility::conversions::to_string_t(U("Axi")))
    return FissureTier::eFissureTier::FissureTier_AXI;
  if (val == utility::conversions::to_string_t(U("Requiem")))
    return FissureTier::eFissureTier::FissureTier_REQUIEM;
  return {};
}

EnumUnderlyingType fromEnum(FissureTier::eFissureTier e) {
  switch (e) {
  case FissureTier::eFissureTier::FissureTier_LITH:
    return U("Lith");
  case FissureTier::eFissureTier::FissureTier_NEO:
    return U("Neo");
  case FissureTier::eFissureTier::FissureTier_MESO:
    return U("Meso");
  case FissureTier::eFissureTier::FissureTier_AXI:
    return U("Axi");
  case FissureTier::eFissureTier::FissureTier_REQUIEM:
    return U("Requiem");
  default:
    break;
  }
  return {};
}
} // namespace

FissureTier::FissureTier() {}

FissureTier::~FissureTier() {}

void FissureTier::validate() {
  // TODO: implement validation
}

web::json::value FissureTier::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool FissureTier::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void FissureTier::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool FissureTier::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

FissureTier::eFissureTier FissureTier::getValue() const { return m_value; }

void FissureTier::setValue(FissureTier::eFissureTier const value) {
  m_value = value;
}

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
