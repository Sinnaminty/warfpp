/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/News_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

News_inner::News_inner() {
  m_date = utility::conversions::to_string_t("");
  m_dateIsSet = false;
  m_ImageLink = utility::conversions::to_string_t("");
  m_ImageLinkIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_PrimeAccess = false;
  m_PrimeAccessIsSet = false;
  m_Stream = false;
  m_StreamIsSet = false;
  m_TranslationsIsSet = false;
  m_Link = utility::conversions::to_string_t("");
  m_LinkIsSet = false;
  m_Update = false;
  m_UpdateIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_AsString = utility::conversions::to_string_t("");
  m_AsStringIsSet = false;
  m_Message = utility::conversions::to_string_t("");
  m_MessageIsSet = false;
  m_Priority = false;
  m_PriorityIsSet = false;
}

News_inner::~News_inner() {}

void News_inner::validate() {
  // TODO: implement validation
}

web::json::value News_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_dateIsSet) {
    val[utility::conversions::to_string_t(U("date"))] =
        ModelBase::toJson(m_date);
  }
  if (m_ImageLinkIsSet) {
    val[utility::conversions::to_string_t(U("imageLink"))] =
        ModelBase::toJson(m_ImageLink);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_PrimeAccessIsSet) {
    val[utility::conversions::to_string_t(U("primeAccess"))] =
        ModelBase::toJson(m_PrimeAccess);
  }
  if (m_StreamIsSet) {
    val[utility::conversions::to_string_t(U("stream"))] =
        ModelBase::toJson(m_Stream);
  }
  if (m_TranslationsIsSet) {
    val[utility::conversions::to_string_t(U("translations"))] =
        ModelBase::toJson(m_Translations);
  }
  if (m_LinkIsSet) {
    val[utility::conversions::to_string_t(U("link"))] =
        ModelBase::toJson(m_Link);
  }
  if (m_UpdateIsSet) {
    val[utility::conversions::to_string_t(U("update"))] =
        ModelBase::toJson(m_Update);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_AsStringIsSet) {
    val[utility::conversions::to_string_t(U("asString"))] =
        ModelBase::toJson(m_AsString);
  }
  if (m_MessageIsSet) {
    val[utility::conversions::to_string_t(U("message"))] =
        ModelBase::toJson(m_Message);
  }
  if (m_PriorityIsSet) {
    val[utility::conversions::to_string_t(U("priority"))] =
        ModelBase::toJson(m_Priority);
  }

  return val;
}

bool News_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("date")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("date")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
      setDate(refVal_setDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("imageLink")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("imageLink")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setImageLink;
      ok &= ModelBase::fromJson(fieldValue, refVal_setImageLink);
      setImageLink(refVal_setImageLink);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("primeAccess")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("primeAccess")));
    if (!fieldValue.is_null()) {
      bool refVal_setPrimeAccess;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeAccess);
      setPrimeAccess(refVal_setPrimeAccess);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("stream")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("stream")));
    if (!fieldValue.is_null()) {
      bool refVal_setStream;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStream);
      setStream(refVal_setStream);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("translations")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("translations")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<News_inner_translations> refVal_setTranslations;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTranslations);
      setTranslations(refVal_setTranslations);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("link")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("link")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setLink;
      ok &= ModelBase::fromJson(fieldValue, refVal_setLink);
      setLink(refVal_setLink);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("update")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("update")));
    if (!fieldValue.is_null()) {
      bool refVal_setUpdate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUpdate);
      setUpdate(refVal_setUpdate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("asString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("asString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAsString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAsString);
      setAsString(refVal_setAsString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("message")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("message")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMessage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
      setMessage(refVal_setMessage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("priority")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("priority")));
    if (!fieldValue.is_null()) {
      bool refVal_setPriority;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
      setPriority(refVal_setPriority);
    }
  }
  return ok;
}

void News_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_dateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("date")), m_date));
  }
  if (m_ImageLinkIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("imageLink")),
        m_ImageLink));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_PrimeAccessIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("primeAccess")),
        m_PrimeAccess));
  }
  if (m_StreamIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("stream")), m_Stream));
  }
  if (m_TranslationsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("translations")),
        m_Translations));
  }
  if (m_LinkIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("link")), m_Link));
  }
  if (m_UpdateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("update")), m_Update));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_AsStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("asString")),
        m_AsString));
  }
  if (m_MessageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("message")),
        m_Message));
  }
  if (m_PriorityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("priority")),
        m_Priority));
  }
}

bool News_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("date")))) {
    utility::string_t refVal_setDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("date"))),
        refVal_setDate);
    setDate(refVal_setDate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("imageLink")))) {
    utility::string_t refVal_setImageLink;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("imageLink"))),
        refVal_setImageLink);
    setImageLink(refVal_setImageLink);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("primeAccess")))) {
    bool refVal_setPrimeAccess;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("primeAccess"))),
        refVal_setPrimeAccess);
    setPrimeAccess(refVal_setPrimeAccess);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("stream")))) {
    bool refVal_setStream;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("stream"))),
        refVal_setStream);
    setStream(refVal_setStream);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("translations")))) {
    std::shared_ptr<News_inner_translations> refVal_setTranslations;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("translations"))),
        refVal_setTranslations);
    setTranslations(refVal_setTranslations);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("link")))) {
    utility::string_t refVal_setLink;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("link"))),
        refVal_setLink);
    setLink(refVal_setLink);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("update")))) {
    bool refVal_setUpdate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("update"))),
        refVal_setUpdate);
    setUpdate(refVal_setUpdate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("asString")))) {
    utility::string_t refVal_setAsString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("asString"))),
        refVal_setAsString);
    setAsString(refVal_setAsString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("message")))) {
    utility::string_t refVal_setMessage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("message"))),
        refVal_setMessage);
    setMessage(refVal_setMessage);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("priority")))) {
    bool refVal_setPriority;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("priority"))),
        refVal_setPriority);
    setPriority(refVal_setPriority);
  }
  return ok;
}

utility::string_t News_inner::getDate() const { return m_date; }

void News_inner::setDate(const utility::string_t &value) {
  m_date = value;
  m_dateIsSet = true;
}

bool News_inner::dateIsSet() const { return m_dateIsSet; }

void News_inner::unsetdate() { m_dateIsSet = false; }
utility::string_t News_inner::getImageLink() const { return m_ImageLink; }

void News_inner::setImageLink(const utility::string_t &value) {
  m_ImageLink = value;
  m_ImageLinkIsSet = true;
}

bool News_inner::imageLinkIsSet() const { return m_ImageLinkIsSet; }

void News_inner::unsetImageLink() { m_ImageLinkIsSet = false; }
utility::string_t News_inner::getEta() const { return m_Eta; }

void News_inner::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool News_inner::etaIsSet() const { return m_EtaIsSet; }

void News_inner::unsetEta() { m_EtaIsSet = false; }
bool News_inner::isPrimeAccess() const { return m_PrimeAccess; }

void News_inner::setPrimeAccess(bool value) {
  m_PrimeAccess = value;
  m_PrimeAccessIsSet = true;
}

bool News_inner::primeAccessIsSet() const { return m_PrimeAccessIsSet; }

void News_inner::unsetPrimeAccess() { m_PrimeAccessIsSet = false; }
bool News_inner::isStream() const { return m_Stream; }

void News_inner::setStream(bool value) {
  m_Stream = value;
  m_StreamIsSet = true;
}

bool News_inner::streamIsSet() const { return m_StreamIsSet; }

void News_inner::unsetStream() { m_StreamIsSet = false; }
std::shared_ptr<News_inner_translations> News_inner::getTranslations() const {
  return m_Translations;
}

void News_inner::setTranslations(
    const std::shared_ptr<News_inner_translations> &value) {
  m_Translations = value;
  m_TranslationsIsSet = true;
}

bool News_inner::translationsIsSet() const { return m_TranslationsIsSet; }

void News_inner::unsetTranslations() { m_TranslationsIsSet = false; }
utility::string_t News_inner::getLink() const { return m_Link; }

void News_inner::setLink(const utility::string_t &value) {
  m_Link = value;
  m_LinkIsSet = true;
}

bool News_inner::linkIsSet() const { return m_LinkIsSet; }

void News_inner::unsetLink() { m_LinkIsSet = false; }
bool News_inner::isUpdate() const { return m_Update; }

void News_inner::setUpdate(bool value) {
  m_Update = value;
  m_UpdateIsSet = true;
}

bool News_inner::updateIsSet() const { return m_UpdateIsSet; }

void News_inner::unsetUpdate() { m_UpdateIsSet = false; }
utility::string_t News_inner::getId() const { return m_Id; }

void News_inner::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool News_inner::idIsSet() const { return m_IdIsSet; }

void News_inner::unsetId() { m_IdIsSet = false; }
utility::string_t News_inner::getAsString() const { return m_AsString; }

void News_inner::setAsString(const utility::string_t &value) {
  m_AsString = value;
  m_AsStringIsSet = true;
}

bool News_inner::asStringIsSet() const { return m_AsStringIsSet; }

void News_inner::unsetAsString() { m_AsStringIsSet = false; }
utility::string_t News_inner::getMessage() const { return m_Message; }

void News_inner::setMessage(const utility::string_t &value) {
  m_Message = value;
  m_MessageIsSet = true;
}

bool News_inner::messageIsSet() const { return m_MessageIsSet; }

void News_inner::unsetMessage() { m_MessageIsSet = false; }
bool News_inner::isPriority() const { return m_Priority; }

void News_inner::setPriority(bool value) {
  m_Priority = value;
  m_PriorityIsSet = true;
}

bool News_inner::priorityIsSet() const { return m_PriorityIsSet; }

void News_inner::unsetPriority() { m_PriorityIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
