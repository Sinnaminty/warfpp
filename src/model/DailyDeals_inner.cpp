/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/DailyDeals_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DailyDeals_inner::DailyDeals_inner() {
  m_Sold = 0.0;
  m_SoldIsSet = false;
  m_Item = utility::conversions::to_string_t("");
  m_ItemIsSet = false;
  m_UniqueName = utility::conversions::to_string_t("");
  m_UniqueNameIsSet = false;
  m_Total = 0.0;
  m_TotalIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_OriginalPrice = 0.0;
  m_OriginalPriceIsSet = false;
  m_SalePrice = 0.0;
  m_SalePriceIsSet = false;
  m_Discount = 0.0;
  m_DiscountIsSet = false;
  m_Expiry = utility::conversions::to_string_t("");
  m_ExpiryIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
}

DailyDeals_inner::~DailyDeals_inner() {}

void DailyDeals_inner::validate() {
  // TODO: implement validation
}

web::json::value DailyDeals_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_SoldIsSet) {
    val[utility::conversions::to_string_t(U("sold"))] =
        ModelBase::toJson(m_Sold);
  }
  if (m_ItemIsSet) {
    val[utility::conversions::to_string_t(U("item"))] =
        ModelBase::toJson(m_Item);
  }
  if (m_UniqueNameIsSet) {
    val[utility::conversions::to_string_t(U("uniqueName"))] =
        ModelBase::toJson(m_UniqueName);
  }
  if (m_TotalIsSet) {
    val[utility::conversions::to_string_t(U("total"))] =
        ModelBase::toJson(m_Total);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_OriginalPriceIsSet) {
    val[utility::conversions::to_string_t(U("originalPrice"))] =
        ModelBase::toJson(m_OriginalPrice);
  }
  if (m_SalePriceIsSet) {
    val[utility::conversions::to_string_t(U("salePrice"))] =
        ModelBase::toJson(m_SalePrice);
  }
  if (m_DiscountIsSet) {
    val[utility::conversions::to_string_t(U("discount"))] =
        ModelBase::toJson(m_Discount);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }

  return val;
}

bool DailyDeals_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("sold")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("sold")));
    if (!fieldValue.is_null()) {
      double refVal_setSold;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSold);
      setSold(refVal_setSold);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("item")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("item")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setItem;
      ok &= ModelBase::fromJson(fieldValue, refVal_setItem);
      setItem(refVal_setItem);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("uniqueName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("uniqueName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUniqueName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueName);
      setUniqueName(refVal_setUniqueName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("total")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("total")));
    if (!fieldValue.is_null()) {
      double refVal_setTotal;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
      setTotal(refVal_setTotal);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("originalPrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("originalPrice")));
    if (!fieldValue.is_null()) {
      double refVal_setOriginalPrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOriginalPrice);
      setOriginalPrice(refVal_setOriginalPrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("salePrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("salePrice")));
    if (!fieldValue.is_null()) {
      double refVal_setSalePrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSalePrice);
      setSalePrice(refVal_setSalePrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("discount")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("discount")));
    if (!fieldValue.is_null()) {
      double refVal_setDiscount;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDiscount);
      setDiscount(refVal_setDiscount);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  return ok;
}

void DailyDeals_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_SoldIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("sold")), m_Sold));
  }
  if (m_ItemIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("item")), m_Item));
  }
  if (m_UniqueNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("uniqueName")),
        m_UniqueName));
  }
  if (m_TotalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_OriginalPriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("originalPrice")),
        m_OriginalPrice));
  }
  if (m_SalePriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("salePrice")),
        m_SalePrice));
  }
  if (m_DiscountIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("discount")),
        m_Discount));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
}

bool DailyDeals_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("sold")))) {
    double refVal_setSold;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("sold"))),
        refVal_setSold);
    setSold(refVal_setSold);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("item")))) {
    utility::string_t refVal_setItem;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("item"))),
        refVal_setItem);
    setItem(refVal_setItem);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("uniqueName")))) {
    utility::string_t refVal_setUniqueName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("uniqueName"))),
        refVal_setUniqueName);
    setUniqueName(refVal_setUniqueName);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("total")))) {
    double refVal_setTotal;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("total"))),
        refVal_setTotal);
    setTotal(refVal_setTotal);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("originalPrice")))) {
    double refVal_setOriginalPrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("originalPrice"))),
        refVal_setOriginalPrice);
    setOriginalPrice(refVal_setOriginalPrice);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("salePrice")))) {
    double refVal_setSalePrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("salePrice"))),
        refVal_setSalePrice);
    setSalePrice(refVal_setSalePrice);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("discount")))) {
    double refVal_setDiscount;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("discount"))),
        refVal_setDiscount);
    setDiscount(refVal_setDiscount);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::string_t refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  return ok;
}

double DailyDeals_inner::getSold() const { return m_Sold; }

void DailyDeals_inner::setSold(double value) {
  m_Sold = value;
  m_SoldIsSet = true;
}

bool DailyDeals_inner::soldIsSet() const { return m_SoldIsSet; }

void DailyDeals_inner::unsetSold() { m_SoldIsSet = false; }
utility::string_t DailyDeals_inner::getItem() const { return m_Item; }

void DailyDeals_inner::setItem(const utility::string_t &value) {
  m_Item = value;
  m_ItemIsSet = true;
}

bool DailyDeals_inner::itemIsSet() const { return m_ItemIsSet; }

void DailyDeals_inner::unsetItem() { m_ItemIsSet = false; }
utility::string_t DailyDeals_inner::getUniqueName() const {
  return m_UniqueName;
}

void DailyDeals_inner::setUniqueName(const utility::string_t &value) {
  m_UniqueName = value;
  m_UniqueNameIsSet = true;
}

bool DailyDeals_inner::uniqueNameIsSet() const { return m_UniqueNameIsSet; }

void DailyDeals_inner::unsetUniqueName() { m_UniqueNameIsSet = false; }
double DailyDeals_inner::getTotal() const { return m_Total; }

void DailyDeals_inner::setTotal(double value) {
  m_Total = value;
  m_TotalIsSet = true;
}

bool DailyDeals_inner::totalIsSet() const { return m_TotalIsSet; }

void DailyDeals_inner::unsetTotal() { m_TotalIsSet = false; }
utility::string_t DailyDeals_inner::getEta() const { return m_Eta; }

void DailyDeals_inner::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool DailyDeals_inner::etaIsSet() const { return m_EtaIsSet; }

void DailyDeals_inner::unsetEta() { m_EtaIsSet = false; }
double DailyDeals_inner::getOriginalPrice() const { return m_OriginalPrice; }

void DailyDeals_inner::setOriginalPrice(double value) {
  m_OriginalPrice = value;
  m_OriginalPriceIsSet = true;
}

bool DailyDeals_inner::originalPriceIsSet() const {
  return m_OriginalPriceIsSet;
}

void DailyDeals_inner::unsetOriginalPrice() { m_OriginalPriceIsSet = false; }
double DailyDeals_inner::getSalePrice() const { return m_SalePrice; }

void DailyDeals_inner::setSalePrice(double value) {
  m_SalePrice = value;
  m_SalePriceIsSet = true;
}

bool DailyDeals_inner::salePriceIsSet() const { return m_SalePriceIsSet; }

void DailyDeals_inner::unsetSalePrice() { m_SalePriceIsSet = false; }
double DailyDeals_inner::getDiscount() const { return m_Discount; }

void DailyDeals_inner::setDiscount(double value) {
  m_Discount = value;
  m_DiscountIsSet = true;
}

bool DailyDeals_inner::discountIsSet() const { return m_DiscountIsSet; }

void DailyDeals_inner::unsetDiscount() { m_DiscountIsSet = false; }
utility::string_t DailyDeals_inner::getExpiry() const { return m_Expiry; }

void DailyDeals_inner::setExpiry(const utility::string_t &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool DailyDeals_inner::expiryIsSet() const { return m_ExpiryIsSet; }

void DailyDeals_inner::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t DailyDeals_inner::getId() const { return m_Id; }

void DailyDeals_inner::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool DailyDeals_inner::idIsSet() const { return m_IdIsSet; }

void DailyDeals_inner::unsetId() { m_IdIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
