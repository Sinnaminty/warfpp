/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Conclave_modes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Conclave_modes::Conclave_modes() {
  m_PVPMODE_ALLIsSet = false;
  m_PVPMODE_TEAMDEATHMATCHIsSet = false;
  m_PVPMODE_NONEIsSet = false;
  m_PVPMODE_CAPTURETHEFLAGIsSet = false;
  m_PVPMODE_SPEEDBALLIsSet = false;
  m_PVPMODE_DEATHMATCHIsSet = false;
}

Conclave_modes::~Conclave_modes() {}

void Conclave_modes::validate() {
  // TODO: implement validation
}

web::json::value Conclave_modes::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_PVPMODE_ALLIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_ALL"))] =
        ModelBase::toJson(m_PVPMODE_ALL);
  }
  if (m_PVPMODE_TEAMDEATHMATCHIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH"))] =
        ModelBase::toJson(m_PVPMODE_TEAMDEATHMATCH);
  }
  if (m_PVPMODE_NONEIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_NONE"))] =
        ModelBase::toJson(m_PVPMODE_NONE);
  }
  if (m_PVPMODE_CAPTURETHEFLAGIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG"))] =
        ModelBase::toJson(m_PVPMODE_CAPTURETHEFLAG);
  }
  if (m_PVPMODE_SPEEDBALLIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL"))] =
        ModelBase::toJson(m_PVPMODE_SPEEDBALL);
  }
  if (m_PVPMODE_DEATHMATCHIsSet) {
    val[utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH"))] =
        ModelBase::toJson(m_PVPMODE_DEATHMATCH);
  }

  return val;
}

bool Conclave_modes::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("PVPMODE_ALL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_ALL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODEALL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODEALL);
      setPVPMODEALL(refVal_setPVPMODEALL);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setPVPMODETEAMDEATHMATCH;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODETEAMDEATHMATCH);
      setPVPMODETEAMDEATHMATCH(refVal_setPVPMODETEAMDEATHMATCH);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("PVPMODE_NONE")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_NONE")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODENONE;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODENONE);
      setPVPMODENONE(refVal_setPVPMODENONE);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setPVPMODECAPTURETHEFLAG;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODECAPTURETHEFLAG);
      setPVPMODECAPTURETHEFLAG(refVal_setPVPMODECAPTURETHEFLAG);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODESPEEDBALL;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODESPEEDBALL);
      setPVPMODESPEEDBALL(refVal_setPVPMODESPEEDBALL);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODEDEATHMATCH;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPVPMODEDEATHMATCH);
      setPVPMODEDEATHMATCH(refVal_setPVPMODEDEATHMATCH);
    }
  }
  return ok;
}

void Conclave_modes::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_PVPMODE_ALLIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("PVPMODE_ALL")),
        m_PVPMODE_ALL));
  }
  if (m_PVPMODE_TEAMDEATHMATCHIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH")),
        m_PVPMODE_TEAMDEATHMATCH));
  }
  if (m_PVPMODE_NONEIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("PVPMODE_NONE")),
        m_PVPMODE_NONE));
  }
  if (m_PVPMODE_CAPTURETHEFLAGIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG")),
        m_PVPMODE_CAPTURETHEFLAG));
  }
  if (m_PVPMODE_SPEEDBALLIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL")),
        m_PVPMODE_SPEEDBALL));
  }
  if (m_PVPMODE_DEATHMATCHIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH")),
        m_PVPMODE_DEATHMATCH));
  }
}

bool Conclave_modes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_ALL")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODEALL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_ALL"))),
        refVal_setPVPMODEALL);
    setPVPMODEALL(refVal_setPVPMODEALL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODETEAMDEATHMATCH;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_TEAMDEATHMATCH"))),
        refVal_setPVPMODETEAMDEATHMATCH);
    setPVPMODETEAMDEATHMATCH(refVal_setPVPMODETEAMDEATHMATCH);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_NONE")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODENONE;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_NONE"))),
        refVal_setPVPMODENONE);
    setPVPMODENONE(refVal_setPVPMODENONE);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODECAPTURETHEFLAG;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_CAPTURETHEFLAG"))),
        refVal_setPVPMODECAPTURETHEFLAG);
    setPVPMODECAPTURETHEFLAG(refVal_setPVPMODECAPTURETHEFLAG);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODESPEEDBALL;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_SPEEDBALL"))),
        refVal_setPVPMODESPEEDBALL);
    setPVPMODESPEEDBALL(refVal_setPVPMODESPEEDBALL);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setPVPMODEDEATHMATCH;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("PVPMODE_DEATHMATCH"))),
        refVal_setPVPMODEDEATHMATCH);
    setPVPMODEDEATHMATCH(refVal_setPVPMODEDEATHMATCH);
  }
  return ok;
}

std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODEALL() const {
  return m_PVPMODE_ALL;
}

void Conclave_modes::setPVPMODEALL(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_ALL = value;
  m_PVPMODE_ALLIsSet = true;
}

bool Conclave_modes::pVPMODEALLIsSet() const { return m_PVPMODE_ALLIsSet; }

void Conclave_modes::unsetPVPMODE_ALL() { m_PVPMODE_ALLIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODETEAMDEATHMATCH() const {
  return m_PVPMODE_TEAMDEATHMATCH;
}

void Conclave_modes::setPVPMODETEAMDEATHMATCH(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_TEAMDEATHMATCH = value;
  m_PVPMODE_TEAMDEATHMATCHIsSet = true;
}

bool Conclave_modes::pVPMODETEAMDEATHMATCHIsSet() const {
  return m_PVPMODE_TEAMDEATHMATCHIsSet;
}

void Conclave_modes::unsetPVPMODE_TEAMDEATHMATCH() {
  m_PVPMODE_TEAMDEATHMATCHIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODENONE() const {
  return m_PVPMODE_NONE;
}

void Conclave_modes::setPVPMODENONE(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_NONE = value;
  m_PVPMODE_NONEIsSet = true;
}

bool Conclave_modes::pVPMODENONEIsSet() const { return m_PVPMODE_NONEIsSet; }

void Conclave_modes::unsetPVPMODE_NONE() { m_PVPMODE_NONEIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODECAPTURETHEFLAG() const {
  return m_PVPMODE_CAPTURETHEFLAG;
}

void Conclave_modes::setPVPMODECAPTURETHEFLAG(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_CAPTURETHEFLAG = value;
  m_PVPMODE_CAPTURETHEFLAGIsSet = true;
}

bool Conclave_modes::pVPMODECAPTURETHEFLAGIsSet() const {
  return m_PVPMODE_CAPTURETHEFLAGIsSet;
}

void Conclave_modes::unsetPVPMODE_CAPTURETHEFLAG() {
  m_PVPMODE_CAPTURETHEFLAGIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODESPEEDBALL() const {
  return m_PVPMODE_SPEEDBALL;
}

void Conclave_modes::setPVPMODESPEEDBALL(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_SPEEDBALL = value;
  m_PVPMODE_SPEEDBALLIsSet = true;
}

bool Conclave_modes::pVPMODESPEEDBALLIsSet() const {
  return m_PVPMODE_SPEEDBALLIsSet;
}

void Conclave_modes::unsetPVPMODE_SPEEDBALL() {
  m_PVPMODE_SPEEDBALLIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
Conclave_modes::getPVPMODEDEATHMATCH() const {
  return m_PVPMODE_DEATHMATCH;
}

void Conclave_modes::setPVPMODEDEATHMATCH(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_PVPMODE_DEATHMATCH = value;
  m_PVPMODE_DEATHMATCHIsSet = true;
}

bool Conclave_modes::pVPMODEDEATHMATCHIsSet() const {
  return m_PVPMODE_DEATHMATCHIsSet;
}

void Conclave_modes::unsetPVPMODE_DEATHMATCH() {
  m_PVPMODE_DEATHMATCHIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
