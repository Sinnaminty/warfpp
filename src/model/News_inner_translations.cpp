/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/News_inner_translations.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

News_inner_translations::News_inner_translations() {
  m_Es = utility::conversions::to_string_t("");
  m_EsIsSet = false;
}

News_inner_translations::~News_inner_translations() {}

void News_inner_translations::validate() {
  // TODO: implement validation
}

web::json::value News_inner_translations::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_EsIsSet) {
    val[utility::conversions::to_string_t(U("es"))] = ModelBase::toJson(m_Es);
  }

  return val;
}

bool News_inner_translations::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("es")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("es")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEs);
      setEs(refVal_setEs);
    }
  }
  return ok;
}

void News_inner_translations::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_EsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("es")), m_Es));
  }
}

bool News_inner_translations::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("es")))) {
    utility::string_t refVal_setEs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("es"))),
        refVal_setEs);
    setEs(refVal_setEs);
  }
  return ok;
}

utility::string_t News_inner_translations::getEs() const { return m_Es; }

void News_inner_translations::setEs(const utility::string_t &value) {
  m_Es = value;
  m_EsIsSet = true;
}

bool News_inner_translations::esIsSet() const { return m_EsIsSet; }

void News_inner_translations::unsetEs() { m_EsIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
