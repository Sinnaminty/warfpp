/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Event.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Event::Event() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_StartString = utility::conversions::to_string_t("");
  m_StartStringIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_MaximumScore = 0.0;
  m_MaximumScoreIsSet = false;
  m_CurrentScore = 0.0;
  m_CurrentScoreIsSet = false;
  m_SmallInterval = 0.0;
  m_SmallIntervalIsSet = false;
  m_LargeInterval = 0.0;
  m_LargeIntervalIsSet = false;
  m_FactionIsSet = false;
  m_Description = utility::conversions::to_string_t("");
  m_DescriptionIsSet = false;
  m_Tooltip = utility::conversions::to_string_t("");
  m_TooltipIsSet = false;
  m_Node = utility::conversions::to_string_t("");
  m_NodeIsSet = false;
  m_ConcurrentNodesIsSet = false;
  m_VictimNode = utility::conversions::to_string_t("");
  m_VictimNodeIsSet = false;
  m_ScoreLocTag = utility::conversions::to_string_t("");
  m_ScoreLocTagIsSet = false;
  m_RewardsIsSet = false;
  m_Health = 0.0;
  m_HealthIsSet = false;
  m_AffiliatedWithIsSet = false;
  m_JobsIsSet = false;
  m_InterimStepsIsSet = false;
  m_ProgressStepsIsSet = false;
  m_ProgressTotal = 0.0;
  m_ProgressTotalIsSet = false;
  m_ShowTotalAtEndOfMission = false;
  m_ShowTotalAtEndOfMissionIsSet = false;
  m_IsPersonal = false;
  m_IsPersonalIsSet = false;
  m_IsCommunity = false;
  m_IsCommunityIsSet = false;
  m_RegionDropsIsSet = false;
  m_ArchwingDropsIsSet = false;
  m_AsString = utility::conversions::to_string_t("");
  m_AsStringIsSet = false;
  m_MetadataIsSet = false;
  m_CompletionBonusesIsSet = false;
  m_ScoreVar = utility::conversions::to_string_t("");
  m_ScoreVarIsSet = false;
  m_AltExpiry = utility::datetime();
  m_AltExpiryIsSet = false;
  m_AltActivation = utility::datetime();
  m_AltActivationIsSet = false;
  m_NextAltIsSet = false;
}

Event::~Event() {}

void Event::validate() {
  // TODO: implement validation
}

web::json::value Event::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_StartStringIsSet) {
    val[utility::conversions::to_string_t(U("startString"))] =
        ModelBase::toJson(m_StartString);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_MaximumScoreIsSet) {
    val[utility::conversions::to_string_t(U("maximumScore"))] =
        ModelBase::toJson(m_MaximumScore);
  }
  if (m_CurrentScoreIsSet) {
    val[utility::conversions::to_string_t(U("currentScore"))] =
        ModelBase::toJson(m_CurrentScore);
  }
  if (m_SmallIntervalIsSet) {
    val[utility::conversions::to_string_t(U("smallInterval"))] =
        ModelBase::toJson(m_SmallInterval);
  }
  if (m_LargeIntervalIsSet) {
    val[utility::conversions::to_string_t(U("largeInterval"))] =
        ModelBase::toJson(m_LargeInterval);
  }
  if (m_FactionIsSet) {
    val[utility::conversions::to_string_t(U("faction"))] =
        ModelBase::toJson(m_Faction);
  }
  if (m_DescriptionIsSet) {
    val[utility::conversions::to_string_t(U("description"))] =
        ModelBase::toJson(m_Description);
  }
  if (m_TooltipIsSet) {
    val[utility::conversions::to_string_t(U("tooltip"))] =
        ModelBase::toJson(m_Tooltip);
  }
  if (m_NodeIsSet) {
    val[utility::conversions::to_string_t(U("node"))] =
        ModelBase::toJson(m_Node);
  }
  if (m_ConcurrentNodesIsSet) {
    val[utility::conversions::to_string_t(U("concurrentNodes"))] =
        ModelBase::toJson(m_ConcurrentNodes);
  }
  if (m_VictimNodeIsSet) {
    val[utility::conversions::to_string_t(U("victimNode"))] =
        ModelBase::toJson(m_VictimNode);
  }
  if (m_ScoreLocTagIsSet) {
    val[utility::conversions::to_string_t(U("scoreLocTag"))] =
        ModelBase::toJson(m_ScoreLocTag);
  }
  if (m_RewardsIsSet) {
    val[utility::conversions::to_string_t(U("rewards"))] =
        ModelBase::toJson(m_Rewards);
  }
  if (m_HealthIsSet) {
    val[utility::conversions::to_string_t(U("health"))] =
        ModelBase::toJson(m_Health);
  }
  if (m_AffiliatedWithIsSet) {
    val[utility::conversions::to_string_t(U("affiliatedWith"))] =
        ModelBase::toJson(m_AffiliatedWith);
  }
  if (m_JobsIsSet) {
    val[utility::conversions::to_string_t(U("jobs"))] =
        ModelBase::toJson(m_Jobs);
  }
  if (m_InterimStepsIsSet) {
    val[utility::conversions::to_string_t(U("interimSteps"))] =
        ModelBase::toJson(m_InterimSteps);
  }
  if (m_ProgressStepsIsSet) {
    val[utility::conversions::to_string_t(U("progressSteps"))] =
        ModelBase::toJson(m_ProgressSteps);
  }
  if (m_ProgressTotalIsSet) {
    val[utility::conversions::to_string_t(U("progressTotal"))] =
        ModelBase::toJson(m_ProgressTotal);
  }
  if (m_ShowTotalAtEndOfMissionIsSet) {
    val[utility::conversions::to_string_t(U("showTotalAtEndOfMission"))] =
        ModelBase::toJson(m_ShowTotalAtEndOfMission);
  }
  if (m_IsPersonalIsSet) {
    val[utility::conversions::to_string_t(U("isPersonal"))] =
        ModelBase::toJson(m_IsPersonal);
  }
  if (m_IsCommunityIsSet) {
    val[utility::conversions::to_string_t(U("isCommunity"))] =
        ModelBase::toJson(m_IsCommunity);
  }
  if (m_RegionDropsIsSet) {
    val[utility::conversions::to_string_t(U("regionDrops"))] =
        ModelBase::toJson(m_RegionDrops);
  }
  if (m_ArchwingDropsIsSet) {
    val[utility::conversions::to_string_t(U("archwingDrops"))] =
        ModelBase::toJson(m_ArchwingDrops);
  }
  if (m_AsStringIsSet) {
    val[utility::conversions::to_string_t(U("asString"))] =
        ModelBase::toJson(m_AsString);
  }
  if (m_MetadataIsSet) {
    val[utility::conversions::to_string_t(U("metadata"))] =
        ModelBase::toJson(m_Metadata);
  }
  if (m_CompletionBonusesIsSet) {
    val[utility::conversions::to_string_t(U("completionBonuses"))] =
        ModelBase::toJson(m_CompletionBonuses);
  }
  if (m_ScoreVarIsSet) {
    val[utility::conversions::to_string_t(U("scoreVar"))] =
        ModelBase::toJson(m_ScoreVar);
  }
  if (m_AltExpiryIsSet) {
    val[utility::conversions::to_string_t(U("altExpiry"))] =
        ModelBase::toJson(m_AltExpiry);
  }
  if (m_AltActivationIsSet) {
    val[utility::conversions::to_string_t(U("altActivation"))] =
        ModelBase::toJson(m_AltActivation);
  }
  if (m_NextAltIsSet) {
    val[utility::conversions::to_string_t(U("nextAlt"))] =
        ModelBase::toJson(m_NextAlt);
  }

  return val;
}

bool Event::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("startString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("startString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStartString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStartString);
      setStartString(refVal_setStartString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("maximumScore")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("maximumScore")));
    if (!fieldValue.is_null()) {
      double refVal_setMaximumScore;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumScore);
      setMaximumScore(refVal_setMaximumScore);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("currentScore")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("currentScore")));
    if (!fieldValue.is_null()) {
      double refVal_setCurrentScore;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentScore);
      setCurrentScore(refVal_setCurrentScore);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("smallInterval")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("smallInterval")));
    if (!fieldValue.is_null()) {
      double refVal_setSmallInterval;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSmallInterval);
      setSmallInterval(refVal_setSmallInterval);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("largeInterval")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("largeInterval")));
    if (!fieldValue.is_null()) {
      double refVal_setLargeInterval;
      ok &= ModelBase::fromJson(fieldValue, refVal_setLargeInterval);
      setLargeInterval(refVal_setLargeInterval);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("faction")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("faction")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Faction> refVal_setFaction;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFaction);
      setFaction(refVal_setFaction);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("description")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("description")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
      setDescription(refVal_setDescription);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tooltip")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tooltip")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTooltip;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTooltip);
      setTooltip(refVal_setTooltip);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("node")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("node")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
      setNode(refVal_setNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("concurrentNodes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("concurrentNodes")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setConcurrentNodes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConcurrentNodes);
      setConcurrentNodes(refVal_setConcurrentNodes);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("victimNode")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("victimNode")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setVictimNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVictimNode);
      setVictimNode(refVal_setVictimNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("scoreLocTag")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("scoreLocTag")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setScoreLocTag;
      ok &= ModelBase::fromJson(fieldValue, refVal_setScoreLocTag);
      setScoreLocTag(refVal_setScoreLocTag);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rewards")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rewards")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Reward>> refVal_setRewards;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRewards);
      setRewards(refVal_setRewards);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("health")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("health")));
    if (!fieldValue.is_null()) {
      double refVal_setHealth;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHealth);
      setHealth(refVal_setHealth);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("affiliatedWith")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("affiliatedWith")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicate> refVal_setAffiliatedWith;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAffiliatedWith);
      setAffiliatedWith(refVal_setAffiliatedWith);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("jobs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("jobs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<SyndicateJob>> refVal_setJobs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setJobs);
      setJobs(refVal_setJobs);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("interimSteps")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("interimSteps")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Event_allOf_interimSteps>>
          refVal_setInterimSteps;
      ok &= ModelBase::fromJson(fieldValue, refVal_setInterimSteps);
      setInterimSteps(refVal_setInterimSteps);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("progressSteps")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("progressSteps")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Event_allOf_progressSteps>>
          refVal_setProgressSteps;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProgressSteps);
      setProgressSteps(refVal_setProgressSteps);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("progressTotal")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("progressTotal")));
    if (!fieldValue.is_null()) {
      double refVal_setProgressTotal;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProgressTotal);
      setProgressTotal(refVal_setProgressTotal);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("showTotalAtEndOfMission")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("showTotalAtEndOfMission")));
    if (!fieldValue.is_null()) {
      bool refVal_setShowTotalAtEndOfMission;
      ok &= ModelBase::fromJson(fieldValue, refVal_setShowTotalAtEndOfMission);
      setShowTotalAtEndOfMission(refVal_setShowTotalAtEndOfMission);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isPersonal")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isPersonal")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsPersonal;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsPersonal);
      setIsPersonal(refVal_setIsPersonal);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isCommunity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isCommunity")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsCommunity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsCommunity);
      setIsCommunity(refVal_setIsCommunity);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("regionDrops")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("regionDrops")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setRegionDrops;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRegionDrops);
      setRegionDrops(refVal_setRegionDrops);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("archwingDrops")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("archwingDrops")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setArchwingDrops;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArchwingDrops);
      setArchwingDrops(refVal_setArchwingDrops);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("asString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("asString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAsString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAsString);
      setAsString(refVal_setAsString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("metadata")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("metadata")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Object> refVal_setMetadata;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
      setMetadata(refVal_setMetadata);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("completionBonuses")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("completionBonuses")));
    if (!fieldValue.is_null()) {
      std::vector<double> refVal_setCompletionBonuses;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCompletionBonuses);
      setCompletionBonuses(refVal_setCompletionBonuses);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("scoreVar")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("scoreVar")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setScoreVar;
      ok &= ModelBase::fromJson(fieldValue, refVal_setScoreVar);
      setScoreVar(refVal_setScoreVar);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("altExpiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("altExpiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setAltExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAltExpiry);
      setAltExpiry(refVal_setAltExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("altActivation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("altActivation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setAltActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAltActivation);
      setAltActivation(refVal_setAltActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("nextAlt")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("nextAlt")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Event_allOf_nextAlt> refVal_setNextAlt;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNextAlt);
      setNextAlt(refVal_setNextAlt);
    }
  }
  return ok;
}

void Event::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                        const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_StartStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("startString")),
        m_StartString));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_MaximumScoreIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("maximumScore")),
        m_MaximumScore));
  }
  if (m_CurrentScoreIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("currentScore")),
        m_CurrentScore));
  }
  if (m_SmallIntervalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("smallInterval")),
        m_SmallInterval));
  }
  if (m_LargeIntervalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("largeInterval")),
        m_LargeInterval));
  }
  if (m_FactionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("faction")),
        m_Faction));
  }
  if (m_DescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("description")),
        m_Description));
  }
  if (m_TooltipIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tooltip")),
        m_Tooltip));
  }
  if (m_NodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
  }
  if (m_ConcurrentNodesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("concurrentNodes")),
        m_ConcurrentNodes));
  }
  if (m_VictimNodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("victimNode")),
        m_VictimNode));
  }
  if (m_ScoreLocTagIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("scoreLocTag")),
        m_ScoreLocTag));
  }
  if (m_RewardsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rewards")),
        m_Rewards));
  }
  if (m_HealthIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("health")), m_Health));
  }
  if (m_AffiliatedWithIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("affiliatedWith")),
        m_AffiliatedWith));
  }
  if (m_JobsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("jobs")), m_Jobs));
  }
  if (m_InterimStepsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("interimSteps")),
        m_InterimSteps));
  }
  if (m_ProgressStepsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("progressSteps")),
        m_ProgressSteps));
  }
  if (m_ProgressTotalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("progressTotal")),
        m_ProgressTotal));
  }
  if (m_ShowTotalAtEndOfMissionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("showTotalAtEndOfMission")),
        m_ShowTotalAtEndOfMission));
  }
  if (m_IsPersonalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isPersonal")),
        m_IsPersonal));
  }
  if (m_IsCommunityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isCommunity")),
        m_IsCommunity));
  }
  if (m_RegionDropsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("regionDrops")),
        m_RegionDrops));
  }
  if (m_ArchwingDropsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("archwingDrops")),
        m_ArchwingDrops));
  }
  if (m_AsStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("asString")),
        m_AsString));
  }
  if (m_MetadataIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("metadata")),
        m_Metadata));
  }
  if (m_CompletionBonusesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("completionBonuses")),
        m_CompletionBonuses));
  }
  if (m_ScoreVarIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("scoreVar")),
        m_ScoreVar));
  }
  if (m_AltExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("altExpiry")),
        m_AltExpiry));
  }
  if (m_AltActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("altActivation")),
        m_AltActivation));
  }
  if (m_NextAltIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("nextAlt")),
        m_NextAlt));
  }
}

bool Event::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                          const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("startString")))) {
    utility::string_t refVal_setStartString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("startString"))),
        refVal_setStartString);
    setStartString(refVal_setStartString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("maximumScore")))) {
    double refVal_setMaximumScore;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("maximumScore"))),
        refVal_setMaximumScore);
    setMaximumScore(refVal_setMaximumScore);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("currentScore")))) {
    double refVal_setCurrentScore;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("currentScore"))),
        refVal_setCurrentScore);
    setCurrentScore(refVal_setCurrentScore);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("smallInterval")))) {
    double refVal_setSmallInterval;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("smallInterval"))),
        refVal_setSmallInterval);
    setSmallInterval(refVal_setSmallInterval);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("largeInterval")))) {
    double refVal_setLargeInterval;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("largeInterval"))),
        refVal_setLargeInterval);
    setLargeInterval(refVal_setLargeInterval);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("faction")))) {
    std::shared_ptr<Faction> refVal_setFaction;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("faction"))),
        refVal_setFaction);
    setFaction(refVal_setFaction);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("description")))) {
    utility::string_t refVal_setDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("description"))),
        refVal_setDescription);
    setDescription(refVal_setDescription);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tooltip")))) {
    utility::string_t refVal_setTooltip;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tooltip"))),
        refVal_setTooltip);
    setTooltip(refVal_setTooltip);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("node")))) {
    utility::string_t refVal_setNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("node"))),
        refVal_setNode);
    setNode(refVal_setNode);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("concurrentNodes")))) {
    std::vector<utility::string_t> refVal_setConcurrentNodes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("concurrentNodes"))),
        refVal_setConcurrentNodes);
    setConcurrentNodes(refVal_setConcurrentNodes);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("victimNode")))) {
    utility::string_t refVal_setVictimNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("victimNode"))),
        refVal_setVictimNode);
    setVictimNode(refVal_setVictimNode);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("scoreLocTag")))) {
    utility::string_t refVal_setScoreLocTag;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("scoreLocTag"))),
        refVal_setScoreLocTag);
    setScoreLocTag(refVal_setScoreLocTag);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("rewards")))) {
    std::vector<std::shared_ptr<Reward>> refVal_setRewards;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("rewards"))),
        refVal_setRewards);
    setRewards(refVal_setRewards);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("health")))) {
    double refVal_setHealth;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("health"))),
        refVal_setHealth);
    setHealth(refVal_setHealth);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("affiliatedWith")))) {
    std::shared_ptr<Syndicate> refVal_setAffiliatedWith;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("affiliatedWith"))),
        refVal_setAffiliatedWith);
    setAffiliatedWith(refVal_setAffiliatedWith);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("jobs")))) {
    std::vector<std::shared_ptr<SyndicateJob>> refVal_setJobs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("jobs"))),
        refVal_setJobs);
    setJobs(refVal_setJobs);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("interimSteps")))) {
    std::vector<std::shared_ptr<Event_allOf_interimSteps>>
        refVal_setInterimSteps;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("interimSteps"))),
        refVal_setInterimSteps);
    setInterimSteps(refVal_setInterimSteps);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("progressSteps")))) {
    std::vector<std::shared_ptr<Event_allOf_progressSteps>>
        refVal_setProgressSteps;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("progressSteps"))),
        refVal_setProgressSteps);
    setProgressSteps(refVal_setProgressSteps);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("progressTotal")))) {
    double refVal_setProgressTotal;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("progressTotal"))),
        refVal_setProgressTotal);
    setProgressTotal(refVal_setProgressTotal);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("showTotalAtEndOfMission")))) {
    bool refVal_setShowTotalAtEndOfMission;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("showTotalAtEndOfMission"))),
        refVal_setShowTotalAtEndOfMission);
    setShowTotalAtEndOfMission(refVal_setShowTotalAtEndOfMission);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("isPersonal")))) {
    bool refVal_setIsPersonal;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("isPersonal"))),
        refVal_setIsPersonal);
    setIsPersonal(refVal_setIsPersonal);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("isCommunity")))) {
    bool refVal_setIsCommunity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("isCommunity"))),
        refVal_setIsCommunity);
    setIsCommunity(refVal_setIsCommunity);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("regionDrops")))) {
    std::vector<utility::string_t> refVal_setRegionDrops;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("regionDrops"))),
        refVal_setRegionDrops);
    setRegionDrops(refVal_setRegionDrops);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("archwingDrops")))) {
    std::vector<utility::string_t> refVal_setArchwingDrops;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("archwingDrops"))),
        refVal_setArchwingDrops);
    setArchwingDrops(refVal_setArchwingDrops);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("asString")))) {
    utility::string_t refVal_setAsString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("asString"))),
        refVal_setAsString);
    setAsString(refVal_setAsString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("metadata")))) {
    std::shared_ptr<Object> refVal_setMetadata;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("metadata"))),
        refVal_setMetadata);
    setMetadata(refVal_setMetadata);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("completionBonuses")))) {
    std::vector<double> refVal_setCompletionBonuses;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("completionBonuses"))),
        refVal_setCompletionBonuses);
    setCompletionBonuses(refVal_setCompletionBonuses);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("scoreVar")))) {
    utility::string_t refVal_setScoreVar;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("scoreVar"))),
        refVal_setScoreVar);
    setScoreVar(refVal_setScoreVar);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("altExpiry")))) {
    utility::datetime refVal_setAltExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("altExpiry"))),
        refVal_setAltExpiry);
    setAltExpiry(refVal_setAltExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("altActivation")))) {
    utility::datetime refVal_setAltActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("altActivation"))),
        refVal_setAltActivation);
    setAltActivation(refVal_setAltActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("nextAlt")))) {
    std::shared_ptr<Event_allOf_nextAlt> refVal_setNextAlt;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("nextAlt"))),
        refVal_setNextAlt);
    setNextAlt(refVal_setNextAlt);
  }
  return ok;
}

utility::string_t Event::getId() const { return m_Id; }

void Event::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool Event::idIsSet() const { return m_IdIsSet; }

void Event::unsetId() { m_IdIsSet = false; }
utility::datetime Event::getActivation() const { return m_Activation; }

void Event::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool Event::activationIsSet() const { return m_ActivationIsSet; }

void Event::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime Event::getExpiry() const { return m_Expiry; }

void Event::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool Event::expiryIsSet() const { return m_ExpiryIsSet; }

void Event::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t Event::getStartString() const { return m_StartString; }

void Event::setStartString(const utility::string_t &value) {
  m_StartString = value;
  m_StartStringIsSet = true;
}

bool Event::startStringIsSet() const { return m_StartStringIsSet; }

void Event::unsetStartString() { m_StartStringIsSet = false; }
bool Event::isActive() const { return m_Active; }

void Event::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool Event::activeIsSet() const { return m_ActiveIsSet; }

void Event::unsetActive() { m_ActiveIsSet = false; }
double Event::getMaximumScore() const { return m_MaximumScore; }

void Event::setMaximumScore(double value) {
  m_MaximumScore = value;
  m_MaximumScoreIsSet = true;
}

bool Event::maximumScoreIsSet() const { return m_MaximumScoreIsSet; }

void Event::unsetMaximumScore() { m_MaximumScoreIsSet = false; }
double Event::getCurrentScore() const { return m_CurrentScore; }

void Event::setCurrentScore(double value) {
  m_CurrentScore = value;
  m_CurrentScoreIsSet = true;
}

bool Event::currentScoreIsSet() const { return m_CurrentScoreIsSet; }

void Event::unsetCurrentScore() { m_CurrentScoreIsSet = false; }
double Event::getSmallInterval() const { return m_SmallInterval; }

void Event::setSmallInterval(double value) {
  m_SmallInterval = value;
  m_SmallIntervalIsSet = true;
}

bool Event::smallIntervalIsSet() const { return m_SmallIntervalIsSet; }

void Event::unsetSmallInterval() { m_SmallIntervalIsSet = false; }
double Event::getLargeInterval() const { return m_LargeInterval; }

void Event::setLargeInterval(double value) {
  m_LargeInterval = value;
  m_LargeIntervalIsSet = true;
}

bool Event::largeIntervalIsSet() const { return m_LargeIntervalIsSet; }

void Event::unsetLargeInterval() { m_LargeIntervalIsSet = false; }
std::shared_ptr<Faction> Event::getFaction() const { return m_Faction; }

void Event::setFaction(const std::shared_ptr<Faction> &value) {
  m_Faction = value;
  m_FactionIsSet = true;
}

bool Event::factionIsSet() const { return m_FactionIsSet; }

void Event::unsetFaction() { m_FactionIsSet = false; }
utility::string_t Event::getDescription() const { return m_Description; }

void Event::setDescription(const utility::string_t &value) {
  m_Description = value;
  m_DescriptionIsSet = true;
}

bool Event::descriptionIsSet() const { return m_DescriptionIsSet; }

void Event::unsetDescription() { m_DescriptionIsSet = false; }
utility::string_t Event::getTooltip() const { return m_Tooltip; }

void Event::setTooltip(const utility::string_t &value) {
  m_Tooltip = value;
  m_TooltipIsSet = true;
}

bool Event::tooltipIsSet() const { return m_TooltipIsSet; }

void Event::unsetTooltip() { m_TooltipIsSet = false; }
utility::string_t Event::getNode() const { return m_Node; }

void Event::setNode(const utility::string_t &value) {
  m_Node = value;
  m_NodeIsSet = true;
}

bool Event::nodeIsSet() const { return m_NodeIsSet; }

void Event::unsetNode() { m_NodeIsSet = false; }
std::vector<utility::string_t> &Event::getConcurrentNodes() {
  return m_ConcurrentNodes;
}

void Event::setConcurrentNodes(const std::vector<utility::string_t> &value) {
  m_ConcurrentNodes = value;
  m_ConcurrentNodesIsSet = true;
}

bool Event::concurrentNodesIsSet() const { return m_ConcurrentNodesIsSet; }

void Event::unsetConcurrentNodes() { m_ConcurrentNodesIsSet = false; }
utility::string_t Event::getVictimNode() const { return m_VictimNode; }

void Event::setVictimNode(const utility::string_t &value) {
  m_VictimNode = value;
  m_VictimNodeIsSet = true;
}

bool Event::victimNodeIsSet() const { return m_VictimNodeIsSet; }

void Event::unsetVictimNode() { m_VictimNodeIsSet = false; }
utility::string_t Event::getScoreLocTag() const { return m_ScoreLocTag; }

void Event::setScoreLocTag(const utility::string_t &value) {
  m_ScoreLocTag = value;
  m_ScoreLocTagIsSet = true;
}

bool Event::scoreLocTagIsSet() const { return m_ScoreLocTagIsSet; }

void Event::unsetScoreLocTag() { m_ScoreLocTagIsSet = false; }
std::vector<std::shared_ptr<Reward>> &Event::getRewards() { return m_Rewards; }

void Event::setRewards(const std::vector<std::shared_ptr<Reward>> &value) {
  m_Rewards = value;
  m_RewardsIsSet = true;
}

bool Event::rewardsIsSet() const { return m_RewardsIsSet; }

void Event::unsetRewards() { m_RewardsIsSet = false; }
double Event::getHealth() const { return m_Health; }

void Event::setHealth(double value) {
  m_Health = value;
  m_HealthIsSet = true;
}

bool Event::healthIsSet() const { return m_HealthIsSet; }

void Event::unsetHealth() { m_HealthIsSet = false; }
std::shared_ptr<Syndicate> Event::getAffiliatedWith() const {
  return m_AffiliatedWith;
}

void Event::setAffiliatedWith(const std::shared_ptr<Syndicate> &value) {
  m_AffiliatedWith = value;
  m_AffiliatedWithIsSet = true;
}

bool Event::affiliatedWithIsSet() const { return m_AffiliatedWithIsSet; }

void Event::unsetAffiliatedWith() { m_AffiliatedWithIsSet = false; }
std::vector<std::shared_ptr<SyndicateJob>> &Event::getJobs() { return m_Jobs; }

void Event::setJobs(const std::vector<std::shared_ptr<SyndicateJob>> &value) {
  m_Jobs = value;
  m_JobsIsSet = true;
}

bool Event::jobsIsSet() const { return m_JobsIsSet; }

void Event::unsetJobs() { m_JobsIsSet = false; }
std::vector<std::shared_ptr<Event_allOf_interimSteps>> &
Event::getInterimSteps() {
  return m_InterimSteps;
}

void Event::setInterimSteps(
    const std::vector<std::shared_ptr<Event_allOf_interimSteps>> &value) {
  m_InterimSteps = value;
  m_InterimStepsIsSet = true;
}

bool Event::interimStepsIsSet() const { return m_InterimStepsIsSet; }

void Event::unsetInterimSteps() { m_InterimStepsIsSet = false; }
std::vector<std::shared_ptr<Event_allOf_progressSteps>> &
Event::getProgressSteps() {
  return m_ProgressSteps;
}

void Event::setProgressSteps(
    const std::vector<std::shared_ptr<Event_allOf_progressSteps>> &value) {
  m_ProgressSteps = value;
  m_ProgressStepsIsSet = true;
}

bool Event::progressStepsIsSet() const { return m_ProgressStepsIsSet; }

void Event::unsetProgressSteps() { m_ProgressStepsIsSet = false; }
double Event::getProgressTotal() const { return m_ProgressTotal; }

void Event::setProgressTotal(double value) {
  m_ProgressTotal = value;
  m_ProgressTotalIsSet = true;
}

bool Event::progressTotalIsSet() const { return m_ProgressTotalIsSet; }

void Event::unsetProgressTotal() { m_ProgressTotalIsSet = false; }
bool Event::isShowTotalAtEndOfMission() const {
  return m_ShowTotalAtEndOfMission;
}

void Event::setShowTotalAtEndOfMission(bool value) {
  m_ShowTotalAtEndOfMission = value;
  m_ShowTotalAtEndOfMissionIsSet = true;
}

bool Event::showTotalAtEndOfMissionIsSet() const {
  return m_ShowTotalAtEndOfMissionIsSet;
}

void Event::unsetShowTotalAtEndOfMission() {
  m_ShowTotalAtEndOfMissionIsSet = false;
}
bool Event::isIsPersonal() const { return m_IsPersonal; }

void Event::setIsPersonal(bool value) {
  m_IsPersonal = value;
  m_IsPersonalIsSet = true;
}

bool Event::isPersonalIsSet() const { return m_IsPersonalIsSet; }

void Event::unsetIsPersonal() { m_IsPersonalIsSet = false; }
bool Event::isIsCommunity() const { return m_IsCommunity; }

void Event::setIsCommunity(bool value) {
  m_IsCommunity = value;
  m_IsCommunityIsSet = true;
}

bool Event::isCommunityIsSet() const { return m_IsCommunityIsSet; }

void Event::unsetIsCommunity() { m_IsCommunityIsSet = false; }
std::vector<utility::string_t> &Event::getRegionDrops() {
  return m_RegionDrops;
}

void Event::setRegionDrops(const std::vector<utility::string_t> &value) {
  m_RegionDrops = value;
  m_RegionDropsIsSet = true;
}

bool Event::regionDropsIsSet() const { return m_RegionDropsIsSet; }

void Event::unsetRegionDrops() { m_RegionDropsIsSet = false; }
std::vector<utility::string_t> &Event::getArchwingDrops() {
  return m_ArchwingDrops;
}

void Event::setArchwingDrops(const std::vector<utility::string_t> &value) {
  m_ArchwingDrops = value;
  m_ArchwingDropsIsSet = true;
}

bool Event::archwingDropsIsSet() const { return m_ArchwingDropsIsSet; }

void Event::unsetArchwingDrops() { m_ArchwingDropsIsSet = false; }
utility::string_t Event::getAsString() const { return m_AsString; }

void Event::setAsString(const utility::string_t &value) {
  m_AsString = value;
  m_AsStringIsSet = true;
}

bool Event::asStringIsSet() const { return m_AsStringIsSet; }

void Event::unsetAsString() { m_AsStringIsSet = false; }
std::shared_ptr<Object> Event::getMetadata() const { return m_Metadata; }

void Event::setMetadata(const std::shared_ptr<Object> &value) {
  m_Metadata = value;
  m_MetadataIsSet = true;
}

bool Event::metadataIsSet() const { return m_MetadataIsSet; }

void Event::unsetMetadata() { m_MetadataIsSet = false; }
std::vector<double> &Event::getCompletionBonuses() {
  return m_CompletionBonuses;
}

void Event::setCompletionBonuses(std::vector<double> value) {
  m_CompletionBonuses = value;
  m_CompletionBonusesIsSet = true;
}

bool Event::completionBonusesIsSet() const { return m_CompletionBonusesIsSet; }

void Event::unsetCompletionBonuses() { m_CompletionBonusesIsSet = false; }
utility::string_t Event::getScoreVar() const { return m_ScoreVar; }

void Event::setScoreVar(const utility::string_t &value) {
  m_ScoreVar = value;
  m_ScoreVarIsSet = true;
}

bool Event::scoreVarIsSet() const { return m_ScoreVarIsSet; }

void Event::unsetScoreVar() { m_ScoreVarIsSet = false; }
utility::datetime Event::getAltExpiry() const { return m_AltExpiry; }

void Event::setAltExpiry(const utility::datetime &value) {
  m_AltExpiry = value;
  m_AltExpiryIsSet = true;
}

bool Event::altExpiryIsSet() const { return m_AltExpiryIsSet; }

void Event::unsetAltExpiry() { m_AltExpiryIsSet = false; }
utility::datetime Event::getAltActivation() const { return m_AltActivation; }

void Event::setAltActivation(const utility::datetime &value) {
  m_AltActivation = value;
  m_AltActivationIsSet = true;
}

bool Event::altActivationIsSet() const { return m_AltActivationIsSet; }

void Event::unsetAltActivation() { m_AltActivationIsSet = false; }
std::shared_ptr<Event_allOf_nextAlt> Event::getNextAlt() const {
  return m_NextAlt;
}

void Event::setNextAlt(const std::shared_ptr<Event_allOf_nextAlt> &value) {
  m_NextAlt = value;
  m_NextAltIsSet = true;
}

bool Event::nextAltIsSet() const { return m_NextAltIsSet; }

void Event::unsetNextAlt() { m_NextAltIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
