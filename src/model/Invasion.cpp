/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Invasion.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Invasion::Invasion() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_StartString = utility::conversions::to_string_t("");
  m_StartStringIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_AttackerIsSet = false;
  m_AttackerRewardIsSet = false;
  m_AttackingFaction = utility::conversions::to_string_t("");
  m_AttackingFactionIsSet = false;
  m_Completed = false;
  m_CompletedIsSet = false;
  m_Completion = 0.0;
  m_CompletionIsSet = false;
  m_Count = 0.0f;
  m_CountIsSet = false;
  m_DefenderIsSet = false;
  m_DefenderRewardIsSet = false;
  m_DefendingFaction = utility::conversions::to_string_t("");
  m_DefendingFactionIsSet = false;
  m_Desc = utility::conversions::to_string_t("");
  m_DescIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_Node = utility::conversions::to_string_t("");
  m_NodeIsSet = false;
  m_NodeKey = utility::conversions::to_string_t("");
  m_NodeKeyIsSet = false;
  m_RequiredRuns = 0.0;
  m_RequiredRunsIsSet = false;
  m_RewardTypesIsSet = false;
  m_VsInfestation = false;
  m_VsInfestationIsSet = false;
}

Invasion::~Invasion() {}

void Invasion::validate() {
  // TODO: implement validation
}

web::json::value Invasion::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_StartStringIsSet) {
    val[utility::conversions::to_string_t(U("startString"))] =
        ModelBase::toJson(m_StartString);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_AttackerIsSet) {
    val[utility::conversions::to_string_t(U("attacker"))] =
        ModelBase::toJson(m_Attacker);
  }
  if (m_AttackerRewardIsSet) {
    val[utility::conversions::to_string_t(U("attackerReward"))] =
        ModelBase::toJson(m_AttackerReward);
  }
  if (m_AttackingFactionIsSet) {
    val[utility::conversions::to_string_t(U("attackingFaction"))] =
        ModelBase::toJson(m_AttackingFaction);
  }
  if (m_CompletedIsSet) {
    val[utility::conversions::to_string_t(U("completed"))] =
        ModelBase::toJson(m_Completed);
  }
  if (m_CompletionIsSet) {
    val[utility::conversions::to_string_t(U("completion"))] =
        ModelBase::toJson(m_Completion);
  }
  if (m_CountIsSet) {
    val[utility::conversions::to_string_t(U("count"))] =
        ModelBase::toJson(m_Count);
  }
  if (m_DefenderIsSet) {
    val[utility::conversions::to_string_t(U("defender"))] =
        ModelBase::toJson(m_Defender);
  }
  if (m_DefenderRewardIsSet) {
    val[utility::conversions::to_string_t(U("defenderReward"))] =
        ModelBase::toJson(m_DefenderReward);
  }
  if (m_DefendingFactionIsSet) {
    val[utility::conversions::to_string_t(U("defendingFaction"))] =
        ModelBase::toJson(m_DefendingFaction);
  }
  if (m_DescIsSet) {
    val[utility::conversions::to_string_t(U("desc"))] =
        ModelBase::toJson(m_Desc);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_NodeIsSet) {
    val[utility::conversions::to_string_t(U("node"))] =
        ModelBase::toJson(m_Node);
  }
  if (m_NodeKeyIsSet) {
    val[utility::conversions::to_string_t(U("nodeKey"))] =
        ModelBase::toJson(m_NodeKey);
  }
  if (m_RequiredRunsIsSet) {
    val[utility::conversions::to_string_t(U("requiredRuns"))] =
        ModelBase::toJson(m_RequiredRuns);
  }
  if (m_RewardTypesIsSet) {
    val[utility::conversions::to_string_t(U("rewardTypes"))] =
        ModelBase::toJson(m_RewardTypes);
  }
  if (m_VsInfestationIsSet) {
    val[utility::conversions::to_string_t(U("vsInfestation"))] =
        ModelBase::toJson(m_VsInfestation);
  }

  return val;
}

bool Invasion::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("startString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("startString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStartString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStartString);
      setStartString(refVal_setStartString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attacker")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attacker")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Invasion_allOf_attacker> refVal_setAttacker;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttacker);
      setAttacker(refVal_setAttacker);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attackerReward")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attackerReward")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Invasion_allOf_attackerReward> refVal_setAttackerReward;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttackerReward);
      setAttackerReward(refVal_setAttackerReward);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attackingFaction")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attackingFaction")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAttackingFaction;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttackingFaction);
      setAttackingFaction(refVal_setAttackingFaction);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("completed")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("completed")));
    if (!fieldValue.is_null()) {
      bool refVal_setCompleted;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCompleted);
      setCompleted(refVal_setCompleted);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("completion")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("completion")));
    if (!fieldValue.is_null()) {
      double refVal_setCompletion;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCompletion);
      setCompletion(refVal_setCompletion);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("count")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("count")));
    if (!fieldValue.is_null()) {
      float refVal_setCount;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
      setCount(refVal_setCount);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("defender")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defender")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Invasion_allOf_defender> refVal_setDefender;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefender);
      setDefender(refVal_setDefender);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("defenderReward")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defenderReward")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Invasion_allOf_defenderReward> refVal_setDefenderReward;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefenderReward);
      setDefenderReward(refVal_setDefenderReward);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("defendingFaction")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defendingFaction")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDefendingFaction;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefendingFaction);
      setDefendingFaction(refVal_setDefendingFaction);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("desc")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("desc")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDesc;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDesc);
      setDesc(refVal_setDesc);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("node")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("node")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
      setNode(refVal_setNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("nodeKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("nodeKey")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNodeKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNodeKey);
      setNodeKey(refVal_setNodeKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("requiredRuns")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("requiredRuns")));
    if (!fieldValue.is_null()) {
      double refVal_setRequiredRuns;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredRuns);
      setRequiredRuns(refVal_setRequiredRuns);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rewardTypes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rewardTypes")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<RewardType>> refVal_setRewardTypes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRewardTypes);
      setRewardTypes(refVal_setRewardTypes);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vsInfestation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vsInfestation")));
    if (!fieldValue.is_null()) {
      bool refVal_setVsInfestation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVsInfestation);
      setVsInfestation(refVal_setVsInfestation);
    }
  }
  return ok;
}

void Invasion::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_StartStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("startString")),
        m_StartString));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_AttackerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attacker")),
        m_Attacker));
  }
  if (m_AttackerRewardIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attackerReward")),
        m_AttackerReward));
  }
  if (m_AttackingFactionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attackingFaction")),
        m_AttackingFaction));
  }
  if (m_CompletedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("completed")),
        m_Completed));
  }
  if (m_CompletionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("completion")),
        m_Completion));
  }
  if (m_CountIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
  }
  if (m_DefenderIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defender")),
        m_Defender));
  }
  if (m_DefenderRewardIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defenderReward")),
        m_DefenderReward));
  }
  if (m_DefendingFactionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defendingFaction")),
        m_DefendingFaction));
  }
  if (m_DescIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("desc")), m_Desc));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_NodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
  }
  if (m_NodeKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("nodeKey")),
        m_NodeKey));
  }
  if (m_RequiredRunsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("requiredRuns")),
        m_RequiredRuns));
  }
  if (m_RewardTypesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rewardTypes")),
        m_RewardTypes));
  }
  if (m_VsInfestationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vsInfestation")),
        m_VsInfestation));
  }
}

bool Invasion::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("startString")))) {
    utility::string_t refVal_setStartString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("startString"))),
        refVal_setStartString);
    setStartString(refVal_setStartString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("attacker")))) {
    std::shared_ptr<Invasion_allOf_attacker> refVal_setAttacker;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("attacker"))),
        refVal_setAttacker);
    setAttacker(refVal_setAttacker);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("attackerReward")))) {
    std::shared_ptr<Invasion_allOf_attackerReward> refVal_setAttackerReward;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("attackerReward"))),
        refVal_setAttackerReward);
    setAttackerReward(refVal_setAttackerReward);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("attackingFaction")))) {
    utility::string_t refVal_setAttackingFaction;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("attackingFaction"))),
        refVal_setAttackingFaction);
    setAttackingFaction(refVal_setAttackingFaction);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("completed")))) {
    bool refVal_setCompleted;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("completed"))),
        refVal_setCompleted);
    setCompleted(refVal_setCompleted);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("completion")))) {
    double refVal_setCompletion;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("completion"))),
        refVal_setCompletion);
    setCompletion(refVal_setCompletion);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("count")))) {
    float refVal_setCount;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("count"))),
        refVal_setCount);
    setCount(refVal_setCount);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("defender")))) {
    std::shared_ptr<Invasion_allOf_defender> refVal_setDefender;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("defender"))),
        refVal_setDefender);
    setDefender(refVal_setDefender);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("defenderReward")))) {
    std::shared_ptr<Invasion_allOf_defenderReward> refVal_setDefenderReward;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("defenderReward"))),
        refVal_setDefenderReward);
    setDefenderReward(refVal_setDefenderReward);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("defendingFaction")))) {
    utility::string_t refVal_setDefendingFaction;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("defendingFaction"))),
        refVal_setDefendingFaction);
    setDefendingFaction(refVal_setDefendingFaction);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("desc")))) {
    utility::string_t refVal_setDesc;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("desc"))),
        refVal_setDesc);
    setDesc(refVal_setDesc);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("node")))) {
    utility::string_t refVal_setNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("node"))),
        refVal_setNode);
    setNode(refVal_setNode);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("nodeKey")))) {
    utility::string_t refVal_setNodeKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("nodeKey"))),
        refVal_setNodeKey);
    setNodeKey(refVal_setNodeKey);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("requiredRuns")))) {
    double refVal_setRequiredRuns;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("requiredRuns"))),
        refVal_setRequiredRuns);
    setRequiredRuns(refVal_setRequiredRuns);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("rewardTypes")))) {
    std::vector<std::shared_ptr<RewardType>> refVal_setRewardTypes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("rewardTypes"))),
        refVal_setRewardTypes);
    setRewardTypes(refVal_setRewardTypes);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("vsInfestation")))) {
    bool refVal_setVsInfestation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("vsInfestation"))),
        refVal_setVsInfestation);
    setVsInfestation(refVal_setVsInfestation);
  }
  return ok;
}

utility::string_t Invasion::getId() const { return m_Id; }

void Invasion::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool Invasion::idIsSet() const { return m_IdIsSet; }

void Invasion::unsetId() { m_IdIsSet = false; }
utility::datetime Invasion::getActivation() const { return m_Activation; }

void Invasion::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool Invasion::activationIsSet() const { return m_ActivationIsSet; }

void Invasion::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime Invasion::getExpiry() const { return m_Expiry; }

void Invasion::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool Invasion::expiryIsSet() const { return m_ExpiryIsSet; }

void Invasion::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t Invasion::getStartString() const { return m_StartString; }

void Invasion::setStartString(const utility::string_t &value) {
  m_StartString = value;
  m_StartStringIsSet = true;
}

bool Invasion::startStringIsSet() const { return m_StartStringIsSet; }

void Invasion::unsetStartString() { m_StartStringIsSet = false; }
bool Invasion::isActive() const { return m_Active; }

void Invasion::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool Invasion::activeIsSet() const { return m_ActiveIsSet; }

void Invasion::unsetActive() { m_ActiveIsSet = false; }
std::shared_ptr<Invasion_allOf_attacker> Invasion::getAttacker() const {
  return m_Attacker;
}

void Invasion::setAttacker(
    const std::shared_ptr<Invasion_allOf_attacker> &value) {
  m_Attacker = value;
  m_AttackerIsSet = true;
}

bool Invasion::attackerIsSet() const { return m_AttackerIsSet; }

void Invasion::unsetAttacker() { m_AttackerIsSet = false; }
std::shared_ptr<Invasion_allOf_attackerReward>
Invasion::getAttackerReward() const {
  return m_AttackerReward;
}

void Invasion::setAttackerReward(
    const std::shared_ptr<Invasion_allOf_attackerReward> &value) {
  m_AttackerReward = value;
  m_AttackerRewardIsSet = true;
}

bool Invasion::attackerRewardIsSet() const { return m_AttackerRewardIsSet; }

void Invasion::unsetAttackerReward() { m_AttackerRewardIsSet = false; }
utility::string_t Invasion::getAttackingFaction() const {
  return m_AttackingFaction;
}

void Invasion::setAttackingFaction(const utility::string_t &value) {
  m_AttackingFaction = value;
  m_AttackingFactionIsSet = true;
}

bool Invasion::attackingFactionIsSet() const { return m_AttackingFactionIsSet; }

void Invasion::unsetAttackingFaction() { m_AttackingFactionIsSet = false; }
bool Invasion::isCompleted() const { return m_Completed; }

void Invasion::setCompleted(bool value) {
  m_Completed = value;
  m_CompletedIsSet = true;
}

bool Invasion::completedIsSet() const { return m_CompletedIsSet; }

void Invasion::unsetCompleted() { m_CompletedIsSet = false; }
double Invasion::getCompletion() const { return m_Completion; }

void Invasion::setCompletion(double value) {
  m_Completion = value;
  m_CompletionIsSet = true;
}

bool Invasion::completionIsSet() const { return m_CompletionIsSet; }

void Invasion::unsetCompletion() { m_CompletionIsSet = false; }
float Invasion::getCount() const { return m_Count; }

void Invasion::setCount(float value) {
  m_Count = value;
  m_CountIsSet = true;
}

bool Invasion::countIsSet() const { return m_CountIsSet; }

void Invasion::unsetCount() { m_CountIsSet = false; }
std::shared_ptr<Invasion_allOf_defender> Invasion::getDefender() const {
  return m_Defender;
}

void Invasion::setDefender(
    const std::shared_ptr<Invasion_allOf_defender> &value) {
  m_Defender = value;
  m_DefenderIsSet = true;
}

bool Invasion::defenderIsSet() const { return m_DefenderIsSet; }

void Invasion::unsetDefender() { m_DefenderIsSet = false; }
std::shared_ptr<Invasion_allOf_defenderReward>
Invasion::getDefenderReward() const {
  return m_DefenderReward;
}

void Invasion::setDefenderReward(
    const std::shared_ptr<Invasion_allOf_defenderReward> &value) {
  m_DefenderReward = value;
  m_DefenderRewardIsSet = true;
}

bool Invasion::defenderRewardIsSet() const { return m_DefenderRewardIsSet; }

void Invasion::unsetDefenderReward() { m_DefenderRewardIsSet = false; }
utility::string_t Invasion::getDefendingFaction() const {
  return m_DefendingFaction;
}

void Invasion::setDefendingFaction(const utility::string_t &value) {
  m_DefendingFaction = value;
  m_DefendingFactionIsSet = true;
}

bool Invasion::defendingFactionIsSet() const { return m_DefendingFactionIsSet; }

void Invasion::unsetDefendingFaction() { m_DefendingFactionIsSet = false; }
utility::string_t Invasion::getDesc() const { return m_Desc; }

void Invasion::setDesc(const utility::string_t &value) {
  m_Desc = value;
  m_DescIsSet = true;
}

bool Invasion::descIsSet() const { return m_DescIsSet; }

void Invasion::unsetDesc() { m_DescIsSet = false; }
utility::string_t Invasion::getEta() const { return m_Eta; }

void Invasion::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool Invasion::etaIsSet() const { return m_EtaIsSet; }

void Invasion::unsetEta() { m_EtaIsSet = false; }
utility::string_t Invasion::getNode() const { return m_Node; }

void Invasion::setNode(const utility::string_t &value) {
  m_Node = value;
  m_NodeIsSet = true;
}

bool Invasion::nodeIsSet() const { return m_NodeIsSet; }

void Invasion::unsetNode() { m_NodeIsSet = false; }
utility::string_t Invasion::getNodeKey() const { return m_NodeKey; }

void Invasion::setNodeKey(const utility::string_t &value) {
  m_NodeKey = value;
  m_NodeKeyIsSet = true;
}

bool Invasion::nodeKeyIsSet() const { return m_NodeKeyIsSet; }

void Invasion::unsetNodeKey() { m_NodeKeyIsSet = false; }
double Invasion::getRequiredRuns() const { return m_RequiredRuns; }

void Invasion::setRequiredRuns(double value) {
  m_RequiredRuns = value;
  m_RequiredRunsIsSet = true;
}

bool Invasion::requiredRunsIsSet() const { return m_RequiredRunsIsSet; }

void Invasion::unsetRequiredRuns() { m_RequiredRunsIsSet = false; }
std::vector<std::shared_ptr<RewardType>> &Invasion::getRewardTypes() {
  return m_RewardTypes;
}

void Invasion::setRewardTypes(
    const std::vector<std::shared_ptr<RewardType>> &value) {
  m_RewardTypes = value;
  m_RewardTypesIsSet = true;
}

bool Invasion::rewardTypesIsSet() const { return m_RewardTypesIsSet; }

void Invasion::unsetRewardTypes() { m_RewardTypesIsSet = false; }
bool Invasion::isVsInfestation() const { return m_VsInfestation; }

void Invasion::setVsInfestation(bool value) {
  m_VsInfestation = value;
  m_VsInfestationIsSet = true;
}

bool Invasion::vsInfestationIsSet() const { return m_VsInfestationIsSet; }

void Invasion::unsetVsInfestation() { m_VsInfestationIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
