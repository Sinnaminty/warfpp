/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/FissureModifiers.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FissureModifiers::FissureModifiers() {
  m_VoidT1IsSet = false;
  m_VoidT2IsSet = false;
  m_VoidT3IsSet = false;
  m_VoidT4IsSet = false;
}

FissureModifiers::~FissureModifiers() {}

void FissureModifiers::validate() {
  // TODO: implement validation
}

web::json::value FissureModifiers::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_VoidT1IsSet) {
    val[utility::conversions::to_string_t(U("VoidT1"))] =
        ModelBase::toJson(m_VoidT1);
  }
  if (m_VoidT2IsSet) {
    val[utility::conversions::to_string_t(U("VoidT2"))] =
        ModelBase::toJson(m_VoidT2);
  }
  if (m_VoidT3IsSet) {
    val[utility::conversions::to_string_t(U("VoidT3"))] =
        ModelBase::toJson(m_VoidT3);
  }
  if (m_VoidT4IsSet) {
    val[utility::conversions::to_string_t(U("VoidT4"))] =
        ModelBase::toJson(m_VoidT4);
  }

  return val;
}

bool FissureModifiers::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("VoidT1")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("VoidT1")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT1;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVoidT1);
      setVoidT1(refVal_setVoidT1);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("VoidT2")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("VoidT2")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT2;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVoidT2);
      setVoidT2(refVal_setVoidT2);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("VoidT3")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("VoidT3")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT3;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVoidT3);
      setVoidT3(refVal_setVoidT3);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("VoidT4")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("VoidT4")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT4;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVoidT4);
      setVoidT4(refVal_setVoidT4);
    }
  }
  return ok;
}

void FissureModifiers::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_VoidT1IsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("VoidT1")), m_VoidT1));
  }
  if (m_VoidT2IsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("VoidT2")), m_VoidT2));
  }
  if (m_VoidT3IsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("VoidT3")), m_VoidT3));
  }
  if (m_VoidT4IsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("VoidT4")), m_VoidT4));
  }
}

bool FissureModifiers::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("VoidT1")))) {
    std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT1;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("VoidT1"))),
        refVal_setVoidT1);
    setVoidT1(refVal_setVoidT1);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("VoidT2")))) {
    std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT2;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("VoidT2"))),
        refVal_setVoidT2);
    setVoidT2(refVal_setVoidT2);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("VoidT3")))) {
    std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT3;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("VoidT3"))),
        refVal_setVoidT3);
    setVoidT3(refVal_setVoidT3);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("VoidT4")))) {
    std::shared_ptr<FissureModifiers_VoidT1> refVal_setVoidT4;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("VoidT4"))),
        refVal_setVoidT4);
    setVoidT4(refVal_setVoidT4);
  }
  return ok;
}

std::shared_ptr<FissureModifiers_VoidT1> FissureModifiers::getVoidT1() const {
  return m_VoidT1;
}

void FissureModifiers::setVoidT1(
    const std::shared_ptr<FissureModifiers_VoidT1> &value) {
  m_VoidT1 = value;
  m_VoidT1IsSet = true;
}

bool FissureModifiers::voidT1IsSet() const { return m_VoidT1IsSet; }

void FissureModifiers::unsetVoidT1() { m_VoidT1IsSet = false; }
std::shared_ptr<FissureModifiers_VoidT1> FissureModifiers::getVoidT2() const {
  return m_VoidT2;
}

void FissureModifiers::setVoidT2(
    const std::shared_ptr<FissureModifiers_VoidT1> &value) {
  m_VoidT2 = value;
  m_VoidT2IsSet = true;
}

bool FissureModifiers::voidT2IsSet() const { return m_VoidT2IsSet; }

void FissureModifiers::unsetVoidT2() { m_VoidT2IsSet = false; }
std::shared_ptr<FissureModifiers_VoidT1> FissureModifiers::getVoidT3() const {
  return m_VoidT3;
}

void FissureModifiers::setVoidT3(
    const std::shared_ptr<FissureModifiers_VoidT1> &value) {
  m_VoidT3 = value;
  m_VoidT3IsSet = true;
}

bool FissureModifiers::voidT3IsSet() const { return m_VoidT3IsSet; }

void FissureModifiers::unsetVoidT3() { m_VoidT3IsSet = false; }
std::shared_ptr<FissureModifiers_VoidT1> FissureModifiers::getVoidT4() const {
  return m_VoidT4;
}

void FissureModifiers::setVoidT4(
    const std::shared_ptr<FissureModifiers_VoidT1> &value) {
  m_VoidT4 = value;
  m_VoidT4IsSet = true;
}

bool FissureModifiers::voidT4IsSet() const { return m_VoidT4IsSet; }

void FissureModifiers::unsetVoidT4() { m_VoidT4IsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
