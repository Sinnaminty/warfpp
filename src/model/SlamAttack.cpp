/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SlamAttack.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SlamAttack::SlamAttack() {
  m_Damage = 0.0f;
  m_DamageIsSet = false;
  m_RadialIsSet = false;
}

SlamAttack::~SlamAttack() {}

void SlamAttack::validate() {
  // TODO: implement validation
}

web::json::value SlamAttack::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_DamageIsSet) {
    val[utility::conversions::to_string_t(U("damage"))] =
        ModelBase::toJson(m_Damage);
  }
  if (m_RadialIsSet) {
    val[utility::conversions::to_string_t(U("radial"))] =
        ModelBase::toJson(m_Radial);
  }

  return val;
}

bool SlamAttack::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("damage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("damage")));
    if (!fieldValue.is_null()) {
      float refVal_setDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDamage);
      setDamage(refVal_setDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("radial")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("radial")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SlamAttack_radial> refVal_setRadial;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRadial);
      setRadial(refVal_setRadial);
    }
  }
  return ok;
}

void SlamAttack::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_DamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("damage")), m_Damage));
  }
  if (m_RadialIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("radial")), m_Radial));
  }
}

bool SlamAttack::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("damage")))) {
    float refVal_setDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("damage"))),
        refVal_setDamage);
    setDamage(refVal_setDamage);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("radial")))) {
    std::shared_ptr<SlamAttack_radial> refVal_setRadial;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("radial"))),
        refVal_setRadial);
    setRadial(refVal_setRadial);
  }
  return ok;
}

float SlamAttack::getDamage() const { return m_Damage; }

void SlamAttack::setDamage(float value) {
  m_Damage = value;
  m_DamageIsSet = true;
}

bool SlamAttack::damageIsSet() const { return m_DamageIsSet; }

void SlamAttack::unsetDamage() { m_DamageIsSet = false; }
std::shared_ptr<SlamAttack_radial> SlamAttack::getRadial() const {
  return m_Radial;
}

void SlamAttack::setRadial(const std::shared_ptr<SlamAttack_radial> &value) {
  m_Radial = value;
  m_RadialIsSet = true;
}

bool SlamAttack::radialIsSet() const { return m_RadialIsSet; }

void SlamAttack::unsetRadial() { m_RadialIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
