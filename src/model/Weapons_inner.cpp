/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Weapons_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

void Weapons_inner::validate() {
  // TODO: implement validation
}

const Weapons_inner::VariantType &Weapons_inner::getVariant() const {
  return m_variantValue;
}

void Weapons_inner::setVariant(Weapons_inner::VariantType value) {
  m_variantValue = value;
}

web::json::value Weapons_inner::toJson() const {
  web::json::value val = web::json::value::object();

  std::visit(
      [&](auto &&arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (std::is_same_v<T, std::monostate>) {
          val = web::json::value::null();
        } else {
          val = arg.toJson();
        }
      },
      m_variantValue);

  return val;
}

void Weapons_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) const {
  std::visit(
      [&](auto &&arg) {
        using T = std::decay_t<decltype(arg)>;
        if constexpr (!std::is_same_v<T, std::monostate>) {
          arg.toMultipart(multipart, prefix);
        }
      },
      m_variantValue);
}

template bool
Weapons_inner::fromJson<MeleeWeapon>(const web::json::value &json);
template bool Weapons_inner::fromMultiPart<MeleeWeapon>(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &namePrefix);
template bool
Weapons_inner::fromJson<RangedWeapon>(const web::json::value &json);
template bool Weapons_inner::fromMultiPart<RangedWeapon>(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &namePrefix);

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
