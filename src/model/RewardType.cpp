/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/RewardType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

RewardType::eRewardType toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("vauban")))
    return RewardType::eRewardType::RewardType_VAUBAN;
  if (val == utility::conversions::to_string_t(U("vandal")))
    return RewardType::eRewardType::RewardType_VANDAL;
  if (val == utility::conversions::to_string_t(U("wraith")))
    return RewardType::eRewardType::RewardType_WRAITH;
  if (val == utility::conversions::to_string_t(U("skin")))
    return RewardType::eRewardType::RewardType_SKIN;
  if (val == utility::conversions::to_string_t(U("helmet")))
    return RewardType::eRewardType::RewardType_HELMET;
  if (val == utility::conversions::to_string_t(U("nitain")))
    return RewardType::eRewardType::RewardType_NITAIN;
  if (val == utility::conversions::to_string_t(U("mutalist")))
    return RewardType::eRewardType::RewardType_MUTALIST;
  if (val == utility::conversions::to_string_t(U("weapon")))
    return RewardType::eRewardType::RewardType_WEAPON;
  if (val == utility::conversions::to_string_t(U("fieldron")))
    return RewardType::eRewardType::RewardType_FIELDRON;
  if (val == utility::conversions::to_string_t(U("detonite")))
    return RewardType::eRewardType::RewardType_DETONITE;
  if (val == utility::conversions::to_string_t(U("mutagen")))
    return RewardType::eRewardType::RewardType_MUTAGEN;
  if (val == utility::conversions::to_string_t(U("aura")))
    return RewardType::eRewardType::RewardType_AURA;
  if (val == utility::conversions::to_string_t(U("neuralSensors")))
    return RewardType::eRewardType::RewardType_NEURALSENSORS;
  if (val == utility::conversions::to_string_t(U("orokinCell")))
    return RewardType::eRewardType::RewardType_OROKINCELL;
  if (val == utility::conversions::to_string_t(U("alloyPlate")))
    return RewardType::eRewardType::RewardType_ALLOYPLATE;
  if (val == utility::conversions::to_string_t(U("circuits")))
    return RewardType::eRewardType::RewardType_CIRCUITS;
  if (val == utility::conversions::to_string_t(U("controlModule")))
    return RewardType::eRewardType::RewardType_CONTROLMODULE;
  if (val == utility::conversions::to_string_t(U("ferrite")))
    return RewardType::eRewardType::RewardType_FERRITE;
  if (val == utility::conversions::to_string_t(U("gallium")))
    return RewardType::eRewardType::RewardType_GALLIUM;
  if (val == utility::conversions::to_string_t(U("morphics")))
    return RewardType::eRewardType::RewardType_MORPHICS;
  if (val == utility::conversions::to_string_t(U("nanoSpores")))
    return RewardType::eRewardType::RewardType_NANOSPORES;
  if (val == utility::conversions::to_string_t(U("oxium")))
    return RewardType::eRewardType::RewardType_OXIUM;
  if (val == utility::conversions::to_string_t(U("rubedo")))
    return RewardType::eRewardType::RewardType_RUBEDO;
  if (val == utility::conversions::to_string_t(U("salvage")))
    return RewardType::eRewardType::RewardType_SALVAGE;
  if (val == utility::conversions::to_string_t(U("plastids")))
    return RewardType::eRewardType::RewardType_PLASTIDS;
  if (val == utility::conversions::to_string_t(U("polymerBundle")))
    return RewardType::eRewardType::RewardType_POLYMERBUNDLE;
  if (val == utility::conversions::to_string_t(U("argonCrystal")))
    return RewardType::eRewardType::RewardType_ARGONCRYSTAL;
  if (val == utility::conversions::to_string_t(U("cryotic")))
    return RewardType::eRewardType::RewardType_CRYOTIC;
  if (val == utility::conversions::to_string_t(U("tellurium")))
    return RewardType::eRewardType::RewardType_TELLURIUM;
  if (val == utility::conversions::to_string_t(U("neurodes")))
    return RewardType::eRewardType::RewardType_NEURODES;
  if (val == utility::conversions::to_string_t(U("nightmare")))
    return RewardType::eRewardType::RewardType_NIGHTMARE;
  if (val == utility::conversions::to_string_t(U("endo")))
    return RewardType::eRewardType::RewardType_ENDO;
  if (val == utility::conversions::to_string_t(U("reactor")))
    return RewardType::eRewardType::RewardType_REACTOR;
  if (val == utility::conversions::to_string_t(U("catalyst")))
    return RewardType::eRewardType::RewardType_CATALYST;
  if (val == utility::conversions::to_string_t(U("forma")))
    return RewardType::eRewardType::RewardType_FORMA;
  if (val == utility::conversions::to_string_t(U("synthula")))
    return RewardType::eRewardType::RewardType_SYNTHULA;
  if (val == utility::conversions::to_string_t(U("exilus")))
    return RewardType::eRewardType::RewardType_EXILUS;
  if (val == utility::conversions::to_string_t(U("riven")))
    return RewardType::eRewardType::RewardType_RIVEN;
  if (val == utility::conversions::to_string_t(U("kavatGene")))
    return RewardType::eRewardType::RewardType_KAVATGENE;
  if (val == utility::conversions::to_string_t(U("kubrowEgg")))
    return RewardType::eRewardType::RewardType_KUBROWEGG;
  if (val == utility::conversions::to_string_t(U("traces")))
    return RewardType::eRewardType::RewardType_TRACES;
  if (val == utility::conversions::to_string_t(U("other")))
    return RewardType::eRewardType::RewardType_OTHER;
  if (val == utility::conversions::to_string_t(U("credits")))
    return RewardType::eRewardType::RewardType_CREDITS;
  return {};
}

EnumUnderlyingType fromEnum(RewardType::eRewardType e) {
  switch (e) {
  case RewardType::eRewardType::RewardType_VAUBAN:
    return U("vauban");
  case RewardType::eRewardType::RewardType_VANDAL:
    return U("vandal");
  case RewardType::eRewardType::RewardType_WRAITH:
    return U("wraith");
  case RewardType::eRewardType::RewardType_SKIN:
    return U("skin");
  case RewardType::eRewardType::RewardType_HELMET:
    return U("helmet");
  case RewardType::eRewardType::RewardType_NITAIN:
    return U("nitain");
  case RewardType::eRewardType::RewardType_MUTALIST:
    return U("mutalist");
  case RewardType::eRewardType::RewardType_WEAPON:
    return U("weapon");
  case RewardType::eRewardType::RewardType_FIELDRON:
    return U("fieldron");
  case RewardType::eRewardType::RewardType_DETONITE:
    return U("detonite");
  case RewardType::eRewardType::RewardType_MUTAGEN:
    return U("mutagen");
  case RewardType::eRewardType::RewardType_AURA:
    return U("aura");
  case RewardType::eRewardType::RewardType_NEURALSENSORS:
    return U("neuralSensors");
  case RewardType::eRewardType::RewardType_OROKINCELL:
    return U("orokinCell");
  case RewardType::eRewardType::RewardType_ALLOYPLATE:
    return U("alloyPlate");
  case RewardType::eRewardType::RewardType_CIRCUITS:
    return U("circuits");
  case RewardType::eRewardType::RewardType_CONTROLMODULE:
    return U("controlModule");
  case RewardType::eRewardType::RewardType_FERRITE:
    return U("ferrite");
  case RewardType::eRewardType::RewardType_GALLIUM:
    return U("gallium");
  case RewardType::eRewardType::RewardType_MORPHICS:
    return U("morphics");
  case RewardType::eRewardType::RewardType_NANOSPORES:
    return U("nanoSpores");
  case RewardType::eRewardType::RewardType_OXIUM:
    return U("oxium");
  case RewardType::eRewardType::RewardType_RUBEDO:
    return U("rubedo");
  case RewardType::eRewardType::RewardType_SALVAGE:
    return U("salvage");
  case RewardType::eRewardType::RewardType_PLASTIDS:
    return U("plastids");
  case RewardType::eRewardType::RewardType_POLYMERBUNDLE:
    return U("polymerBundle");
  case RewardType::eRewardType::RewardType_ARGONCRYSTAL:
    return U("argonCrystal");
  case RewardType::eRewardType::RewardType_CRYOTIC:
    return U("cryotic");
  case RewardType::eRewardType::RewardType_TELLURIUM:
    return U("tellurium");
  case RewardType::eRewardType::RewardType_NEURODES:
    return U("neurodes");
  case RewardType::eRewardType::RewardType_NIGHTMARE:
    return U("nightmare");
  case RewardType::eRewardType::RewardType_ENDO:
    return U("endo");
  case RewardType::eRewardType::RewardType_REACTOR:
    return U("reactor");
  case RewardType::eRewardType::RewardType_CATALYST:
    return U("catalyst");
  case RewardType::eRewardType::RewardType_FORMA:
    return U("forma");
  case RewardType::eRewardType::RewardType_SYNTHULA:
    return U("synthula");
  case RewardType::eRewardType::RewardType_EXILUS:
    return U("exilus");
  case RewardType::eRewardType::RewardType_RIVEN:
    return U("riven");
  case RewardType::eRewardType::RewardType_KAVATGENE:
    return U("kavatGene");
  case RewardType::eRewardType::RewardType_KUBROWEGG:
    return U("kubrowEgg");
  case RewardType::eRewardType::RewardType_TRACES:
    return U("traces");
  case RewardType::eRewardType::RewardType_OTHER:
    return U("other");
  case RewardType::eRewardType::RewardType_CREDITS:
    return U("credits");
  default:
    break;
  }
  return {};
}
} // namespace

RewardType::RewardType() {}

RewardType::~RewardType() {}

void RewardType::validate() {
  // TODO: implement validation
}

web::json::value RewardType::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool RewardType::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void RewardType::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool RewardType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

RewardType::eRewardType RewardType::getValue() const { return m_value; }

void RewardType::setValue(RewardType::eRewardType const value) {
  m_value = value;
}

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
