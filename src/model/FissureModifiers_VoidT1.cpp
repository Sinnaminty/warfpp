/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/FissureModifiers_VoidT1.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FissureModifiers_VoidT1::FissureModifiers_VoidT1() {
  m_Num = 0.0;
  m_NumIsSet = false;
  m_Value = utility::conversions::to_string_t("");
  m_ValueIsSet = false;
}

FissureModifiers_VoidT1::~FissureModifiers_VoidT1() {}

void FissureModifiers_VoidT1::validate() {
  // TODO: implement validation
}

web::json::value FissureModifiers_VoidT1::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NumIsSet) {
    val[utility::conversions::to_string_t(U("num"))] = ModelBase::toJson(m_Num);
  }
  if (m_ValueIsSet) {
    val[utility::conversions::to_string_t(U("value"))] =
        ModelBase::toJson(m_Value);
  }

  return val;
}

bool FissureModifiers_VoidT1::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("num")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("num")));
    if (!fieldValue.is_null()) {
      double refVal_setNum;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNum);
      setNum(refVal_setNum);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("value")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("value")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setValue;
      ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
      setValue(refVal_setValue);
    }
  }
  return ok;
}

void FissureModifiers_VoidT1::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NumIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("num")), m_Num));
  }
  if (m_ValueIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
  }
}

bool FissureModifiers_VoidT1::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("num")))) {
    double refVal_setNum;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("num"))),
        refVal_setNum);
    setNum(refVal_setNum);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("value")))) {
    utility::string_t refVal_setValue;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("value"))),
        refVal_setValue);
    setValue(refVal_setValue);
  }
  return ok;
}

double FissureModifiers_VoidT1::getNum() const { return m_Num; }

void FissureModifiers_VoidT1::setNum(double value) {
  m_Num = value;
  m_NumIsSet = true;
}

bool FissureModifiers_VoidT1::numIsSet() const { return m_NumIsSet; }

void FissureModifiers_VoidT1::unsetNum() { m_NumIsSet = false; }
utility::string_t FissureModifiers_VoidT1::getValue() const { return m_Value; }

void FissureModifiers_VoidT1::setValue(const utility::string_t &value) {
  m_Value = value;
  m_ValueIsSet = true;
}

bool FissureModifiers_VoidT1::valueIsSet() const { return m_ValueIsSet; }

void FissureModifiers_VoidT1::unsetValue() { m_ValueIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
