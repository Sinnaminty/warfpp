/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Ws.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Ws::Ws() {
  m_Timestamp = utility::conversions::to_string_t("");
  m_TimestampIsSet = false;
  m_AlertsIsSet = false;
  m_ArbitrationIsSet = false;
  m_ArchonHuntIsSet = false;
  m_CambionCycleIsSet = false;
  m_CetusCycleIsSet = false;
  m_ConclaveChallengesIsSet = false;
  m_ConstructionProgressIsSet = false;
  m_DailyDealsIsSet = false;
  m_DarkSectorsIsSet = false;
  m_EarthCycleIsSet = false;
  m_EventsIsSet = false;
  m_FissuresIsSet = false;
  m_FlashSalesIsSet = false;
  m_GlobalUpgradesIsSet = false;
  m_InvasionsIsSet = false;
  m_KuvaIsSet = false;
  m_NewsIsSet = false;
  m_NightwaveIsSet = false;
  m_PersistentEnemiesIsSet = false;
  m_SimarisIsSet = false;
  m_SortieIsSet = false;
  m_SteelPathIsSet = false;
  m_SyndicateMissionsIsSet = false;
  m_VallisCycleIsSet = false;
  m_VoidTraderIsSet = false;
}

Ws::~Ws() {}

void Ws::validate() {
  // TODO: implement validation
}

web::json::value Ws::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_TimestampIsSet) {
    val[utility::conversions::to_string_t(U("timestamp"))] =
        ModelBase::toJson(m_Timestamp);
  }
  if (m_AlertsIsSet) {
    val[utility::conversions::to_string_t(U("alerts"))] =
        ModelBase::toJson(m_Alerts);
  }
  if (m_ArbitrationIsSet) {
    val[utility::conversions::to_string_t(U("arbitration"))] =
        ModelBase::toJson(m_Arbitration);
  }
  if (m_ArchonHuntIsSet) {
    val[utility::conversions::to_string_t(U("archonHunt"))] =
        ModelBase::toJson(m_ArchonHunt);
  }
  if (m_CambionCycleIsSet) {
    val[utility::conversions::to_string_t(U("cambionCycle"))] =
        ModelBase::toJson(m_CambionCycle);
  }
  if (m_CetusCycleIsSet) {
    val[utility::conversions::to_string_t(U("cetusCycle"))] =
        ModelBase::toJson(m_CetusCycle);
  }
  if (m_ConclaveChallengesIsSet) {
    val[utility::conversions::to_string_t(U("conclaveChallenges"))] =
        ModelBase::toJson(m_ConclaveChallenges);
  }
  if (m_ConstructionProgressIsSet) {
    val[utility::conversions::to_string_t(U("constructionProgress"))] =
        ModelBase::toJson(m_ConstructionProgress);
  }
  if (m_DailyDealsIsSet) {
    val[utility::conversions::to_string_t(U("dailyDeals"))] =
        ModelBase::toJson(m_DailyDeals);
  }
  if (m_DarkSectorsIsSet) {
    val[utility::conversions::to_string_t(U("darkSectors"))] =
        ModelBase::toJson(m_DarkSectors);
  }
  if (m_EarthCycleIsSet) {
    val[utility::conversions::to_string_t(U("earthCycle"))] =
        ModelBase::toJson(m_EarthCycle);
  }
  if (m_EventsIsSet) {
    val[utility::conversions::to_string_t(U("events"))] =
        ModelBase::toJson(m_Events);
  }
  if (m_FissuresIsSet) {
    val[utility::conversions::to_string_t(U("fissures"))] =
        ModelBase::toJson(m_Fissures);
  }
  if (m_FlashSalesIsSet) {
    val[utility::conversions::to_string_t(U("flashSales"))] =
        ModelBase::toJson(m_FlashSales);
  }
  if (m_GlobalUpgradesIsSet) {
    val[utility::conversions::to_string_t(U("globalUpgrades"))] =
        ModelBase::toJson(m_GlobalUpgrades);
  }
  if (m_InvasionsIsSet) {
    val[utility::conversions::to_string_t(U("invasions"))] =
        ModelBase::toJson(m_Invasions);
  }
  if (m_KuvaIsSet) {
    val[utility::conversions::to_string_t(U("kuva"))] =
        ModelBase::toJson(m_Kuva);
  }
  if (m_NewsIsSet) {
    val[utility::conversions::to_string_t(U("news"))] =
        ModelBase::toJson(m_News);
  }
  if (m_NightwaveIsSet) {
    val[utility::conversions::to_string_t(U("nightwave"))] =
        ModelBase::toJson(m_Nightwave);
  }
  if (m_PersistentEnemiesIsSet) {
    val[utility::conversions::to_string_t(U("persistentEnemies"))] =
        ModelBase::toJson(m_PersistentEnemies);
  }
  if (m_SimarisIsSet) {
    val[utility::conversions::to_string_t(U("simaris"))] =
        ModelBase::toJson(m_Simaris);
  }
  if (m_SortieIsSet) {
    val[utility::conversions::to_string_t(U("sortie"))] =
        ModelBase::toJson(m_Sortie);
  }
  if (m_SteelPathIsSet) {
    val[utility::conversions::to_string_t(U("steelPath"))] =
        ModelBase::toJson(m_SteelPath);
  }
  if (m_SyndicateMissionsIsSet) {
    val[utility::conversions::to_string_t(U("syndicateMissions"))] =
        ModelBase::toJson(m_SyndicateMissions);
  }
  if (m_VallisCycleIsSet) {
    val[utility::conversions::to_string_t(U("vallisCycle"))] =
        ModelBase::toJson(m_VallisCycle);
  }
  if (m_VoidTraderIsSet) {
    val[utility::conversions::to_string_t(U("voidTrader"))] =
        ModelBase::toJson(m_VoidTrader);
  }

  return val;
}

bool Ws::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("timestamp")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("timestamp")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTimestamp;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
      setTimestamp(refVal_setTimestamp);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("alerts")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("alerts")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Alerts> refVal_setAlerts;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAlerts);
      setAlerts(refVal_setAlerts);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("arbitration")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("arbitration")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Arbitration> refVal_setArbitration;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArbitration);
      setArbitration(refVal_setArbitration);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("archonHunt")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("archonHunt")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<ArchonHunt> refVal_setArchonHunt;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArchonHunt);
      setArchonHunt(refVal_setArchonHunt);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("cambionCycle")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("cambionCycle")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<CambionCycle> refVal_setCambionCycle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCambionCycle);
      setCambionCycle(refVal_setCambionCycle);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("cetusCycle")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("cetusCycle")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<CetusCycle> refVal_setCetusCycle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCetusCycle);
      setCetusCycle(refVal_setCetusCycle);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("conclaveChallenges")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("conclaveChallenges")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<ConclaveChallenges> refVal_setConclaveChallenges;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConclaveChallenges);
      setConclaveChallenges(refVal_setConclaveChallenges);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("constructionProgress")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("constructionProgress")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Construction> refVal_setConstructionProgress;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConstructionProgress);
      setConstructionProgress(refVal_setConstructionProgress);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("dailyDeals")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("dailyDeals")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<DailyDeals> refVal_setDailyDeals;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDailyDeals);
      setDailyDeals(refVal_setDailyDeals);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("darkSectors")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("darkSectors")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<DarkSectors> refVal_setDarkSectors;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDarkSectors);
      setDarkSectors(refVal_setDarkSectors);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("earthCycle")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("earthCycle")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<EarthCycle> refVal_setEarthCycle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEarthCycle);
      setEarthCycle(refVal_setEarthCycle);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("events")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("events")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Events> refVal_setEvents;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEvents);
      setEvents(refVal_setEvents);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("fissures")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("fissures")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Fissures> refVal_setFissures;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFissures);
      setFissures(refVal_setFissures);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("flashSales")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("flashSales")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<FlashSales> refVal_setFlashSales;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFlashSales);
      setFlashSales(refVal_setFlashSales);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("globalUpgrades")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("globalUpgrades")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<GlobalUpgrades> refVal_setGlobalUpgrades;
      ok &= ModelBase::fromJson(fieldValue, refVal_setGlobalUpgrades);
      setGlobalUpgrades(refVal_setGlobalUpgrades);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("invasions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("invasions")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Invasions> refVal_setInvasions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setInvasions);
      setInvasions(refVal_setInvasions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("kuva")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("kuva")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Arbitration>> refVal_setKuva;
      ok &= ModelBase::fromJson(fieldValue, refVal_setKuva);
      setKuva(refVal_setKuva);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("news")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("news")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<News> refVal_setNews;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNews);
      setNews(refVal_setNews);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("nightwave")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("nightwave")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Nightwave> refVal_setNightwave;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNightwave);
      setNightwave(refVal_setNightwave);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("persistentEnemies")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("persistentEnemies")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<PersistentEnemies> refVal_setPersistentEnemies;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPersistentEnemies);
      setPersistentEnemies(refVal_setPersistentEnemies);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("simaris")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("simaris")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Simaris> refVal_setSimaris;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSimaris);
      setSimaris(refVal_setSimaris);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("sortie")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("sortie")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Sortie> refVal_setSortie;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSortie);
      setSortie(refVal_setSortie);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("steelPath")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("steelPath")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SteelPath> refVal_setSteelPath;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSteelPath);
      setSteelPath(refVal_setSteelPath);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("syndicateMissions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("syndicateMissions")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SyndicateMissions> refVal_setSyndicateMissions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSyndicateMissions);
      setSyndicateMissions(refVal_setSyndicateMissions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vallisCycle")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vallisCycle")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<VallisCycle> refVal_setVallisCycle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVallisCycle);
      setVallisCycle(refVal_setVallisCycle);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("voidTrader")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("voidTrader")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<VoidTrader> refVal_setVoidTrader;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVoidTrader);
      setVoidTrader(refVal_setVoidTrader);
    }
  }
  return ok;
}

void Ws::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                     const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_TimestampIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("timestamp")),
        m_Timestamp));
  }
  if (m_AlertsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("alerts")), m_Alerts));
  }
  if (m_ArbitrationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("arbitration")),
        m_Arbitration));
  }
  if (m_ArchonHuntIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("archonHunt")),
        m_ArchonHunt));
  }
  if (m_CambionCycleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("cambionCycle")),
        m_CambionCycle));
  }
  if (m_CetusCycleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("cetusCycle")),
        m_CetusCycle));
  }
  if (m_ConclaveChallengesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("conclaveChallenges")),
        m_ConclaveChallenges));
  }
  if (m_ConstructionProgressIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("constructionProgress")),
        m_ConstructionProgress));
  }
  if (m_DailyDealsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("dailyDeals")),
        m_DailyDeals));
  }
  if (m_DarkSectorsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("darkSectors")),
        m_DarkSectors));
  }
  if (m_EarthCycleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("earthCycle")),
        m_EarthCycle));
  }
  if (m_EventsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("events")), m_Events));
  }
  if (m_FissuresIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("fissures")),
        m_Fissures));
  }
  if (m_FlashSalesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("flashSales")),
        m_FlashSales));
  }
  if (m_GlobalUpgradesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("globalUpgrades")),
        m_GlobalUpgrades));
  }
  if (m_InvasionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("invasions")),
        m_Invasions));
  }
  if (m_KuvaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("kuva")), m_Kuva));
  }
  if (m_NewsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("news")), m_News));
  }
  if (m_NightwaveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("nightwave")),
        m_Nightwave));
  }
  if (m_PersistentEnemiesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("persistentEnemies")),
        m_PersistentEnemies));
  }
  if (m_SimarisIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("simaris")),
        m_Simaris));
  }
  if (m_SortieIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("sortie")), m_Sortie));
  }
  if (m_SteelPathIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("steelPath")),
        m_SteelPath));
  }
  if (m_SyndicateMissionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("syndicateMissions")),
        m_SyndicateMissions));
  }
  if (m_VallisCycleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vallisCycle")),
        m_VallisCycle));
  }
  if (m_VoidTraderIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("voidTrader")),
        m_VoidTrader));
  }
}

bool Ws::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                       const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("timestamp")))) {
    utility::string_t refVal_setTimestamp;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("timestamp"))),
        refVal_setTimestamp);
    setTimestamp(refVal_setTimestamp);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("alerts")))) {
    std::shared_ptr<Alerts> refVal_setAlerts;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("alerts"))),
        refVal_setAlerts);
    setAlerts(refVal_setAlerts);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("arbitration")))) {
    std::shared_ptr<Arbitration> refVal_setArbitration;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("arbitration"))),
        refVal_setArbitration);
    setArbitration(refVal_setArbitration);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("archonHunt")))) {
    std::shared_ptr<ArchonHunt> refVal_setArchonHunt;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("archonHunt"))),
        refVal_setArchonHunt);
    setArchonHunt(refVal_setArchonHunt);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("cambionCycle")))) {
    std::shared_ptr<CambionCycle> refVal_setCambionCycle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("cambionCycle"))),
        refVal_setCambionCycle);
    setCambionCycle(refVal_setCambionCycle);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("cetusCycle")))) {
    std::shared_ptr<CetusCycle> refVal_setCetusCycle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("cetusCycle"))),
        refVal_setCetusCycle);
    setCetusCycle(refVal_setCetusCycle);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("conclaveChallenges")))) {
    std::shared_ptr<ConclaveChallenges> refVal_setConclaveChallenges;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("conclaveChallenges"))),
        refVal_setConclaveChallenges);
    setConclaveChallenges(refVal_setConclaveChallenges);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("constructionProgress")))) {
    std::shared_ptr<Construction> refVal_setConstructionProgress;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("constructionProgress"))),
        refVal_setConstructionProgress);
    setConstructionProgress(refVal_setConstructionProgress);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("dailyDeals")))) {
    std::shared_ptr<DailyDeals> refVal_setDailyDeals;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("dailyDeals"))),
        refVal_setDailyDeals);
    setDailyDeals(refVal_setDailyDeals);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("darkSectors")))) {
    std::shared_ptr<DarkSectors> refVal_setDarkSectors;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("darkSectors"))),
        refVal_setDarkSectors);
    setDarkSectors(refVal_setDarkSectors);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("earthCycle")))) {
    std::shared_ptr<EarthCycle> refVal_setEarthCycle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("earthCycle"))),
        refVal_setEarthCycle);
    setEarthCycle(refVal_setEarthCycle);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("events")))) {
    std::shared_ptr<Events> refVal_setEvents;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("events"))),
        refVal_setEvents);
    setEvents(refVal_setEvents);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("fissures")))) {
    std::shared_ptr<Fissures> refVal_setFissures;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("fissures"))),
        refVal_setFissures);
    setFissures(refVal_setFissures);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("flashSales")))) {
    std::shared_ptr<FlashSales> refVal_setFlashSales;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("flashSales"))),
        refVal_setFlashSales);
    setFlashSales(refVal_setFlashSales);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("globalUpgrades")))) {
    std::shared_ptr<GlobalUpgrades> refVal_setGlobalUpgrades;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("globalUpgrades"))),
        refVal_setGlobalUpgrades);
    setGlobalUpgrades(refVal_setGlobalUpgrades);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("invasions")))) {
    std::shared_ptr<Invasions> refVal_setInvasions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("invasions"))),
        refVal_setInvasions);
    setInvasions(refVal_setInvasions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("kuva")))) {
    std::vector<std::shared_ptr<Arbitration>> refVal_setKuva;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("kuva"))),
        refVal_setKuva);
    setKuva(refVal_setKuva);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("news")))) {
    std::shared_ptr<News> refVal_setNews;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("news"))),
        refVal_setNews);
    setNews(refVal_setNews);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("nightwave")))) {
    std::shared_ptr<Nightwave> refVal_setNightwave;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("nightwave"))),
        refVal_setNightwave);
    setNightwave(refVal_setNightwave);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("persistentEnemies")))) {
    std::shared_ptr<PersistentEnemies> refVal_setPersistentEnemies;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("persistentEnemies"))),
        refVal_setPersistentEnemies);
    setPersistentEnemies(refVal_setPersistentEnemies);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("simaris")))) {
    std::shared_ptr<Simaris> refVal_setSimaris;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("simaris"))),
        refVal_setSimaris);
    setSimaris(refVal_setSimaris);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("sortie")))) {
    std::shared_ptr<Sortie> refVal_setSortie;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("sortie"))),
        refVal_setSortie);
    setSortie(refVal_setSortie);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("steelPath")))) {
    std::shared_ptr<SteelPath> refVal_setSteelPath;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("steelPath"))),
        refVal_setSteelPath);
    setSteelPath(refVal_setSteelPath);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("syndicateMissions")))) {
    std::shared_ptr<SyndicateMissions> refVal_setSyndicateMissions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("syndicateMissions"))),
        refVal_setSyndicateMissions);
    setSyndicateMissions(refVal_setSyndicateMissions);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("vallisCycle")))) {
    std::shared_ptr<VallisCycle> refVal_setVallisCycle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("vallisCycle"))),
        refVal_setVallisCycle);
    setVallisCycle(refVal_setVallisCycle);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("voidTrader")))) {
    std::shared_ptr<VoidTrader> refVal_setVoidTrader;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("voidTrader"))),
        refVal_setVoidTrader);
    setVoidTrader(refVal_setVoidTrader);
  }
  return ok;
}

utility::string_t Ws::getTimestamp() const { return m_Timestamp; }

void Ws::setTimestamp(const utility::string_t &value) {
  m_Timestamp = value;
  m_TimestampIsSet = true;
}

bool Ws::timestampIsSet() const { return m_TimestampIsSet; }

void Ws::unsetTimestamp() { m_TimestampIsSet = false; }
std::shared_ptr<Alerts> Ws::getAlerts() const { return m_Alerts; }

void Ws::setAlerts(const std::shared_ptr<Alerts> &value) {
  m_Alerts = value;
  m_AlertsIsSet = true;
}

bool Ws::alertsIsSet() const { return m_AlertsIsSet; }

void Ws::unsetAlerts() { m_AlertsIsSet = false; }
std::shared_ptr<Arbitration> Ws::getArbitration() const {
  return m_Arbitration;
}

void Ws::setArbitration(const std::shared_ptr<Arbitration> &value) {
  m_Arbitration = value;
  m_ArbitrationIsSet = true;
}

bool Ws::arbitrationIsSet() const { return m_ArbitrationIsSet; }

void Ws::unsetArbitration() { m_ArbitrationIsSet = false; }
std::shared_ptr<ArchonHunt> Ws::getArchonHunt() const { return m_ArchonHunt; }

void Ws::setArchonHunt(const std::shared_ptr<ArchonHunt> &value) {
  m_ArchonHunt = value;
  m_ArchonHuntIsSet = true;
}

bool Ws::archonHuntIsSet() const { return m_ArchonHuntIsSet; }

void Ws::unsetArchonHunt() { m_ArchonHuntIsSet = false; }
std::shared_ptr<CambionCycle> Ws::getCambionCycle() const {
  return m_CambionCycle;
}

void Ws::setCambionCycle(const std::shared_ptr<CambionCycle> &value) {
  m_CambionCycle = value;
  m_CambionCycleIsSet = true;
}

bool Ws::cambionCycleIsSet() const { return m_CambionCycleIsSet; }

void Ws::unsetCambionCycle() { m_CambionCycleIsSet = false; }
std::shared_ptr<CetusCycle> Ws::getCetusCycle() const { return m_CetusCycle; }

void Ws::setCetusCycle(const std::shared_ptr<CetusCycle> &value) {
  m_CetusCycle = value;
  m_CetusCycleIsSet = true;
}

bool Ws::cetusCycleIsSet() const { return m_CetusCycleIsSet; }

void Ws::unsetCetusCycle() { m_CetusCycleIsSet = false; }
std::shared_ptr<ConclaveChallenges> Ws::getConclaveChallenges() const {
  return m_ConclaveChallenges;
}

void Ws::setConclaveChallenges(
    const std::shared_ptr<ConclaveChallenges> &value) {
  m_ConclaveChallenges = value;
  m_ConclaveChallengesIsSet = true;
}

bool Ws::conclaveChallengesIsSet() const { return m_ConclaveChallengesIsSet; }

void Ws::unsetConclaveChallenges() { m_ConclaveChallengesIsSet = false; }
std::shared_ptr<Construction> Ws::getConstructionProgress() const {
  return m_ConstructionProgress;
}

void Ws::setConstructionProgress(const std::shared_ptr<Construction> &value) {
  m_ConstructionProgress = value;
  m_ConstructionProgressIsSet = true;
}

bool Ws::constructionProgressIsSet() const {
  return m_ConstructionProgressIsSet;
}

void Ws::unsetConstructionProgress() { m_ConstructionProgressIsSet = false; }
std::shared_ptr<DailyDeals> Ws::getDailyDeals() const { return m_DailyDeals; }

void Ws::setDailyDeals(const std::shared_ptr<DailyDeals> &value) {
  m_DailyDeals = value;
  m_DailyDealsIsSet = true;
}

bool Ws::dailyDealsIsSet() const { return m_DailyDealsIsSet; }

void Ws::unsetDailyDeals() { m_DailyDealsIsSet = false; }
std::shared_ptr<DarkSectors> Ws::getDarkSectors() const {
  return m_DarkSectors;
}

void Ws::setDarkSectors(const std::shared_ptr<DarkSectors> &value) {
  m_DarkSectors = value;
  m_DarkSectorsIsSet = true;
}

bool Ws::darkSectorsIsSet() const { return m_DarkSectorsIsSet; }

void Ws::unsetDarkSectors() { m_DarkSectorsIsSet = false; }
std::shared_ptr<EarthCycle> Ws::getEarthCycle() const { return m_EarthCycle; }

void Ws::setEarthCycle(const std::shared_ptr<EarthCycle> &value) {
  m_EarthCycle = value;
  m_EarthCycleIsSet = true;
}

bool Ws::earthCycleIsSet() const { return m_EarthCycleIsSet; }

void Ws::unsetEarthCycle() { m_EarthCycleIsSet = false; }
std::shared_ptr<Events> Ws::getEvents() const { return m_Events; }

void Ws::setEvents(const std::shared_ptr<Events> &value) {
  m_Events = value;
  m_EventsIsSet = true;
}

bool Ws::eventsIsSet() const { return m_EventsIsSet; }

void Ws::unsetEvents() { m_EventsIsSet = false; }
std::shared_ptr<Fissures> Ws::getFissures() const { return m_Fissures; }

void Ws::setFissures(const std::shared_ptr<Fissures> &value) {
  m_Fissures = value;
  m_FissuresIsSet = true;
}

bool Ws::fissuresIsSet() const { return m_FissuresIsSet; }

void Ws::unsetFissures() { m_FissuresIsSet = false; }
std::shared_ptr<FlashSales> Ws::getFlashSales() const { return m_FlashSales; }

void Ws::setFlashSales(const std::shared_ptr<FlashSales> &value) {
  m_FlashSales = value;
  m_FlashSalesIsSet = true;
}

bool Ws::flashSalesIsSet() const { return m_FlashSalesIsSet; }

void Ws::unsetFlashSales() { m_FlashSalesIsSet = false; }
std::shared_ptr<GlobalUpgrades> Ws::getGlobalUpgrades() const {
  return m_GlobalUpgrades;
}

void Ws::setGlobalUpgrades(const std::shared_ptr<GlobalUpgrades> &value) {
  m_GlobalUpgrades = value;
  m_GlobalUpgradesIsSet = true;
}

bool Ws::globalUpgradesIsSet() const { return m_GlobalUpgradesIsSet; }

void Ws::unsetGlobalUpgrades() { m_GlobalUpgradesIsSet = false; }
std::shared_ptr<Invasions> Ws::getInvasions() const { return m_Invasions; }

void Ws::setInvasions(const std::shared_ptr<Invasions> &value) {
  m_Invasions = value;
  m_InvasionsIsSet = true;
}

bool Ws::invasionsIsSet() const { return m_InvasionsIsSet; }

void Ws::unsetInvasions() { m_InvasionsIsSet = false; }
std::vector<std::shared_ptr<Arbitration>> &Ws::getKuva() { return m_Kuva; }

void Ws::setKuva(const std::vector<std::shared_ptr<Arbitration>> &value) {
  m_Kuva = value;
  m_KuvaIsSet = true;
}

bool Ws::kuvaIsSet() const { return m_KuvaIsSet; }

void Ws::unsetKuva() { m_KuvaIsSet = false; }
std::shared_ptr<News> Ws::getNews() const { return m_News; }

void Ws::setNews(const std::shared_ptr<News> &value) {
  m_News = value;
  m_NewsIsSet = true;
}

bool Ws::newsIsSet() const { return m_NewsIsSet; }

void Ws::unsetNews() { m_NewsIsSet = false; }
std::shared_ptr<Nightwave> Ws::getNightwave() const { return m_Nightwave; }

void Ws::setNightwave(const std::shared_ptr<Nightwave> &value) {
  m_Nightwave = value;
  m_NightwaveIsSet = true;
}

bool Ws::nightwaveIsSet() const { return m_NightwaveIsSet; }

void Ws::unsetNightwave() { m_NightwaveIsSet = false; }
std::shared_ptr<PersistentEnemies> Ws::getPersistentEnemies() const {
  return m_PersistentEnemies;
}

void Ws::setPersistentEnemies(const std::shared_ptr<PersistentEnemies> &value) {
  m_PersistentEnemies = value;
  m_PersistentEnemiesIsSet = true;
}

bool Ws::persistentEnemiesIsSet() const { return m_PersistentEnemiesIsSet; }

void Ws::unsetPersistentEnemies() { m_PersistentEnemiesIsSet = false; }
std::shared_ptr<Simaris> Ws::getSimaris() const { return m_Simaris; }

void Ws::setSimaris(const std::shared_ptr<Simaris> &value) {
  m_Simaris = value;
  m_SimarisIsSet = true;
}

bool Ws::simarisIsSet() const { return m_SimarisIsSet; }

void Ws::unsetSimaris() { m_SimarisIsSet = false; }
std::shared_ptr<Sortie> Ws::getSortie() const { return m_Sortie; }

void Ws::setSortie(const std::shared_ptr<Sortie> &value) {
  m_Sortie = value;
  m_SortieIsSet = true;
}

bool Ws::sortieIsSet() const { return m_SortieIsSet; }

void Ws::unsetSortie() { m_SortieIsSet = false; }
std::shared_ptr<SteelPath> Ws::getSteelPath() const { return m_SteelPath; }

void Ws::setSteelPath(const std::shared_ptr<SteelPath> &value) {
  m_SteelPath = value;
  m_SteelPathIsSet = true;
}

bool Ws::steelPathIsSet() const { return m_SteelPathIsSet; }

void Ws::unsetSteelPath() { m_SteelPathIsSet = false; }
std::shared_ptr<SyndicateMissions> Ws::getSyndicateMissions() const {
  return m_SyndicateMissions;
}

void Ws::setSyndicateMissions(const std::shared_ptr<SyndicateMissions> &value) {
  m_SyndicateMissions = value;
  m_SyndicateMissionsIsSet = true;
}

bool Ws::syndicateMissionsIsSet() const { return m_SyndicateMissionsIsSet; }

void Ws::unsetSyndicateMissions() { m_SyndicateMissionsIsSet = false; }
std::shared_ptr<VallisCycle> Ws::getVallisCycle() const {
  return m_VallisCycle;
}

void Ws::setVallisCycle(const std::shared_ptr<VallisCycle> &value) {
  m_VallisCycle = value;
  m_VallisCycleIsSet = true;
}

bool Ws::vallisCycleIsSet() const { return m_VallisCycleIsSet; }

void Ws::unsetVallisCycle() { m_VallisCycleIsSet = false; }
std::shared_ptr<VoidTrader> Ws::getVoidTrader() const { return m_VoidTrader; }

void Ws::setVoidTrader(const std::shared_ptr<VoidTrader> &value) {
  m_VoidTrader = value;
  m_VoidTraderIsSet = true;
}

bool Ws::voidTraderIsSet() const { return m_VoidTraderIsSet; }

void Ws::unsetVoidTrader() { m_VoidTraderIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
