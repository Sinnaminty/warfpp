/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SolNodeSearch_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SolNodeSearch_inner::SolNodeSearch_inner() {
  m_NodesIsSet = false;
  m_KeysIsSet = false;
}

SolNodeSearch_inner::~SolNodeSearch_inner() {}

void SolNodeSearch_inner::validate() {
  // TODO: implement validation
}

web::json::value SolNodeSearch_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NodesIsSet) {
    val[utility::conversions::to_string_t(U("nodes"))] =
        ModelBase::toJson(m_Nodes);
  }
  if (m_KeysIsSet) {
    val[utility::conversions::to_string_t(U("keys"))] =
        ModelBase::toJson(m_Keys);
  }

  return val;
}

bool SolNodeSearch_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("nodes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("nodes")));
    if (!fieldValue.is_null()) {
      std::set<std::shared_ptr<SolNode_SolKey>> refVal_setNodes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
      setNodes(refVal_setNodes);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("keys")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("keys")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setKeys;
      ok &= ModelBase::fromJson(fieldValue, refVal_setKeys);
      setKeys(refVal_setKeys);
    }
  }
  return ok;
}

void SolNodeSearch_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NodesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
  }
  if (m_KeysIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("keys")), m_Keys));
  }
}

bool SolNodeSearch_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("nodes")))) {
    std::set<std::shared_ptr<SolNode_SolKey>> refVal_setNodes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("nodes"))),
        refVal_setNodes);
    setNodes(refVal_setNodes);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("keys")))) {
    std::vector<utility::string_t> refVal_setKeys;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("keys"))),
        refVal_setKeys);
    setKeys(refVal_setKeys);
  }
  return ok;
}

std::set<std::shared_ptr<SolNode_SolKey>> &SolNodeSearch_inner::getNodes() {
  return m_Nodes;
}

void SolNodeSearch_inner::setNodes(
    const std::set<std::shared_ptr<SolNode_SolKey>> &value) {
  m_Nodes = value;
  m_NodesIsSet = true;
}

bool SolNodeSearch_inner::nodesIsSet() const { return m_NodesIsSet; }

void SolNodeSearch_inner::unsetNodes() { m_NodesIsSet = false; }
std::vector<utility::string_t> &SolNodeSearch_inner::getKeys() {
  return m_Keys;
}

void SolNodeSearch_inner::setKeys(const std::vector<utility::string_t> &value) {
  m_Keys = value;
  m_KeysIsSet = true;
}

bool SolNodeSearch_inner::keysIsSet() const { return m_KeysIsSet; }

void SolNodeSearch_inner::unsetKeys() { m_KeysIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
