/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SimpleReward.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SimpleReward::SimpleReward() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_Cost = 0.0;
  m_CostIsSet = false;
}

SimpleReward::~SimpleReward() {}

void SimpleReward::validate() {
  // TODO: implement validation
}

web::json::value SimpleReward::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_CostIsSet) {
    val[utility::conversions::to_string_t(U("cost"))] =
        ModelBase::toJson(m_Cost);
  }

  return val;
}

bool SimpleReward::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("cost")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("cost")));
    if (!fieldValue.is_null()) {
      double refVal_setCost;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCost);
      setCost(refVal_setCost);
    }
  }
  return ok;
}

void SimpleReward::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_CostIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("cost")), m_Cost));
  }
}

bool SimpleReward::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("cost")))) {
    double refVal_setCost;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("cost"))),
        refVal_setCost);
    setCost(refVal_setCost);
  }
  return ok;
}

utility::string_t SimpleReward::getName() const { return m_Name; }

void SimpleReward::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool SimpleReward::nameIsSet() const { return m_NameIsSet; }

void SimpleReward::unsetName() { m_NameIsSet = false; }
double SimpleReward::getCost() const { return m_Cost; }

void SimpleReward::setCost(double value) {
  m_Cost = value;
  m_CostIsSet = true;
}

bool SimpleReward::costIsSet() const { return m_CostIsSet; }

void SimpleReward::unsetCost() { m_CostIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
