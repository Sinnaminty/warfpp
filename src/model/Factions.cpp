/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Factions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Factions::Factions() {
  m_FC_GRINEERIsSet = false;
  m_FC_CORPUSIsSet = false;
  m_FC_INFESTATIONIsSet = false;
  m_FC_CORRUPTEDIsSet = false;
  m_FC_OROKINIsSet = false;
}

Factions::~Factions() {}

void Factions::validate() {
  // TODO: implement validation
}

web::json::value Factions::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_FC_GRINEERIsSet) {
    val[utility::conversions::to_string_t(U("FC_GRINEER"))] =
        ModelBase::toJson(m_FC_GRINEER);
  }
  if (m_FC_CORPUSIsSet) {
    val[utility::conversions::to_string_t(U("FC_CORPUS"))] =
        ModelBase::toJson(m_FC_CORPUS);
  }
  if (m_FC_INFESTATIONIsSet) {
    val[utility::conversions::to_string_t(U("FC_INFESTATION"))] =
        ModelBase::toJson(m_FC_INFESTATION);
  }
  if (m_FC_CORRUPTEDIsSet) {
    val[utility::conversions::to_string_t(U("FC_CORRUPTED"))] =
        ModelBase::toJson(m_FC_CORRUPTED);
  }
  if (m_FC_OROKINIsSet) {
    val[utility::conversions::to_string_t(U("FC_OROKIN"))] =
        ModelBase::toJson(m_FC_OROKIN);
  }

  return val;
}

bool Factions::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("FC_GRINEER")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("FC_GRINEER")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCGRINEER;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFCGRINEER);
      setFCGRINEER(refVal_setFCGRINEER);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("FC_CORPUS")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("FC_CORPUS")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCCORPUS;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFCCORPUS);
      setFCCORPUS(refVal_setFCCORPUS);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("FC_INFESTATION")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("FC_INFESTATION")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCINFESTATION;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFCINFESTATION);
      setFCINFESTATION(refVal_setFCINFESTATION);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("FC_CORRUPTED")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("FC_CORRUPTED")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCCORRUPTED;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFCCORRUPTED);
      setFCCORRUPTED(refVal_setFCCORRUPTED);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("FC_OROKIN")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("FC_OROKIN")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCOROKIN;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFCOROKIN);
      setFCOROKIN(refVal_setFCOROKIN);
    }
  }
  return ok;
}

void Factions::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_FC_GRINEERIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("FC_GRINEER")),
        m_FC_GRINEER));
  }
  if (m_FC_CORPUSIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("FC_CORPUS")),
        m_FC_CORPUS));
  }
  if (m_FC_INFESTATIONIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("FC_INFESTATION")),
        m_FC_INFESTATION));
  }
  if (m_FC_CORRUPTEDIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("FC_CORRUPTED")),
        m_FC_CORRUPTED));
  }
  if (m_FC_OROKINIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("FC_OROKIN")),
        m_FC_OROKIN));
  }
}

bool Factions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("FC_GRINEER")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCGRINEER;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("FC_GRINEER"))),
        refVal_setFCGRINEER);
    setFCGRINEER(refVal_setFCGRINEER);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("FC_CORPUS")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCCORPUS;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("FC_CORPUS"))),
        refVal_setFCCORPUS);
    setFCCORPUS(refVal_setFCCORPUS);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("FC_INFESTATION")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCINFESTATION;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("FC_INFESTATION"))),
        refVal_setFCINFESTATION);
    setFCINFESTATION(refVal_setFCINFESTATION);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("FC_CORRUPTED")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCCORRUPTED;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("FC_CORRUPTED"))),
        refVal_setFCCORRUPTED);
    setFCCORRUPTED(refVal_setFCCORRUPTED);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("FC_OROKIN")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setFCOROKIN;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("FC_OROKIN"))),
        refVal_setFCOROKIN);
    setFCOROKIN(refVal_setFCOROKIN);
  }
  return ok;
}

std::shared_ptr<Conclave_modes_PVPMODE_ALL> Factions::getFCGRINEER() const {
  return m_FC_GRINEER;
}

void Factions::setFCGRINEER(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_FC_GRINEER = value;
  m_FC_GRINEERIsSet = true;
}

bool Factions::fCGRINEERIsSet() const { return m_FC_GRINEERIsSet; }

void Factions::unsetFC_GRINEER() { m_FC_GRINEERIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> Factions::getFCCORPUS() const {
  return m_FC_CORPUS;
}

void Factions::setFCCORPUS(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_FC_CORPUS = value;
  m_FC_CORPUSIsSet = true;
}

bool Factions::fCCORPUSIsSet() const { return m_FC_CORPUSIsSet; }

void Factions::unsetFC_CORPUS() { m_FC_CORPUSIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> Factions::getFCINFESTATION() const {
  return m_FC_INFESTATION;
}

void Factions::setFCINFESTATION(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_FC_INFESTATION = value;
  m_FC_INFESTATIONIsSet = true;
}

bool Factions::fCINFESTATIONIsSet() const { return m_FC_INFESTATIONIsSet; }

void Factions::unsetFC_INFESTATION() { m_FC_INFESTATIONIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> Factions::getFCCORRUPTED() const {
  return m_FC_CORRUPTED;
}

void Factions::setFCCORRUPTED(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_FC_CORRUPTED = value;
  m_FC_CORRUPTEDIsSet = true;
}

bool Factions::fCCORRUPTEDIsSet() const { return m_FC_CORRUPTEDIsSet; }

void Factions::unsetFC_CORRUPTED() { m_FC_CORRUPTEDIsSet = false; }
std::shared_ptr<Conclave_modes_PVPMODE_ALL> Factions::getFCOROKIN() const {
  return m_FC_OROKIN;
}

void Factions::setFCOROKIN(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_FC_OROKIN = value;
  m_FC_OROKINIsSet = true;
}

bool Factions::fCOROKINIsSet() const { return m_FC_OROKINIsSet; }

void Factions::unsetFC_OROKIN() { m_FC_OROKINIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
