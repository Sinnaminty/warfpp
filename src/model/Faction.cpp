/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Faction.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

Faction::eFaction toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("Orokin")))
    return Faction::eFaction::Faction_OROKIN;
  if (val == utility::conversions::to_string_t(U("Corrupted")))
    return Faction::eFaction::Faction_CORRUPTED;
  if (val == utility::conversions::to_string_t(U("Infested")))
    return Faction::eFaction::Faction_INFESTED;
  if (val == utility::conversions::to_string_t(U("Corpus")))
    return Faction::eFaction::Faction_CORPUS;
  if (val == utility::conversions::to_string_t(U("Grineer")))
    return Faction::eFaction::Faction_GRINEER;
  if (val == utility::conversions::to_string_t(U("Tenno")))
    return Faction::eFaction::Faction_TENNO;
  if (val == utility::conversions::to_string_t(U("Narmer")))
    return Faction::eFaction::Faction_NARMER;
  return {};
}

EnumUnderlyingType fromEnum(Faction::eFaction e) {
  switch (e) {
  case Faction::eFaction::Faction_OROKIN:
    return U("Orokin");
  case Faction::eFaction::Faction_CORRUPTED:
    return U("Corrupted");
  case Faction::eFaction::Faction_INFESTED:
    return U("Infested");
  case Faction::eFaction::Faction_CORPUS:
    return U("Corpus");
  case Faction::eFaction::Faction_GRINEER:
    return U("Grineer");
  case Faction::eFaction::Faction_TENNO:
    return U("Tenno");
  case Faction::eFaction::Faction_NARMER:
    return U("Narmer");
  default:
    break;
  }
  return {};
}
} // namespace

Faction::Faction() {}

Faction::~Faction() {}

void Faction::validate() {
  // TODO: implement validation
}

web::json::value Faction::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool Faction::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void Faction::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                          const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Faction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

Faction::eFaction Faction::getValue() const { return m_value; }

void Faction::setValue(Faction::eFaction const value) { m_value = value; }

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
