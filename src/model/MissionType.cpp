/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/MissionType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

MissionType::eMissionType toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("Ancient Retribution")))
    return MissionType::eMissionType::MissionType_ANCIENT_RETRIBUTION;
  if (val == utility::conversions::to_string_t(U("Arena")))
    return MissionType::eMissionType::MissionType_ARENA;
  if (val == utility::conversions::to_string_t(U("Assassination")))
    return MissionType::eMissionType::MissionType_ASSASSINATION;
  if (val == utility::conversions::to_string_t(U("Assault")))
    return MissionType::eMissionType::MissionType_ASSAULT;
  if (val == utility::conversions::to_string_t(U("Capture")))
    return MissionType::eMissionType::MissionType_CAPTURE;
  if (val == utility::conversions::to_string_t(U("Conclave")))
    return MissionType::eMissionType::MissionType_CONCLAVE;
  if (val == utility::conversions::to_string_t(U("Dark Sector Defection")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_DEFECTION;
  if (val == utility::conversions::to_string_t(U("Dark Sector Defense")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_DEFENSE;
  if (val == utility::conversions::to_string_t(U("Dark Sector Disruption")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_DISRUPTION;
  if (val == utility::conversions::to_string_t(U("Dark Sector Excavation")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_EXCAVATION;
  if (val == utility::conversions::to_string_t(U("Dark Sector Sabotage")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_SABOTAGE;
  if (val == utility::conversions::to_string_t(U("Dark Sector Survival")))
    return MissionType::eMissionType::MissionType_DARK_SECTOR_SURVIVAL;
  if (val == utility::conversions::to_string_t(U("Defense")))
    return MissionType::eMissionType::MissionType_DEFENSE;
  if (val == utility::conversions::to_string_t(U("Disruption")))
    return MissionType::eMissionType::MissionType_DISRUPTION;
  if (val == utility::conversions::to_string_t(U("Excavation")))
    return MissionType::eMissionType::MissionType_EXCAVATION;
  if (val == utility::conversions::to_string_t(U("Extermination (Archwing)")))
    return MissionType::eMissionType::MissionType_EXTERMINATION_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Extermination")))
    return MissionType::eMissionType::MissionType_EXTERMINATION;
  if (val == utility::conversions::to_string_t(U("Free Roam")))
    return MissionType::eMissionType::MissionType_FREE_ROAM;
  if (val == utility::conversions::to_string_t(U("Hijack")))
    return MissionType::eMissionType::MissionType_HIJACK;
  if (val == utility::conversions::to_string_t(U("Hive")))
    return MissionType::eMissionType::MissionType_HIVE;
  if (val == utility::conversions::to_string_t(U("Hive Sabotage")))
    return MissionType::eMissionType::MissionType_HIVE_SABOTAGE;
  if (val == utility::conversions::to_string_t(U("Interception")))
    return MissionType::eMissionType::MissionType_INTERCEPTION;
  if (val == utility::conversions::to_string_t(U("Interception (Archwing)")))
    return MissionType::eMissionType::MissionType_INTERCEPTION_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Mobile Defense")))
    return MissionType::eMissionType::MissionType_MOBILE_DEFENSE;
  if (val == utility::conversions::to_string_t(U("Mobile Defense (Archwing)")))
    return MissionType::eMissionType::MissionType_MOBILE_DEFENSE_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Orokin Sabotage")))
    return MissionType::eMissionType::MissionType_OROKIN_SABOTAGE;
  if (val == utility::conversions::to_string_t(U("Orphix")))
    return MissionType::eMissionType::MissionType_ORPHIX;
  if (val == utility::conversions::to_string_t(U("Pursuit (Archwing)")))
    return MissionType::eMissionType::MissionType_PURSUIT_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Relay")))
    return MissionType::eMissionType::MissionType_RELAY;
  if (val == utility::conversions::to_string_t(U("Rescue")))
    return MissionType::eMissionType::MissionType_RESCUE;
  if (val == utility::conversions::to_string_t(U("Rush (Archwing)")))
    return MissionType::eMissionType::MissionType_RUSH_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Sabotage")))
    return MissionType::eMissionType::MissionType_SABOTAGE;
  if (val == utility::conversions::to_string_t(U("Sabotage (Archwing)")))
    return MissionType::eMissionType::MissionType_SABOTAGE_ARCHWING_;
  if (val == utility::conversions::to_string_t(U("Skirmish")))
    return MissionType::eMissionType::MissionType_SKIRMISH;
  if (val == utility::conversions::to_string_t(U("Spy")))
    return MissionType::eMissionType::MissionType_SPY;
  if (val == utility::conversions::to_string_t(U("Survival")))
    return MissionType::eMissionType::MissionType_SURVIVAL;
  if (val == utility::conversions::to_string_t(U("Volatile")))
    return MissionType::eMissionType::MissionType_VOLATILE;
  return {};
}

EnumUnderlyingType fromEnum(MissionType::eMissionType e) {
  switch (e) {
  case MissionType::eMissionType::MissionType_ANCIENT_RETRIBUTION:
    return U("Ancient Retribution");
  case MissionType::eMissionType::MissionType_ARENA:
    return U("Arena");
  case MissionType::eMissionType::MissionType_ASSASSINATION:
    return U("Assassination");
  case MissionType::eMissionType::MissionType_ASSAULT:
    return U("Assault");
  case MissionType::eMissionType::MissionType_CAPTURE:
    return U("Capture");
  case MissionType::eMissionType::MissionType_CONCLAVE:
    return U("Conclave");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_DEFECTION:
    return U("Dark Sector Defection");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_DEFENSE:
    return U("Dark Sector Defense");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_DISRUPTION:
    return U("Dark Sector Disruption");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_EXCAVATION:
    return U("Dark Sector Excavation");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_SABOTAGE:
    return U("Dark Sector Sabotage");
  case MissionType::eMissionType::MissionType_DARK_SECTOR_SURVIVAL:
    return U("Dark Sector Survival");
  case MissionType::eMissionType::MissionType_DEFENSE:
    return U("Defense");
  case MissionType::eMissionType::MissionType_DISRUPTION:
    return U("Disruption");
  case MissionType::eMissionType::MissionType_EXCAVATION:
    return U("Excavation");
  case MissionType::eMissionType::MissionType_EXTERMINATION_ARCHWING_:
    return U("Extermination (Archwing)");
  case MissionType::eMissionType::MissionType_EXTERMINATION:
    return U("Extermination");
  case MissionType::eMissionType::MissionType_FREE_ROAM:
    return U("Free Roam");
  case MissionType::eMissionType::MissionType_HIJACK:
    return U("Hijack");
  case MissionType::eMissionType::MissionType_HIVE:
    return U("Hive");
  case MissionType::eMissionType::MissionType_HIVE_SABOTAGE:
    return U("Hive Sabotage");
  case MissionType::eMissionType::MissionType_INTERCEPTION:
    return U("Interception");
  case MissionType::eMissionType::MissionType_INTERCEPTION_ARCHWING_:
    return U("Interception (Archwing)");
  case MissionType::eMissionType::MissionType_MOBILE_DEFENSE:
    return U("Mobile Defense");
  case MissionType::eMissionType::MissionType_MOBILE_DEFENSE_ARCHWING_:
    return U("Mobile Defense (Archwing)");
  case MissionType::eMissionType::MissionType_OROKIN_SABOTAGE:
    return U("Orokin Sabotage");
  case MissionType::eMissionType::MissionType_ORPHIX:
    return U("Orphix");
  case MissionType::eMissionType::MissionType_PURSUIT_ARCHWING_:
    return U("Pursuit (Archwing)");
  case MissionType::eMissionType::MissionType_RELAY:
    return U("Relay");
  case MissionType::eMissionType::MissionType_RESCUE:
    return U("Rescue");
  case MissionType::eMissionType::MissionType_RUSH_ARCHWING_:
    return U("Rush (Archwing)");
  case MissionType::eMissionType::MissionType_SABOTAGE:
    return U("Sabotage");
  case MissionType::eMissionType::MissionType_SABOTAGE_ARCHWING_:
    return U("Sabotage (Archwing)");
  case MissionType::eMissionType::MissionType_SKIRMISH:
    return U("Skirmish");
  case MissionType::eMissionType::MissionType_SPY:
    return U("Spy");
  case MissionType::eMissionType::MissionType_SURVIVAL:
    return U("Survival");
  case MissionType::eMissionType::MissionType_VOLATILE:
    return U("Volatile");
  default:
    break;
  }
  return {};
}
} // namespace

MissionType::MissionType() {}

MissionType::~MissionType() {}

void MissionType::validate() {
  // TODO: implement validation
}

web::json::value MissionType::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool MissionType::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void MissionType::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool MissionType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

MissionType::eMissionType MissionType::getValue() const { return m_value; }

void MissionType::setValue(MissionType::eMissionType const value) {
  m_value = value;
}

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
