/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SteelPath.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SteelPath::SteelPath() {
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_CurrentRewardIsSet = false;
  m_Remaining = utility::conversions::to_string_t("");
  m_RemainingIsSet = false;
  m_RotationIsSet = false;
  m_EvergreensIsSet = false;
  m_IncursionsIsSet = false;
}

SteelPath::~SteelPath() {}

void SteelPath::validate() {
  // TODO: implement validation
}

web::json::value SteelPath::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_CurrentRewardIsSet) {
    val[utility::conversions::to_string_t(U("currentReward"))] =
        ModelBase::toJson(m_CurrentReward);
  }
  if (m_RemainingIsSet) {
    val[utility::conversions::to_string_t(U("remaining"))] =
        ModelBase::toJson(m_Remaining);
  }
  if (m_RotationIsSet) {
    val[utility::conversions::to_string_t(U("rotation"))] =
        ModelBase::toJson(m_Rotation);
  }
  if (m_EvergreensIsSet) {
    val[utility::conversions::to_string_t(U("evergreens"))] =
        ModelBase::toJson(m_Evergreens);
  }
  if (m_IncursionsIsSet) {
    val[utility::conversions::to_string_t(U("incursions"))] =
        ModelBase::toJson(m_Incursions);
  }

  return val;
}

bool SteelPath::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("currentReward")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("currentReward")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SimpleReward> refVal_setCurrentReward;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentReward);
      setCurrentReward(refVal_setCurrentReward);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("remaining")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("remaining")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRemaining;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRemaining);
      setRemaining(refVal_setRemaining);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rotation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rotation")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<SimpleReward>> refVal_setRotation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRotation);
      setRotation(refVal_setRotation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("evergreens")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("evergreens")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<SimpleReward>> refVal_setEvergreens;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEvergreens);
      setEvergreens(refVal_setEvergreens);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("incursions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("incursions")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<WorldstateObject> refVal_setIncursions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIncursions);
      setIncursions(refVal_setIncursions);
    }
  }
  return ok;
}

void SteelPath::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_CurrentRewardIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("currentReward")),
        m_CurrentReward));
  }
  if (m_RemainingIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("remaining")),
        m_Remaining));
  }
  if (m_RotationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rotation")),
        m_Rotation));
  }
  if (m_EvergreensIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("evergreens")),
        m_Evergreens));
  }
  if (m_IncursionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("incursions")),
        m_Incursions));
  }
}

bool SteelPath::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("currentReward")))) {
    std::shared_ptr<SimpleReward> refVal_setCurrentReward;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("currentReward"))),
        refVal_setCurrentReward);
    setCurrentReward(refVal_setCurrentReward);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("remaining")))) {
    utility::string_t refVal_setRemaining;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("remaining"))),
        refVal_setRemaining);
    setRemaining(refVal_setRemaining);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("rotation")))) {
    std::vector<std::shared_ptr<SimpleReward>> refVal_setRotation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("rotation"))),
        refVal_setRotation);
    setRotation(refVal_setRotation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("evergreens")))) {
    std::vector<std::shared_ptr<SimpleReward>> refVal_setEvergreens;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("evergreens"))),
        refVal_setEvergreens);
    setEvergreens(refVal_setEvergreens);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("incursions")))) {
    std::shared_ptr<WorldstateObject> refVal_setIncursions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("incursions"))),
        refVal_setIncursions);
    setIncursions(refVal_setIncursions);
  }
  return ok;
}

utility::datetime SteelPath::getActivation() const { return m_Activation; }

void SteelPath::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool SteelPath::activationIsSet() const { return m_ActivationIsSet; }

void SteelPath::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime SteelPath::getExpiry() const { return m_Expiry; }

void SteelPath::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool SteelPath::expiryIsSet() const { return m_ExpiryIsSet; }

void SteelPath::unsetExpiry() { m_ExpiryIsSet = false; }
std::shared_ptr<SimpleReward> SteelPath::getCurrentReward() const {
  return m_CurrentReward;
}

void SteelPath::setCurrentReward(const std::shared_ptr<SimpleReward> &value) {
  m_CurrentReward = value;
  m_CurrentRewardIsSet = true;
}

bool SteelPath::currentRewardIsSet() const { return m_CurrentRewardIsSet; }

void SteelPath::unsetCurrentReward() { m_CurrentRewardIsSet = false; }
utility::string_t SteelPath::getRemaining() const { return m_Remaining; }

void SteelPath::setRemaining(const utility::string_t &value) {
  m_Remaining = value;
  m_RemainingIsSet = true;
}

bool SteelPath::remainingIsSet() const { return m_RemainingIsSet; }

void SteelPath::unsetRemaining() { m_RemainingIsSet = false; }
std::vector<std::shared_ptr<SimpleReward>> &SteelPath::getRotation() {
  return m_Rotation;
}

void SteelPath::setRotation(
    const std::vector<std::shared_ptr<SimpleReward>> &value) {
  m_Rotation = value;
  m_RotationIsSet = true;
}

bool SteelPath::rotationIsSet() const { return m_RotationIsSet; }

void SteelPath::unsetRotation() { m_RotationIsSet = false; }
std::vector<std::shared_ptr<SimpleReward>> &SteelPath::getEvergreens() {
  return m_Evergreens;
}

void SteelPath::setEvergreens(
    const std::vector<std::shared_ptr<SimpleReward>> &value) {
  m_Evergreens = value;
  m_EvergreensIsSet = true;
}

bool SteelPath::evergreensIsSet() const { return m_EvergreensIsSet; }

void SteelPath::unsetEvergreens() { m_EvergreensIsSet = false; }
std::shared_ptr<WorldstateObject> SteelPath::getIncursions() const {
  return m_Incursions;
}

void SteelPath::setIncursions(const std::shared_ptr<WorldstateObject> &value) {
  m_Incursions = value;
  m_IncursionsIsSet = true;
}

bool SteelPath::incursionsIsSet() const { return m_IncursionsIsSet; }

void SteelPath::unsetIncursions() { m_IncursionsIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
