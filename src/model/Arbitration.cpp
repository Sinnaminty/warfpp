/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Arbitration.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Arbitration::Arbitration() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_StartString = utility::conversions::to_string_t("");
  m_StartStringIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_Node = utility::conversions::to_string_t("");
  m_NodeIsSet = false;
  m_EnemyIsSet = false;
  m_EnemyKeyIsSet = false;
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_TypeKeyIsSet = false;
  m_Archwing = false;
  m_ArchwingIsSet = false;
  m_Sharkwing = false;
  m_SharkwingIsSet = false;
}

Arbitration::~Arbitration() {}

void Arbitration::validate() {
  // TODO: implement validation
}

web::json::value Arbitration::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_StartStringIsSet) {
    val[utility::conversions::to_string_t(U("startString"))] =
        ModelBase::toJson(m_StartString);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_NodeIsSet) {
    val[utility::conversions::to_string_t(U("node"))] =
        ModelBase::toJson(m_Node);
  }
  if (m_EnemyIsSet) {
    val[utility::conversions::to_string_t(U("enemy"))] =
        ModelBase::toJson(m_Enemy);
  }
  if (m_EnemyKeyIsSet) {
    val[utility::conversions::to_string_t(U("enemyKey"))] =
        ModelBase::toJson(m_EnemyKey);
  }
  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_TypeKeyIsSet) {
    val[utility::conversions::to_string_t(U("typeKey"))] =
        ModelBase::toJson(m_TypeKey);
  }
  if (m_ArchwingIsSet) {
    val[utility::conversions::to_string_t(U("archwing"))] =
        ModelBase::toJson(m_Archwing);
  }
  if (m_SharkwingIsSet) {
    val[utility::conversions::to_string_t(U("sharkwing"))] =
        ModelBase::toJson(m_Sharkwing);
  }

  return val;
}

bool Arbitration::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("startString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("startString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStartString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStartString);
      setStartString(refVal_setStartString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("node")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("node")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
      setNode(refVal_setNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("enemy")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("enemy")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Arbitration_allOf_enemy> refVal_setEnemy;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnemy);
      setEnemy(refVal_setEnemy);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("enemyKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("enemyKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Arbitration_allOf_enemyKey> refVal_setEnemyKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnemyKey);
      setEnemyKey(refVal_setEnemyKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("typeKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("typeKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Arbitration_allOf_typeKey> refVal_setTypeKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTypeKey);
      setTypeKey(refVal_setTypeKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("archwing")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("archwing")));
    if (!fieldValue.is_null()) {
      bool refVal_setArchwing;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArchwing);
      setArchwing(refVal_setArchwing);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("sharkwing")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("sharkwing")));
    if (!fieldValue.is_null()) {
      bool refVal_setSharkwing;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSharkwing);
      setSharkwing(refVal_setSharkwing);
    }
  }
  return ok;
}

void Arbitration::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_StartStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("startString")),
        m_StartString));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_NodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
  }
  if (m_EnemyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("enemy")), m_Enemy));
  }
  if (m_EnemyKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("enemyKey")),
        m_EnemyKey));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_TypeKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("typeKey")),
        m_TypeKey));
  }
  if (m_ArchwingIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("archwing")),
        m_Archwing));
  }
  if (m_SharkwingIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("sharkwing")),
        m_Sharkwing));
  }
}

bool Arbitration::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("startString")))) {
    utility::string_t refVal_setStartString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("startString"))),
        refVal_setStartString);
    setStartString(refVal_setStartString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("node")))) {
    utility::string_t refVal_setNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("node"))),
        refVal_setNode);
    setNode(refVal_setNode);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("enemy")))) {
    std::shared_ptr<Arbitration_allOf_enemy> refVal_setEnemy;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("enemy"))),
        refVal_setEnemy);
    setEnemy(refVal_setEnemy);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("enemyKey")))) {
    std::shared_ptr<Arbitration_allOf_enemyKey> refVal_setEnemyKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("enemyKey"))),
        refVal_setEnemyKey);
    setEnemyKey(refVal_setEnemyKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("typeKey")))) {
    std::shared_ptr<Arbitration_allOf_typeKey> refVal_setTypeKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("typeKey"))),
        refVal_setTypeKey);
    setTypeKey(refVal_setTypeKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("archwing")))) {
    bool refVal_setArchwing;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("archwing"))),
        refVal_setArchwing);
    setArchwing(refVal_setArchwing);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("sharkwing")))) {
    bool refVal_setSharkwing;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("sharkwing"))),
        refVal_setSharkwing);
    setSharkwing(refVal_setSharkwing);
  }
  return ok;
}

utility::string_t Arbitration::getId() const { return m_Id; }

void Arbitration::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool Arbitration::idIsSet() const { return m_IdIsSet; }

void Arbitration::unsetId() { m_IdIsSet = false; }
utility::datetime Arbitration::getActivation() const { return m_Activation; }

void Arbitration::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool Arbitration::activationIsSet() const { return m_ActivationIsSet; }

void Arbitration::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime Arbitration::getExpiry() const { return m_Expiry; }

void Arbitration::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool Arbitration::expiryIsSet() const { return m_ExpiryIsSet; }

void Arbitration::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t Arbitration::getStartString() const { return m_StartString; }

void Arbitration::setStartString(const utility::string_t &value) {
  m_StartString = value;
  m_StartStringIsSet = true;
}

bool Arbitration::startStringIsSet() const { return m_StartStringIsSet; }

void Arbitration::unsetStartString() { m_StartStringIsSet = false; }
bool Arbitration::isActive() const { return m_Active; }

void Arbitration::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool Arbitration::activeIsSet() const { return m_ActiveIsSet; }

void Arbitration::unsetActive() { m_ActiveIsSet = false; }
utility::string_t Arbitration::getNode() const { return m_Node; }

void Arbitration::setNode(const utility::string_t &value) {
  m_Node = value;
  m_NodeIsSet = true;
}

bool Arbitration::nodeIsSet() const { return m_NodeIsSet; }

void Arbitration::unsetNode() { m_NodeIsSet = false; }
std::shared_ptr<Arbitration_allOf_enemy> Arbitration::getEnemy() const {
  return m_Enemy;
}

void Arbitration::setEnemy(
    const std::shared_ptr<Arbitration_allOf_enemy> &value) {
  m_Enemy = value;
  m_EnemyIsSet = true;
}

bool Arbitration::enemyIsSet() const { return m_EnemyIsSet; }

void Arbitration::unsetEnemy() { m_EnemyIsSet = false; }
std::shared_ptr<Arbitration_allOf_enemyKey> Arbitration::getEnemyKey() const {
  return m_EnemyKey;
}

void Arbitration::setEnemyKey(
    const std::shared_ptr<Arbitration_allOf_enemyKey> &value) {
  m_EnemyKey = value;
  m_EnemyKeyIsSet = true;
}

bool Arbitration::enemyKeyIsSet() const { return m_EnemyKeyIsSet; }

void Arbitration::unsetEnemyKey() { m_EnemyKeyIsSet = false; }
utility::string_t Arbitration::getType() const { return m_Type; }

void Arbitration::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool Arbitration::typeIsSet() const { return m_TypeIsSet; }

void Arbitration::unsetType() { m_TypeIsSet = false; }
std::shared_ptr<Arbitration_allOf_typeKey> Arbitration::getTypeKey() const {
  return m_TypeKey;
}

void Arbitration::setTypeKey(
    const std::shared_ptr<Arbitration_allOf_typeKey> &value) {
  m_TypeKey = value;
  m_TypeKeyIsSet = true;
}

bool Arbitration::typeKeyIsSet() const { return m_TypeKeyIsSet; }

void Arbitration::unsetTypeKey() { m_TypeKeyIsSet = false; }
bool Arbitration::isArchwing() const { return m_Archwing; }

void Arbitration::setArchwing(bool value) {
  m_Archwing = value;
  m_ArchwingIsSet = true;
}

bool Arbitration::archwingIsSet() const { return m_ArchwingIsSet; }

void Arbitration::unsetArchwing() { m_ArchwingIsSet = false; }
bool Arbitration::isSharkwing() const { return m_Sharkwing; }

void Arbitration::setSharkwing(bool value) {
  m_Sharkwing = value;
  m_SharkwingIsSet = true;
}

bool Arbitration::sharkwingIsSet() const { return m_SharkwingIsSet; }

void Arbitration::unsetSharkwing() { m_SharkwingIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
