/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SyndicateMission.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SyndicateMission::SyndicateMission() {
  m_NodesIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_JobsIsSet = false;
  m_SyndicateIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
}

SyndicateMission::~SyndicateMission() {}

void SyndicateMission::validate() {
  // TODO: implement validation
}

web::json::value SyndicateMission::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NodesIsSet) {
    val[utility::conversions::to_string_t(U("nodes"))] =
        ModelBase::toJson(m_Nodes);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_JobsIsSet) {
    val[utility::conversions::to_string_t(U("jobs"))] =
        ModelBase::toJson(m_Jobs);
  }
  if (m_SyndicateIsSet) {
    val[utility::conversions::to_string_t(U("syndicate"))] =
        ModelBase::toJson(m_Syndicate);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }

  return val;
}

bool SyndicateMission::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("nodes")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("nodes")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setNodes;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
      setNodes(refVal_setNodes);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("jobs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("jobs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<SyndicateJob>> refVal_setJobs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setJobs);
      setJobs(refVal_setJobs);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("syndicate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("syndicate")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Syndicate> refVal_setSyndicate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSyndicate);
      setSyndicate(refVal_setSyndicate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  return ok;
}

void SyndicateMission::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NodesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_JobsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("jobs")), m_Jobs));
  }
  if (m_SyndicateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("syndicate")),
        m_Syndicate));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
}

bool SyndicateMission::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("nodes")))) {
    std::vector<utility::string_t> refVal_setNodes;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("nodes"))),
        refVal_setNodes);
    setNodes(refVal_setNodes);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("jobs")))) {
    std::vector<std::shared_ptr<SyndicateJob>> refVal_setJobs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("jobs"))),
        refVal_setJobs);
    setJobs(refVal_setJobs);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("syndicate")))) {
    std::shared_ptr<Syndicate> refVal_setSyndicate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("syndicate"))),
        refVal_setSyndicate);
    setSyndicate(refVal_setSyndicate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  return ok;
}

std::vector<utility::string_t> &SyndicateMission::getNodes() { return m_Nodes; }

void SyndicateMission::setNodes(const std::vector<utility::string_t> &value) {
  m_Nodes = value;
  m_NodesIsSet = true;
}

bool SyndicateMission::nodesIsSet() const { return m_NodesIsSet; }

void SyndicateMission::unsetNodes() { m_NodesIsSet = false; }
utility::string_t SyndicateMission::getEta() const { return m_Eta; }

void SyndicateMission::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool SyndicateMission::etaIsSet() const { return m_EtaIsSet; }

void SyndicateMission::unsetEta() { m_EtaIsSet = false; }
std::vector<std::shared_ptr<SyndicateJob>> &SyndicateMission::getJobs() {
  return m_Jobs;
}

void SyndicateMission::setJobs(
    const std::vector<std::shared_ptr<SyndicateJob>> &value) {
  m_Jobs = value;
  m_JobsIsSet = true;
}

bool SyndicateMission::jobsIsSet() const { return m_JobsIsSet; }

void SyndicateMission::unsetJobs() { m_JobsIsSet = false; }
std::shared_ptr<Syndicate> SyndicateMission::getSyndicate() const {
  return m_Syndicate;
}

void SyndicateMission::setSyndicate(const std::shared_ptr<Syndicate> &value) {
  m_Syndicate = value;
  m_SyndicateIsSet = true;
}

bool SyndicateMission::syndicateIsSet() const { return m_SyndicateIsSet; }

void SyndicateMission::unsetSyndicate() { m_SyndicateIsSet = false; }
utility::string_t SyndicateMission::getId() const { return m_Id; }

void SyndicateMission::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool SyndicateMission::idIsSet() const { return m_IdIsSet; }

void SyndicateMission::unsetId() { m_IdIsSet = false; }
utility::datetime SyndicateMission::getExpiry() const { return m_Expiry; }

void SyndicateMission::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool SyndicateMission::expiryIsSet() const { return m_ExpiryIsSet; }

void SyndicateMission::unsetExpiry() { m_ExpiryIsSet = false; }
utility::datetime SyndicateMission::getActivation() const {
  return m_Activation;
}

void SyndicateMission::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool SyndicateMission::activationIsSet() const { return m_ActivationIsSet; }

void SyndicateMission::unsetActivation() { m_ActivationIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
