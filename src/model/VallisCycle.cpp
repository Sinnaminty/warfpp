/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/VallisCycle.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

VallisCycle::VallisCycle() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Expiry = utility::conversions::to_string_t("");
  m_ExpiryIsSet = false;
  m_TimeLeft = utility::conversions::to_string_t("");
  m_TimeLeftIsSet = false;
  m_IsWarm = false;
  m_IsWarmIsSet = false;
}

VallisCycle::~VallisCycle() {}

void VallisCycle::validate() {
  // TODO: implement validation
}

web::json::value VallisCycle::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_TimeLeftIsSet) {
    val[utility::conversions::to_string_t(U("timeLeft"))] =
        ModelBase::toJson(m_TimeLeft);
  }
  if (m_IsWarmIsSet) {
    val[utility::conversions::to_string_t(U("isWarm"))] =
        ModelBase::toJson(m_IsWarm);
  }

  return val;
}

bool VallisCycle::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("timeLeft")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("timeLeft")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTimeLeft;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLeft);
      setTimeLeft(refVal_setTimeLeft);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isWarm")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isWarm")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsWarm;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsWarm);
      setIsWarm(refVal_setIsWarm);
    }
  }
  return ok;
}

void VallisCycle::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_TimeLeftIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("timeLeft")),
        m_TimeLeft));
  }
  if (m_IsWarmIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isWarm")), m_IsWarm));
  }
}

bool VallisCycle::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::string_t refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("timeLeft")))) {
    utility::string_t refVal_setTimeLeft;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("timeLeft"))),
        refVal_setTimeLeft);
    setTimeLeft(refVal_setTimeLeft);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("isWarm")))) {
    bool refVal_setIsWarm;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("isWarm"))),
        refVal_setIsWarm);
    setIsWarm(refVal_setIsWarm);
  }
  return ok;
}

utility::string_t VallisCycle::getId() const { return m_Id; }

void VallisCycle::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool VallisCycle::idIsSet() const { return m_IdIsSet; }

void VallisCycle::unsetId() { m_IdIsSet = false; }
utility::string_t VallisCycle::getExpiry() const { return m_Expiry; }

void VallisCycle::setExpiry(const utility::string_t &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool VallisCycle::expiryIsSet() const { return m_ExpiryIsSet; }

void VallisCycle::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t VallisCycle::getTimeLeft() const { return m_TimeLeft; }

void VallisCycle::setTimeLeft(const utility::string_t &value) {
  m_TimeLeft = value;
  m_TimeLeftIsSet = true;
}

bool VallisCycle::timeLeftIsSet() const { return m_TimeLeftIsSet; }

void VallisCycle::unsetTimeLeft() { m_TimeLeftIsSet = false; }
bool VallisCycle::isIsWarm() const { return m_IsWarm; }

void VallisCycle::setIsWarm(bool value) {
  m_IsWarm = value;
  m_IsWarmIsSet = true;
}

bool VallisCycle::isWarmIsSet() const { return m_IsWarmIsSet; }

void VallisCycle::unsetIsWarm() { m_IsWarmIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
