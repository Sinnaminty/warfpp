/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SortieData_endStates_inner_regions_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SortieData_endStates_inner_regions_inner::
    SortieData_endStates_inner_regions_inner() {
  m_MissionsIsSet = false;
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
}

SortieData_endStates_inner_regions_inner::
    ~SortieData_endStates_inner_regions_inner() {}

void SortieData_endStates_inner_regions_inner::validate() {
  // TODO: implement validation
}

web::json::value SortieData_endStates_inner_regions_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_MissionsIsSet) {
    val[utility::conversions::to_string_t(U("missions"))] =
        ModelBase::toJson(m_Missions);
  }
  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }

  return val;
}

bool SortieData_endStates_inner_regions_inner::fromJson(
    const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("missions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("missions")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setMissions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMissions);
      setMissions(refVal_setMissions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  return ok;
}

void SortieData_endStates_inner_regions_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_MissionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("missions")),
        m_Missions));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
}

bool SortieData_endStates_inner_regions_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("missions")))) {
    std::vector<utility::string_t> refVal_setMissions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("missions"))),
        refVal_setMissions);
    setMissions(refVal_setMissions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  return ok;
}

std::vector<utility::string_t> &
SortieData_endStates_inner_regions_inner::getMissions() {
  return m_Missions;
}

void SortieData_endStates_inner_regions_inner::setMissions(
    const std::vector<utility::string_t> &value) {
  m_Missions = value;
  m_MissionsIsSet = true;
}

bool SortieData_endStates_inner_regions_inner::missionsIsSet() const {
  return m_MissionsIsSet;
}

void SortieData_endStates_inner_regions_inner::unsetMissions() {
  m_MissionsIsSet = false;
}
utility::string_t SortieData_endStates_inner_regions_inner::getName() const {
  return m_Name;
}

void SortieData_endStates_inner_regions_inner::setName(
    const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool SortieData_endStates_inner_regions_inner::nameIsSet() const {
  return m_NameIsSet;
}

void SortieData_endStates_inner_regions_inner::unsetName() {
  m_NameIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
