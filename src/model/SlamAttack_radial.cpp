/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/SlamAttack_radial.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

SlamAttack_radial::SlamAttack_radial() {
  m_Damage = 0.0f;
  m_DamageIsSet = false;
  m_ElementIsSet = false;
  m_Proc = 0.0f;
  m_ProcIsSet = false;
  m_Radius = 0.0f;
  m_RadiusIsSet = false;
}

SlamAttack_radial::~SlamAttack_radial() {}

void SlamAttack_radial::validate() {
  // TODO: implement validation
}

web::json::value SlamAttack_radial::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_DamageIsSet) {
    val[utility::conversions::to_string_t(U("damage"))] =
        ModelBase::toJson(m_Damage);
  }
  if (m_ElementIsSet) {
    val[utility::conversions::to_string_t(U("element"))] =
        ModelBase::toJson(m_Element);
  }
  if (m_ProcIsSet) {
    val[utility::conversions::to_string_t(U("proc"))] =
        ModelBase::toJson(m_Proc);
  }
  if (m_RadiusIsSet) {
    val[utility::conversions::to_string_t(U("radius"))] =
        ModelBase::toJson(m_Radius);
  }

  return val;
}

bool SlamAttack_radial::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("damage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("damage")));
    if (!fieldValue.is_null()) {
      float refVal_setDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDamage);
      setDamage(refVal_setDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("element")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("element")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Element> refVal_setElement;
      ok &= ModelBase::fromJson(fieldValue, refVal_setElement);
      setElement(refVal_setElement);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("proc")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("proc")));
    if (!fieldValue.is_null()) {
      float refVal_setProc;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProc);
      setProc(refVal_setProc);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("radius")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("radius")));
    if (!fieldValue.is_null()) {
      float refVal_setRadius;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRadius);
      setRadius(refVal_setRadius);
    }
  }
  return ok;
}

void SlamAttack_radial::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_DamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("damage")), m_Damage));
  }
  if (m_ElementIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("element")),
        m_Element));
  }
  if (m_ProcIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("proc")), m_Proc));
  }
  if (m_RadiusIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("radius")), m_Radius));
  }
}

bool SlamAttack_radial::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("damage")))) {
    float refVal_setDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("damage"))),
        refVal_setDamage);
    setDamage(refVal_setDamage);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("element")))) {
    std::shared_ptr<Element> refVal_setElement;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("element"))),
        refVal_setElement);
    setElement(refVal_setElement);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("proc")))) {
    float refVal_setProc;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("proc"))),
        refVal_setProc);
    setProc(refVal_setProc);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("radius")))) {
    float refVal_setRadius;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("radius"))),
        refVal_setRadius);
    setRadius(refVal_setRadius);
  }
  return ok;
}

float SlamAttack_radial::getDamage() const { return m_Damage; }

void SlamAttack_radial::setDamage(float value) {
  m_Damage = value;
  m_DamageIsSet = true;
}

bool SlamAttack_radial::damageIsSet() const { return m_DamageIsSet; }

void SlamAttack_radial::unsetDamage() { m_DamageIsSet = false; }
std::shared_ptr<Element> SlamAttack_radial::getElement() const {
  return m_Element;
}

void SlamAttack_radial::setElement(const std::shared_ptr<Element> &value) {
  m_Element = value;
  m_ElementIsSet = true;
}

bool SlamAttack_radial::elementIsSet() const { return m_ElementIsSet; }

void SlamAttack_radial::unsetElement() { m_ElementIsSet = false; }
float SlamAttack_radial::getProc() const { return m_Proc; }

void SlamAttack_radial::setProc(float value) {
  m_Proc = value;
  m_ProcIsSet = true;
}

bool SlamAttack_radial::procIsSet() const { return m_ProcIsSet; }

void SlamAttack_radial::unsetProc() { m_ProcIsSet = false; }
float SlamAttack_radial::getRadius() const { return m_Radius; }

void SlamAttack_radial::setRadius(float value) {
  m_Radius = value;
  m_RadiusIsSet = true;
}

bool SlamAttack_radial::radiusIsSet() const { return m_RadiusIsSet; }

void SlamAttack_radial::unsetRadius() { m_RadiusIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
