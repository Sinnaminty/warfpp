/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/GlobalUpgrades_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GlobalUpgrades_inner::GlobalUpgrades_inner() {
  m_Start = utility::conversions::to_string_t("");
  m_StartIsSet = false;
  m_End = utility::conversions::to_string_t("");
  m_EndIsSet = false;
  m_Upgrade = utility::conversions::to_string_t("");
  m_UpgradeIsSet = false;
  m_Operation = utility::conversions::to_string_t("");
  m_OperationIsSet = false;
  m_OperationSymbol = utility::conversions::to_string_t("");
  m_OperationSymbolIsSet = false;
  m_UpgradeOperationValue = 0.0;
  m_UpgradeOperationValueIsSet = false;
  m_Expired = false;
  m_ExpiredIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_Desc = utility::conversions::to_string_t("");
  m_DescIsSet = false;
}

GlobalUpgrades_inner::~GlobalUpgrades_inner() {}

void GlobalUpgrades_inner::validate() {
  // TODO: implement validation
}

web::json::value GlobalUpgrades_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_StartIsSet) {
    val[utility::conversions::to_string_t(U("start"))] =
        ModelBase::toJson(m_Start);
  }
  if (m_EndIsSet) {
    val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
  }
  if (m_UpgradeIsSet) {
    val[utility::conversions::to_string_t(U("upgrade"))] =
        ModelBase::toJson(m_Upgrade);
  }
  if (m_OperationIsSet) {
    val[utility::conversions::to_string_t(U("operation"))] =
        ModelBase::toJson(m_Operation);
  }
  if (m_OperationSymbolIsSet) {
    val[utility::conversions::to_string_t(U("operationSymbol"))] =
        ModelBase::toJson(m_OperationSymbol);
  }
  if (m_UpgradeOperationValueIsSet) {
    val[utility::conversions::to_string_t(U("upgradeOperationValue"))] =
        ModelBase::toJson(m_UpgradeOperationValue);
  }
  if (m_ExpiredIsSet) {
    val[utility::conversions::to_string_t(U("expired"))] =
        ModelBase::toJson(m_Expired);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_DescIsSet) {
    val[utility::conversions::to_string_t(U("desc"))] =
        ModelBase::toJson(m_Desc);
  }

  return val;
}

bool GlobalUpgrades_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("start")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("start")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStart;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
      setStart(refVal_setStart);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("end")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("end")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEnd;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
      setEnd(refVal_setEnd);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("upgrade")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("upgrade")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUpgrade;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUpgrade);
      setUpgrade(refVal_setUpgrade);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("operation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("operation")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setOperation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOperation);
      setOperation(refVal_setOperation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("operationSymbol")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("operationSymbol")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setOperationSymbol;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOperationSymbol);
      setOperationSymbol(refVal_setOperationSymbol);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("upgradeOperationValue")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("upgradeOperationValue")));
    if (!fieldValue.is_null()) {
      double refVal_setUpgradeOperationValue;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUpgradeOperationValue);
      setUpgradeOperationValue(refVal_setUpgradeOperationValue);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expired")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expired")));
    if (!fieldValue.is_null()) {
      bool refVal_setExpired;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
      setExpired(refVal_setExpired);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("desc")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("desc")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDesc;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDesc);
      setDesc(refVal_setDesc);
    }
  }
  return ok;
}

void GlobalUpgrades_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_StartIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
  }
  if (m_EndIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("end")), m_End));
  }
  if (m_UpgradeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("upgrade")),
        m_Upgrade));
  }
  if (m_OperationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("operation")),
        m_Operation));
  }
  if (m_OperationSymbolIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("operationSymbol")),
        m_OperationSymbol));
  }
  if (m_UpgradeOperationValueIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("upgradeOperationValue")),
        m_UpgradeOperationValue));
  }
  if (m_ExpiredIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expired")),
        m_Expired));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_DescIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("desc")), m_Desc));
  }
}

bool GlobalUpgrades_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("start")))) {
    utility::string_t refVal_setStart;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("start"))),
        refVal_setStart);
    setStart(refVal_setStart);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("end")))) {
    utility::string_t refVal_setEnd;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("end"))),
        refVal_setEnd);
    setEnd(refVal_setEnd);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("upgrade")))) {
    utility::string_t refVal_setUpgrade;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("upgrade"))),
        refVal_setUpgrade);
    setUpgrade(refVal_setUpgrade);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("operation")))) {
    utility::string_t refVal_setOperation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("operation"))),
        refVal_setOperation);
    setOperation(refVal_setOperation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("operationSymbol")))) {
    utility::string_t refVal_setOperationSymbol;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("operationSymbol"))),
        refVal_setOperationSymbol);
    setOperationSymbol(refVal_setOperationSymbol);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("upgradeOperationValue")))) {
    double refVal_setUpgradeOperationValue;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("upgradeOperationValue"))),
        refVal_setUpgradeOperationValue);
    setUpgradeOperationValue(refVal_setUpgradeOperationValue);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expired")))) {
    bool refVal_setExpired;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expired"))),
        refVal_setExpired);
    setExpired(refVal_setExpired);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("desc")))) {
    utility::string_t refVal_setDesc;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("desc"))),
        refVal_setDesc);
    setDesc(refVal_setDesc);
  }
  return ok;
}

utility::string_t GlobalUpgrades_inner::getStart() const { return m_Start; }

void GlobalUpgrades_inner::setStart(const utility::string_t &value) {
  m_Start = value;
  m_StartIsSet = true;
}

bool GlobalUpgrades_inner::startIsSet() const { return m_StartIsSet; }

void GlobalUpgrades_inner::unsetStart() { m_StartIsSet = false; }
utility::string_t GlobalUpgrades_inner::getEnd() const { return m_End; }

void GlobalUpgrades_inner::setEnd(const utility::string_t &value) {
  m_End = value;
  m_EndIsSet = true;
}

bool GlobalUpgrades_inner::endIsSet() const { return m_EndIsSet; }

void GlobalUpgrades_inner::unsetEnd() { m_EndIsSet = false; }
utility::string_t GlobalUpgrades_inner::getUpgrade() const { return m_Upgrade; }

void GlobalUpgrades_inner::setUpgrade(const utility::string_t &value) {
  m_Upgrade = value;
  m_UpgradeIsSet = true;
}

bool GlobalUpgrades_inner::upgradeIsSet() const { return m_UpgradeIsSet; }

void GlobalUpgrades_inner::unsetUpgrade() { m_UpgradeIsSet = false; }
utility::string_t GlobalUpgrades_inner::getOperation() const {
  return m_Operation;
}

void GlobalUpgrades_inner::setOperation(const utility::string_t &value) {
  m_Operation = value;
  m_OperationIsSet = true;
}

bool GlobalUpgrades_inner::operationIsSet() const { return m_OperationIsSet; }

void GlobalUpgrades_inner::unsetOperation() { m_OperationIsSet = false; }
utility::string_t GlobalUpgrades_inner::getOperationSymbol() const {
  return m_OperationSymbol;
}

void GlobalUpgrades_inner::setOperationSymbol(const utility::string_t &value) {
  m_OperationSymbol = value;
  m_OperationSymbolIsSet = true;
}

bool GlobalUpgrades_inner::operationSymbolIsSet() const {
  return m_OperationSymbolIsSet;
}

void GlobalUpgrades_inner::unsetOperationSymbol() {
  m_OperationSymbolIsSet = false;
}
double GlobalUpgrades_inner::getUpgradeOperationValue() const {
  return m_UpgradeOperationValue;
}

void GlobalUpgrades_inner::setUpgradeOperationValue(double value) {
  m_UpgradeOperationValue = value;
  m_UpgradeOperationValueIsSet = true;
}

bool GlobalUpgrades_inner::upgradeOperationValueIsSet() const {
  return m_UpgradeOperationValueIsSet;
}

void GlobalUpgrades_inner::unsetUpgradeOperationValue() {
  m_UpgradeOperationValueIsSet = false;
}
bool GlobalUpgrades_inner::isExpired() const { return m_Expired; }

void GlobalUpgrades_inner::setExpired(bool value) {
  m_Expired = value;
  m_ExpiredIsSet = true;
}

bool GlobalUpgrades_inner::expiredIsSet() const { return m_ExpiredIsSet; }

void GlobalUpgrades_inner::unsetExpired() { m_ExpiredIsSet = false; }
utility::string_t GlobalUpgrades_inner::getEta() const { return m_Eta; }

void GlobalUpgrades_inner::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool GlobalUpgrades_inner::etaIsSet() const { return m_EtaIsSet; }

void GlobalUpgrades_inner::unsetEta() { m_EtaIsSet = false; }
utility::string_t GlobalUpgrades_inner::getDesc() const { return m_Desc; }

void GlobalUpgrades_inner::setDesc(const utility::string_t &value) {
  m_Desc = value;
  m_DescIsSet = true;
}

bool GlobalUpgrades_inner::descIsSet() const { return m_DescIsSet; }

void GlobalUpgrades_inner::unsetDesc() { m_DescIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
