/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Attack_falloff.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Attack_falloff::Attack_falloff() {
  m_Start = 0.0f;
  m_StartIsSet = false;
  m_End = 0.0f;
  m_EndIsSet = false;
  m_Reduction = 0.0f;
  m_ReductionIsSet = false;
}

Attack_falloff::~Attack_falloff() {}

void Attack_falloff::validate() {
  // TODO: implement validation
}

web::json::value Attack_falloff::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_StartIsSet) {
    val[utility::conversions::to_string_t(U("start"))] =
        ModelBase::toJson(m_Start);
  }
  if (m_EndIsSet) {
    val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
  }
  if (m_ReductionIsSet) {
    val[utility::conversions::to_string_t(U("reduction"))] =
        ModelBase::toJson(m_Reduction);
  }

  return val;
}

bool Attack_falloff::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("start")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("start")));
    if (!fieldValue.is_null()) {
      float refVal_setStart;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
      setStart(refVal_setStart);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("end")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("end")));
    if (!fieldValue.is_null()) {
      float refVal_setEnd;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
      setEnd(refVal_setEnd);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("reduction")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("reduction")));
    if (!fieldValue.is_null()) {
      float refVal_setReduction;
      ok &= ModelBase::fromJson(fieldValue, refVal_setReduction);
      setReduction(refVal_setReduction);
    }
  }
  return ok;
}

void Attack_falloff::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_StartIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
  }
  if (m_EndIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("end")), m_End));
  }
  if (m_ReductionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("reduction")),
        m_Reduction));
  }
}

bool Attack_falloff::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                   const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("start")))) {
    float refVal_setStart;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("start"))),
        refVal_setStart);
    setStart(refVal_setStart);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("end")))) {
    float refVal_setEnd;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("end"))),
        refVal_setEnd);
    setEnd(refVal_setEnd);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("reduction")))) {
    float refVal_setReduction;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("reduction"))),
        refVal_setReduction);
    setReduction(refVal_setReduction);
  }
  return ok;
}

float Attack_falloff::getStart() const { return m_Start; }

void Attack_falloff::setStart(float value) {
  m_Start = value;
  m_StartIsSet = true;
}

bool Attack_falloff::startIsSet() const { return m_StartIsSet; }

void Attack_falloff::unsetStart() { m_StartIsSet = false; }
float Attack_falloff::getEnd() const { return m_End; }

void Attack_falloff::setEnd(float value) {
  m_End = value;
  m_EndIsSet = true;
}

bool Attack_falloff::endIsSet() const { return m_EndIsSet; }

void Attack_falloff::unsetEnd() { m_EndIsSet = false; }
float Attack_falloff::getReduction() const { return m_Reduction; }

void Attack_falloff::setReduction(float value) {
  m_Reduction = value;
  m_ReductionIsSet = true;
}

bool Attack_falloff::reductionIsSet() const { return m_ReductionIsSet; }

void Attack_falloff::unsetReduction() { m_ReductionIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
