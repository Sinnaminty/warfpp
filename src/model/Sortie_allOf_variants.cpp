/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Sortie_allOf_variants.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Sortie_allOf_variants::Sortie_allOf_variants() {
  m_Node = utility::conversions::to_string_t("");
  m_NodeIsSet = false;
  m_Boss = utility::conversions::to_string_t("");
  m_BossIsSet = false;
  m_MissionTypeIsSet = false;
  m_Planet = utility::conversions::to_string_t("");
  m_PlanetIsSet = false;
  m_Modifier = utility::conversions::to_string_t("");
  m_ModifierIsSet = false;
  m_ModifierDescription = utility::conversions::to_string_t("");
  m_ModifierDescriptionIsSet = false;
}

Sortie_allOf_variants::~Sortie_allOf_variants() {}

void Sortie_allOf_variants::validate() {
  // TODO: implement validation
}

web::json::value Sortie_allOf_variants::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NodeIsSet) {
    val[utility::conversions::to_string_t(U("node"))] =
        ModelBase::toJson(m_Node);
  }
  if (m_BossIsSet) {
    val[utility::conversions::to_string_t(U("boss"))] =
        ModelBase::toJson(m_Boss);
  }
  if (m_MissionTypeIsSet) {
    val[utility::conversions::to_string_t(U("missionType"))] =
        ModelBase::toJson(m_MissionType);
  }
  if (m_PlanetIsSet) {
    val[utility::conversions::to_string_t(U("planet"))] =
        ModelBase::toJson(m_Planet);
  }
  if (m_ModifierIsSet) {
    val[utility::conversions::to_string_t(U("modifier"))] =
        ModelBase::toJson(m_Modifier);
  }
  if (m_ModifierDescriptionIsSet) {
    val[utility::conversions::to_string_t(U("modifierDescription"))] =
        ModelBase::toJson(m_ModifierDescription);
  }

  return val;
}

bool Sortie_allOf_variants::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("node")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("node")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
      setNode(refVal_setNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("boss")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("boss")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBoss;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBoss);
      setBoss(refVal_setBoss);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("missionType")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("missionType")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<MissionType> refVal_setMissionType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMissionType);
      setMissionType(refVal_setMissionType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("planet")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("planet")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPlanet;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPlanet);
      setPlanet(refVal_setPlanet);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("modifier")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("modifier")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setModifier;
      ok &= ModelBase::fromJson(fieldValue, refVal_setModifier);
      setModifier(refVal_setModifier);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("modifierDescription")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("modifierDescription")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setModifierDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setModifierDescription);
      setModifierDescription(refVal_setModifierDescription);
    }
  }
  return ok;
}

void Sortie_allOf_variants::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
  }
  if (m_BossIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("boss")), m_Boss));
  }
  if (m_MissionTypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("missionType")),
        m_MissionType));
  }
  if (m_PlanetIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("planet")), m_Planet));
  }
  if (m_ModifierIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("modifier")),
        m_Modifier));
  }
  if (m_ModifierDescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("modifierDescription")),
        m_ModifierDescription));
  }
}

bool Sortie_allOf_variants::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("node")))) {
    utility::string_t refVal_setNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("node"))),
        refVal_setNode);
    setNode(refVal_setNode);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("boss")))) {
    utility::string_t refVal_setBoss;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("boss"))),
        refVal_setBoss);
    setBoss(refVal_setBoss);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("missionType")))) {
    std::shared_ptr<MissionType> refVal_setMissionType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("missionType"))),
        refVal_setMissionType);
    setMissionType(refVal_setMissionType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("planet")))) {
    utility::string_t refVal_setPlanet;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("planet"))),
        refVal_setPlanet);
    setPlanet(refVal_setPlanet);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("modifier")))) {
    utility::string_t refVal_setModifier;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("modifier"))),
        refVal_setModifier);
    setModifier(refVal_setModifier);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("modifierDescription")))) {
    utility::string_t refVal_setModifierDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("modifierDescription"))),
        refVal_setModifierDescription);
    setModifierDescription(refVal_setModifierDescription);
  }
  return ok;
}

utility::string_t Sortie_allOf_variants::getNode() const { return m_Node; }

void Sortie_allOf_variants::setNode(const utility::string_t &value) {
  m_Node = value;
  m_NodeIsSet = true;
}

bool Sortie_allOf_variants::nodeIsSet() const { return m_NodeIsSet; }

void Sortie_allOf_variants::unsetNode() { m_NodeIsSet = false; }
utility::string_t Sortie_allOf_variants::getBoss() const { return m_Boss; }

void Sortie_allOf_variants::setBoss(const utility::string_t &value) {
  m_Boss = value;
  m_BossIsSet = true;
}

bool Sortie_allOf_variants::bossIsSet() const { return m_BossIsSet; }

void Sortie_allOf_variants::unsetBoss() { m_BossIsSet = false; }
std::shared_ptr<MissionType> Sortie_allOf_variants::getMissionType() const {
  return m_MissionType;
}

void Sortie_allOf_variants::setMissionType(
    const std::shared_ptr<MissionType> &value) {
  m_MissionType = value;
  m_MissionTypeIsSet = true;
}

bool Sortie_allOf_variants::missionTypeIsSet() const {
  return m_MissionTypeIsSet;
}

void Sortie_allOf_variants::unsetMissionType() { m_MissionTypeIsSet = false; }
utility::string_t Sortie_allOf_variants::getPlanet() const { return m_Planet; }

void Sortie_allOf_variants::setPlanet(const utility::string_t &value) {
  m_Planet = value;
  m_PlanetIsSet = true;
}

bool Sortie_allOf_variants::planetIsSet() const { return m_PlanetIsSet; }

void Sortie_allOf_variants::unsetPlanet() { m_PlanetIsSet = false; }
utility::string_t Sortie_allOf_variants::getModifier() const {
  return m_Modifier;
}

void Sortie_allOf_variants::setModifier(const utility::string_t &value) {
  m_Modifier = value;
  m_ModifierIsSet = true;
}

bool Sortie_allOf_variants::modifierIsSet() const { return m_ModifierIsSet; }

void Sortie_allOf_variants::unsetModifier() { m_ModifierIsSet = false; }
utility::string_t Sortie_allOf_variants::getModifierDescription() const {
  return m_ModifierDescription;
}

void Sortie_allOf_variants::setModifierDescription(
    const utility::string_t &value) {
  m_ModifierDescription = value;
  m_ModifierDescriptionIsSet = true;
}

bool Sortie_allOf_variants::modifierDescriptionIsSet() const {
  return m_ModifierDescriptionIsSet;
}

void Sortie_allOf_variants::unsetModifierDescription() {
  m_ModifierDescriptionIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
