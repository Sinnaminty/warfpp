/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Syndicate.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

Syndicate::eSyndicate toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("Arbiters of Hexis")))
    return Syndicate::eSyndicate::Syndicate_ARBITERS_OF_HEXIS;
  if (val == utility::conversions::to_string_t(U("Cephalon Suda")))
    return Syndicate::eSyndicate::Syndicate_CEPHALON_SUDA;
  if (val == utility::conversions::to_string_t(U("Assassins")))
    return Syndicate::eSyndicate::Syndicate_ASSASSINS;
  if (val == utility::conversions::to_string_t(U("Nightwave")))
    return Syndicate::eSyndicate::Syndicate_NIGHTWAVE;
  if (val == utility::conversions::to_string_t(U("Ostrons")))
    return Syndicate::eSyndicate::Syndicate_OSTRONS;
  if (val == utility::conversions::to_string_t(U("Vox Solaris")))
    return Syndicate::eSyndicate::Syndicate_VOX_SOLARIS;
  if (val == utility::conversions::to_string_t(U("Solaris United")))
    return Syndicate::eSyndicate::Syndicate_SOLARIS_UNITED;
  if (val == utility::conversions::to_string_t(U("Perrin Sequence")))
    return Syndicate::eSyndicate::Syndicate_PERRIN_SEQUENCE;
  if (val == utility::conversions::to_string_t(U("Steel Meridian")))
    return Syndicate::eSyndicate::Syndicate_STEEL_MERIDIAN;
  if (val == utility::conversions::to_string_t(U("Red Veil")))
    return Syndicate::eSyndicate::Syndicate_RED_VEIL;
  if (val == utility::conversions::to_string_t(U("New Loka")))
    return Syndicate::eSyndicate::Syndicate_NEW_LOKA;
  return {};
}

EnumUnderlyingType fromEnum(Syndicate::eSyndicate e) {
  switch (e) {
  case Syndicate::eSyndicate::Syndicate_ARBITERS_OF_HEXIS:
    return U("Arbiters of Hexis");
  case Syndicate::eSyndicate::Syndicate_CEPHALON_SUDA:
    return U("Cephalon Suda");
  case Syndicate::eSyndicate::Syndicate_ASSASSINS:
    return U("Assassins");
  case Syndicate::eSyndicate::Syndicate_NIGHTWAVE:
    return U("Nightwave");
  case Syndicate::eSyndicate::Syndicate_OSTRONS:
    return U("Ostrons");
  case Syndicate::eSyndicate::Syndicate_VOX_SOLARIS:
    return U("Vox Solaris");
  case Syndicate::eSyndicate::Syndicate_SOLARIS_UNITED:
    return U("Solaris United");
  case Syndicate::eSyndicate::Syndicate_PERRIN_SEQUENCE:
    return U("Perrin Sequence");
  case Syndicate::eSyndicate::Syndicate_STEEL_MERIDIAN:
    return U("Steel Meridian");
  case Syndicate::eSyndicate::Syndicate_RED_VEIL:
    return U("Red Veil");
  case Syndicate::eSyndicate::Syndicate_NEW_LOKA:
    return U("New Loka");
  default:
    break;
  }
  return {};
}
} // namespace

Syndicate::Syndicate() {}

Syndicate::~Syndicate() {}

void Syndicate::validate() {
  // TODO: implement validation
}

web::json::value Syndicate::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool Syndicate::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void Syndicate::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Syndicate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

Syndicate::eSyndicate Syndicate::getValue() const { return m_value; }

void Syndicate::setValue(Syndicate::eSyndicate const value) { m_value = value; }

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
