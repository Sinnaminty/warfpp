/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/MeleeWeapon.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

MeleeWeapon::MeleeWeapon() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_UniqueName = utility::conversions::to_string_t("");
  m_UniqueNameIsSet = false;
  m_Description = utility::conversions::to_string_t("");
  m_DescriptionIsSet = false;
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_Tradable = false;
  m_TradableIsSet = false;
  m_Category = utility::conversions::to_string_t("");
  m_CategoryIsSet = false;
  m_ProductCategory = utility::conversions::to_string_t("");
  m_ProductCategoryIsSet = false;
  m_PatchlogsIsSet = false;
  m_ComponentsIsSet = false;
  m_IntroducedIsSet = false;
  m_EstimatedVaultDateIsSet = false;
  m_Url = utility::conversions::to_string_t("");
  m_UrlIsSet = false;
  m_Mr = 0.0;
  m_MrIsSet = false;
  m_Riven_disposition = 0.0;
  m_Riven_dispositionIsSet = false;
  m_PolaritiesIsSet = false;
  m_Thumbnail = utility::conversions::to_string_t("");
  m_ThumbnailIsSet = false;
  m_TagsIsSet = false;
  m_Vaulted = false;
  m_VaultedIsSet = false;
  m_MarketCost = utility::conversions::to_string_t("");
  m_MarketCostIsSet = false;
  m_BpCost = utility::conversions::to_string_t("");
  m_BpCostIsSet = false;
  m_AttacksIsSet = false;
  m_MasteryReq = 0;
  m_MasteryReqIsSet = false;
  m_BuildPrice = 0;
  m_BuildPriceIsSet = false;
  m_BuildTime = 0;
  m_BuildTimeIsSet = false;
  m_SkipBuildTimePrice = 0;
  m_SkipBuildTimePriceIsSet = false;
  m_BuildQuantity = 0;
  m_BuildQuantityIsSet = false;
  m_ConsumeOnBuild = false;
  m_ConsumeOnBuildIsSet = false;
  m_WikiaThumbnail = utility::conversions::to_string_t("");
  m_WikiaThumbnailIsSet = false;
  m_WikiaUrl = utility::conversions::to_string_t("");
  m_WikiaUrlIsSet = false;
  m_CriticalChance = 0.0f;
  m_CriticalChanceIsSet = false;
  m_CriticalMultiplier = 0.0f;
  m_CriticalMultiplierIsSet = false;
  m_Disposition = 0;
  m_DispositionIsSet = false;
  m_FireRate = 0.0f;
  m_FireRateIsSet = false;
  m_OmegaAttenuation = 0.0f;
  m_OmegaAttenuationIsSet = false;
  m_ProcChance = 0.0f;
  m_ProcChanceIsSet = false;
  m_ReleaseDate = 0.0f;
  m_ReleaseDateIsSet = false;
  m_Slot = 0;
  m_SlotIsSet = false;
  m_TotalDamage = 0;
  m_TotalDamageIsSet = false;
  m_VaultDateIsSet = false;
  m_BlockingAngle = 0;
  m_BlockingAngleIsSet = false;
  m_ComboDuration = 0;
  m_ComboDurationIsSet = false;
  m_DamagePerShotIsSet = false;
  m_FollowThrough = 0.0f;
  m_FollowThroughIsSet = false;
  m_HeavyAttackDamage = 0;
  m_HeavyAttackDamageIsSet = false;
  m_HeavySlamAttack = 0;
  m_HeavySlamAttackIsSet = false;
  m_HeavySlamRadialDamage = 0;
  m_HeavySlamRadialDamageIsSet = false;
  m_HeavySlamRadius = 0;
  m_HeavySlamRadiusIsSet = false;
  m_Range = 0.0f;
  m_RangeIsSet = false;
  m_SlamAttack = 0;
  m_SlamAttackIsSet = false;
  m_SlamRadialDamage = 0;
  m_SlamRadialDamageIsSet = false;
  m_SlamRadius = 0;
  m_SlamRadiusIsSet = false;
  m_SlideAttack = 0;
  m_SlideAttackIsSet = false;
  m_StancePolarityIsSet = false;
  m_WindUp = 0.0f;
  m_WindUpIsSet = false;
}

MeleeWeapon::~MeleeWeapon() {}

void MeleeWeapon::validate() {
  // TODO: implement validation
}

web::json::value MeleeWeapon::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_UniqueNameIsSet) {
    val[utility::conversions::to_string_t(U("uniqueName"))] =
        ModelBase::toJson(m_UniqueName);
  }
  if (m_DescriptionIsSet) {
    val[utility::conversions::to_string_t(U("description"))] =
        ModelBase::toJson(m_Description);
  }
  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_TradableIsSet) {
    val[utility::conversions::to_string_t(U("tradable"))] =
        ModelBase::toJson(m_Tradable);
  }
  if (m_CategoryIsSet) {
    val[utility::conversions::to_string_t(U("category"))] =
        ModelBase::toJson(m_Category);
  }
  if (m_ProductCategoryIsSet) {
    val[utility::conversions::to_string_t(U("productCategory"))] =
        ModelBase::toJson(m_ProductCategory);
  }
  if (m_PatchlogsIsSet) {
    val[utility::conversions::to_string_t(U("patchlogs"))] =
        ModelBase::toJson(m_Patchlogs);
  }
  if (m_ComponentsIsSet) {
    val[utility::conversions::to_string_t(U("components"))] =
        ModelBase::toJson(m_Components);
  }
  if (m_IntroducedIsSet) {
    val[utility::conversions::to_string_t(U("introduced"))] =
        ModelBase::toJson(m_Introduced);
  }
  if (m_EstimatedVaultDateIsSet) {
    val[utility::conversions::to_string_t(U("estimatedVaultDate"))] =
        ModelBase::toJson(m_EstimatedVaultDate);
  }
  if (m_UrlIsSet) {
    val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
  }
  if (m_MrIsSet) {
    val[utility::conversions::to_string_t(U("mr"))] = ModelBase::toJson(m_Mr);
  }
  if (m_Riven_dispositionIsSet) {
    val[utility::conversions::to_string_t(U("riven_disposition"))] =
        ModelBase::toJson(m_Riven_disposition);
  }
  if (m_PolaritiesIsSet) {
    val[utility::conversions::to_string_t(U("polarities"))] =
        ModelBase::toJson(m_Polarities);
  }
  if (m_ThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("thumbnail"))] =
        ModelBase::toJson(m_Thumbnail);
  }
  if (m_TagsIsSet) {
    val[utility::conversions::to_string_t(U("tags"))] =
        ModelBase::toJson(m_Tags);
  }
  if (m_VaultedIsSet) {
    val[utility::conversions::to_string_t(U("vaulted"))] =
        ModelBase::toJson(m_Vaulted);
  }
  if (m_MarketCostIsSet) {
    val[utility::conversions::to_string_t(U("marketCost"))] =
        ModelBase::toJson(m_MarketCost);
  }
  if (m_BpCostIsSet) {
    val[utility::conversions::to_string_t(U("bpCost"))] =
        ModelBase::toJson(m_BpCost);
  }
  if (m_AttacksIsSet) {
    val[utility::conversions::to_string_t(U("attacks"))] =
        ModelBase::toJson(m_Attacks);
  }
  if (m_MasteryReqIsSet) {
    val[utility::conversions::to_string_t(U("masteryReq"))] =
        ModelBase::toJson(m_MasteryReq);
  }
  if (m_BuildPriceIsSet) {
    val[utility::conversions::to_string_t(U("buildPrice"))] =
        ModelBase::toJson(m_BuildPrice);
  }
  if (m_BuildTimeIsSet) {
    val[utility::conversions::to_string_t(U("buildTime"))] =
        ModelBase::toJson(m_BuildTime);
  }
  if (m_SkipBuildTimePriceIsSet) {
    val[utility::conversions::to_string_t(U("skipBuildTimePrice"))] =
        ModelBase::toJson(m_SkipBuildTimePrice);
  }
  if (m_BuildQuantityIsSet) {
    val[utility::conversions::to_string_t(U("buildQuantity"))] =
        ModelBase::toJson(m_BuildQuantity);
  }
  if (m_ConsumeOnBuildIsSet) {
    val[utility::conversions::to_string_t(U("consumeOnBuild"))] =
        ModelBase::toJson(m_ConsumeOnBuild);
  }
  if (m_WikiaThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("wikiaThumbnail"))] =
        ModelBase::toJson(m_WikiaThumbnail);
  }
  if (m_WikiaUrlIsSet) {
    val[utility::conversions::to_string_t(U("wikiaUrl"))] =
        ModelBase::toJson(m_WikiaUrl);
  }
  if (m_CriticalChanceIsSet) {
    val[utility::conversions::to_string_t(U("criticalChance"))] =
        ModelBase::toJson(m_CriticalChance);
  }
  if (m_CriticalMultiplierIsSet) {
    val[utility::conversions::to_string_t(U("criticalMultiplier"))] =
        ModelBase::toJson(m_CriticalMultiplier);
  }
  if (m_DispositionIsSet) {
    val[utility::conversions::to_string_t(U("disposition"))] =
        ModelBase::toJson(m_Disposition);
  }
  if (m_FireRateIsSet) {
    val[utility::conversions::to_string_t(U("fireRate"))] =
        ModelBase::toJson(m_FireRate);
  }
  if (m_OmegaAttenuationIsSet) {
    val[utility::conversions::to_string_t(U("omegaAttenuation"))] =
        ModelBase::toJson(m_OmegaAttenuation);
  }
  if (m_ProcChanceIsSet) {
    val[utility::conversions::to_string_t(U("procChance"))] =
        ModelBase::toJson(m_ProcChance);
  }
  if (m_ReleaseDateIsSet) {
    val[utility::conversions::to_string_t(U("releaseDate"))] =
        ModelBase::toJson(m_ReleaseDate);
  }
  if (m_SlotIsSet) {
    val[utility::conversions::to_string_t(U("slot"))] =
        ModelBase::toJson(m_Slot);
  }
  if (m_TotalDamageIsSet) {
    val[utility::conversions::to_string_t(U("totalDamage"))] =
        ModelBase::toJson(m_TotalDamage);
  }
  if (m_VaultDateIsSet) {
    val[utility::conversions::to_string_t(U("vaultDate"))] =
        ModelBase::toJson(m_VaultDate);
  }
  if (m_BlockingAngleIsSet) {
    val[utility::conversions::to_string_t(U("blockingAngle"))] =
        ModelBase::toJson(m_BlockingAngle);
  }
  if (m_ComboDurationIsSet) {
    val[utility::conversions::to_string_t(U("comboDuration"))] =
        ModelBase::toJson(m_ComboDuration);
  }
  if (m_DamagePerShotIsSet) {
    val[utility::conversions::to_string_t(U("damagePerShot"))] =
        ModelBase::toJson(m_DamagePerShot);
  }
  if (m_FollowThroughIsSet) {
    val[utility::conversions::to_string_t(U("followThrough"))] =
        ModelBase::toJson(m_FollowThrough);
  }
  if (m_HeavyAttackDamageIsSet) {
    val[utility::conversions::to_string_t(U("heavyAttackDamage"))] =
        ModelBase::toJson(m_HeavyAttackDamage);
  }
  if (m_HeavySlamAttackIsSet) {
    val[utility::conversions::to_string_t(U("heavySlamAttack"))] =
        ModelBase::toJson(m_HeavySlamAttack);
  }
  if (m_HeavySlamRadialDamageIsSet) {
    val[utility::conversions::to_string_t(U("heavySlamRadialDamage"))] =
        ModelBase::toJson(m_HeavySlamRadialDamage);
  }
  if (m_HeavySlamRadiusIsSet) {
    val[utility::conversions::to_string_t(U("heavySlamRadius"))] =
        ModelBase::toJson(m_HeavySlamRadius);
  }
  if (m_RangeIsSet) {
    val[utility::conversions::to_string_t(U("range"))] =
        ModelBase::toJson(m_Range);
  }
  if (m_SlamAttackIsSet) {
    val[utility::conversions::to_string_t(U("slamAttack"))] =
        ModelBase::toJson(m_SlamAttack);
  }
  if (m_SlamRadialDamageIsSet) {
    val[utility::conversions::to_string_t(U("slamRadialDamage"))] =
        ModelBase::toJson(m_SlamRadialDamage);
  }
  if (m_SlamRadiusIsSet) {
    val[utility::conversions::to_string_t(U("slamRadius"))] =
        ModelBase::toJson(m_SlamRadius);
  }
  if (m_SlideAttackIsSet) {
    val[utility::conversions::to_string_t(U("slideAttack"))] =
        ModelBase::toJson(m_SlideAttack);
  }
  if (m_StancePolarityIsSet) {
    val[utility::conversions::to_string_t(U("stancePolarity"))] =
        ModelBase::toJson(m_StancePolarity);
  }
  if (m_WindUpIsSet) {
    val[utility::conversions::to_string_t(U("windUp"))] =
        ModelBase::toJson(m_WindUp);
  }

  return val;
}

bool MeleeWeapon::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("uniqueName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("uniqueName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUniqueName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueName);
      setUniqueName(refVal_setUniqueName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("description")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("description")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
      setDescription(refVal_setDescription);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tradable")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tradable")));
    if (!fieldValue.is_null()) {
      bool refVal_setTradable;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTradable);
      setTradable(refVal_setTradable);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("category")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("category")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
      setCategory(refVal_setCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("productCategory")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("productCategory")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setProductCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProductCategory);
      setProductCategory(refVal_setProductCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("patchlogs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("patchlogs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPatchlogs);
      setPatchlogs(refVal_setPatchlogs);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("components")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("components")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
      ok &= ModelBase::fromJson(fieldValue, refVal_setComponents);
      setComponents(refVal_setComponents);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("introduced")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("introduced")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Introduced> refVal_setIntroduced;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIntroduced);
      setIntroduced(refVal_setIntroduced);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("estimatedVaultDate")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setEstimatedVaultDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedVaultDate);
      setEstimatedVaultDate(refVal_setEstimatedVaultDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("url")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("url")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
      setUrl(refVal_setUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("mr")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("mr")));
    if (!fieldValue.is_null()) {
      double refVal_setMr;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMr);
      setMr(refVal_setMr);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("riven_disposition")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("riven_disposition")));
    if (!fieldValue.is_null()) {
      double refVal_setRivenDisposition;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRivenDisposition);
      setRivenDisposition(refVal_setRivenDisposition);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("polarities")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("polarities")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Polarity>> refVal_setPolarities;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPolarities);
      setPolarities(refVal_setPolarities);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("thumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("thumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
      setThumbnail(refVal_setThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tags")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tags")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setTags;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
      setTags(refVal_setTags);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vaulted")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vaulted")));
    if (!fieldValue.is_null()) {
      bool refVal_setVaulted;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVaulted);
      setVaulted(refVal_setVaulted);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("marketCost")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("marketCost")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMarketCost;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMarketCost);
      setMarketCost(refVal_setMarketCost);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("bpCost")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bpCost")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBpCost;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBpCost);
      setBpCost(refVal_setBpCost);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attacks")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attacks")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Attack>> refVal_setAttacks;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttacks);
      setAttacks(refVal_setAttacks);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("masteryReq")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("masteryReq")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setMasteryReq;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMasteryReq);
      setMasteryReq(refVal_setMasteryReq);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildPrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildPrice")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildPrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildPrice);
      setBuildPrice(refVal_setBuildPrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildTime")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildTime")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildTime;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildTime);
      setBuildTime(refVal_setBuildTime);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("skipBuildTimePrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("skipBuildTimePrice")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSkipBuildTimePrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSkipBuildTimePrice);
      setSkipBuildTimePrice(refVal_setSkipBuildTimePrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildQuantity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildQuantity")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildQuantity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildQuantity);
      setBuildQuantity(refVal_setBuildQuantity);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("consumeOnBuild")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("consumeOnBuild")));
    if (!fieldValue.is_null()) {
      bool refVal_setConsumeOnBuild;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConsumeOnBuild);
      setConsumeOnBuild(refVal_setConsumeOnBuild);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("wikiaThumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("wikiaThumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWikiaThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWikiaThumbnail);
      setWikiaThumbnail(refVal_setWikiaThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("wikiaUrl")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("wikiaUrl")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWikiaUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWikiaUrl);
      setWikiaUrl(refVal_setWikiaUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("criticalChance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("criticalChance")));
    if (!fieldValue.is_null()) {
      float refVal_setCriticalChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCriticalChance);
      setCriticalChance(refVal_setCriticalChance);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("criticalMultiplier")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("criticalMultiplier")));
    if (!fieldValue.is_null()) {
      float refVal_setCriticalMultiplier;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCriticalMultiplier);
      setCriticalMultiplier(refVal_setCriticalMultiplier);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("disposition")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("disposition")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setDisposition;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDisposition);
      setDisposition(refVal_setDisposition);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("fireRate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("fireRate")));
    if (!fieldValue.is_null()) {
      float refVal_setFireRate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFireRate);
      setFireRate(refVal_setFireRate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("omegaAttenuation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("omegaAttenuation")));
    if (!fieldValue.is_null()) {
      float refVal_setOmegaAttenuation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOmegaAttenuation);
      setOmegaAttenuation(refVal_setOmegaAttenuation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("procChance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("procChance")));
    if (!fieldValue.is_null()) {
      float refVal_setProcChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProcChance);
      setProcChance(refVal_setProcChance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("releaseDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("releaseDate")));
    if (!fieldValue.is_null()) {
      float refVal_setReleaseDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setReleaseDate);
      setReleaseDate(refVal_setReleaseDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slot")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slot")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlot;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlot);
      setSlot(refVal_setSlot);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("totalDamage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("totalDamage")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setTotalDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTotalDamage);
      setTotalDamage(refVal_setTotalDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vaultDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vaultDate")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setVaultDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVaultDate);
      setVaultDate(refVal_setVaultDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("blockingAngle")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("blockingAngle")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBlockingAngle;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBlockingAngle);
      setBlockingAngle(refVal_setBlockingAngle);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("comboDuration")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("comboDuration")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setComboDuration;
      ok &= ModelBase::fromJson(fieldValue, refVal_setComboDuration);
      setComboDuration(refVal_setComboDuration);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("damagePerShot")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("damagePerShot")));
    if (!fieldValue.is_null()) {
      std::vector<float> refVal_setDamagePerShot;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDamagePerShot);
      setDamagePerShot(refVal_setDamagePerShot);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("followThrough")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("followThrough")));
    if (!fieldValue.is_null()) {
      float refVal_setFollowThrough;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFollowThrough);
      setFollowThrough(refVal_setFollowThrough);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("heavyAttackDamage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("heavyAttackDamage")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setHeavyAttackDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHeavyAttackDamage);
      setHeavyAttackDamage(refVal_setHeavyAttackDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("heavySlamAttack")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("heavySlamAttack")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setHeavySlamAttack;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHeavySlamAttack);
      setHeavySlamAttack(refVal_setHeavySlamAttack);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("heavySlamRadialDamage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("heavySlamRadialDamage")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setHeavySlamRadialDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHeavySlamRadialDamage);
      setHeavySlamRadialDamage(refVal_setHeavySlamRadialDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("heavySlamRadius")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("heavySlamRadius")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setHeavySlamRadius;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHeavySlamRadius);
      setHeavySlamRadius(refVal_setHeavySlamRadius);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("range")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("range")));
    if (!fieldValue.is_null()) {
      float refVal_setRange;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRange);
      setRange(refVal_setRange);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slamAttack")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slamAttack")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlamAttack;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlamAttack);
      setSlamAttack(refVal_setSlamAttack);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slamRadialDamage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slamRadialDamage")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlamRadialDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlamRadialDamage);
      setSlamRadialDamage(refVal_setSlamRadialDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slamRadius")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slamRadius")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlamRadius;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlamRadius);
      setSlamRadius(refVal_setSlamRadius);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slideAttack")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slideAttack")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlideAttack;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlideAttack);
      setSlideAttack(refVal_setSlideAttack);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("stancePolarity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("stancePolarity")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Polarity> refVal_setStancePolarity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStancePolarity);
      setStancePolarity(refVal_setStancePolarity);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("windUp")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("windUp")));
    if (!fieldValue.is_null()) {
      float refVal_setWindUp;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWindUp);
      setWindUp(refVal_setWindUp);
    }
  }
  return ok;
}

void MeleeWeapon::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_UniqueNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("uniqueName")),
        m_UniqueName));
  }
  if (m_DescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("description")),
        m_Description));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_TradableIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tradable")),
        m_Tradable));
  }
  if (m_CategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("category")),
        m_Category));
  }
  if (m_ProductCategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("productCategory")),
        m_ProductCategory));
  }
  if (m_PatchlogsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("patchlogs")),
        m_Patchlogs));
  }
  if (m_ComponentsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("components")),
        m_Components));
  }
  if (m_IntroducedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("introduced")),
        m_Introduced));
  }
  if (m_EstimatedVaultDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("estimatedVaultDate")),
        m_EstimatedVaultDate));
  }
  if (m_UrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
  }
  if (m_MrIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("mr")), m_Mr));
  }
  if (m_Riven_dispositionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("riven_disposition")),
        m_Riven_disposition));
  }
  if (m_PolaritiesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("polarities")),
        m_Polarities));
  }
  if (m_ThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("thumbnail")),
        m_Thumbnail));
  }
  if (m_TagsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
  }
  if (m_VaultedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vaulted")),
        m_Vaulted));
  }
  if (m_MarketCostIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("marketCost")),
        m_MarketCost));
  }
  if (m_BpCostIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bpCost")), m_BpCost));
  }
  if (m_AttacksIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attacks")),
        m_Attacks));
  }
  if (m_MasteryReqIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("masteryReq")),
        m_MasteryReq));
  }
  if (m_BuildPriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildPrice")),
        m_BuildPrice));
  }
  if (m_BuildTimeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildTime")),
        m_BuildTime));
  }
  if (m_SkipBuildTimePriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("skipBuildTimePrice")),
        m_SkipBuildTimePrice));
  }
  if (m_BuildQuantityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildQuantity")),
        m_BuildQuantity));
  }
  if (m_ConsumeOnBuildIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("consumeOnBuild")),
        m_ConsumeOnBuild));
  }
  if (m_WikiaThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("wikiaThumbnail")),
        m_WikiaThumbnail));
  }
  if (m_WikiaUrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("wikiaUrl")),
        m_WikiaUrl));
  }
  if (m_CriticalChanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("criticalChance")),
        m_CriticalChance));
  }
  if (m_CriticalMultiplierIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("criticalMultiplier")),
        m_CriticalMultiplier));
  }
  if (m_DispositionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("disposition")),
        m_Disposition));
  }
  if (m_FireRateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("fireRate")),
        m_FireRate));
  }
  if (m_OmegaAttenuationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("omegaAttenuation")),
        m_OmegaAttenuation));
  }
  if (m_ProcChanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("procChance")),
        m_ProcChance));
  }
  if (m_ReleaseDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("releaseDate")),
        m_ReleaseDate));
  }
  if (m_SlotIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slot")), m_Slot));
  }
  if (m_TotalDamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("totalDamage")),
        m_TotalDamage));
  }
  if (m_VaultDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vaultDate")),
        m_VaultDate));
  }
  if (m_BlockingAngleIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("blockingAngle")),
        m_BlockingAngle));
  }
  if (m_ComboDurationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("comboDuration")),
        m_ComboDuration));
  }
  if (m_DamagePerShotIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("damagePerShot")),
        m_DamagePerShot));
  }
  if (m_FollowThroughIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("followThrough")),
        m_FollowThrough));
  }
  if (m_HeavyAttackDamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("heavyAttackDamage")),
        m_HeavyAttackDamage));
  }
  if (m_HeavySlamAttackIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("heavySlamAttack")),
        m_HeavySlamAttack));
  }
  if (m_HeavySlamRadialDamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("heavySlamRadialDamage")),
        m_HeavySlamRadialDamage));
  }
  if (m_HeavySlamRadiusIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("heavySlamRadius")),
        m_HeavySlamRadius));
  }
  if (m_RangeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("range")), m_Range));
  }
  if (m_SlamAttackIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slamAttack")),
        m_SlamAttack));
  }
  if (m_SlamRadialDamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slamRadialDamage")),
        m_SlamRadialDamage));
  }
  if (m_SlamRadiusIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slamRadius")),
        m_SlamRadius));
  }
  if (m_SlideAttackIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slideAttack")),
        m_SlideAttack));
  }
  if (m_StancePolarityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("stancePolarity")),
        m_StancePolarity));
  }
  if (m_WindUpIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("windUp")), m_WindUp));
  }
}

bool MeleeWeapon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("uniqueName")))) {
    utility::string_t refVal_setUniqueName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("uniqueName"))),
        refVal_setUniqueName);
    setUniqueName(refVal_setUniqueName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("description")))) {
    utility::string_t refVal_setDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("description"))),
        refVal_setDescription);
    setDescription(refVal_setDescription);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tradable")))) {
    bool refVal_setTradable;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tradable"))),
        refVal_setTradable);
    setTradable(refVal_setTradable);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("category")))) {
    utility::string_t refVal_setCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("category"))),
        refVal_setCategory);
    setCategory(refVal_setCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("productCategory")))) {
    utility::string_t refVal_setProductCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("productCategory"))),
        refVal_setProductCategory);
    setProductCategory(refVal_setProductCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("patchlogs")))) {
    std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("patchlogs"))),
        refVal_setPatchlogs);
    setPatchlogs(refVal_setPatchlogs);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("components")))) {
    std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("components"))),
        refVal_setComponents);
    setComponents(refVal_setComponents);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("introduced")))) {
    std::shared_ptr<Introduced> refVal_setIntroduced;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("introduced"))),
        refVal_setIntroduced);
    setIntroduced(refVal_setIntroduced);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    utility::datetime refVal_setEstimatedVaultDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("estimatedVaultDate"))),
        refVal_setEstimatedVaultDate);
    setEstimatedVaultDate(refVal_setEstimatedVaultDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("url")))) {
    utility::string_t refVal_setUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("url"))),
        refVal_setUrl);
    setUrl(refVal_setUrl);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("mr")))) {
    double refVal_setMr;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("mr"))),
        refVal_setMr);
    setMr(refVal_setMr);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("riven_disposition")))) {
    double refVal_setRivenDisposition;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("riven_disposition"))),
        refVal_setRivenDisposition);
    setRivenDisposition(refVal_setRivenDisposition);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("polarities")))) {
    std::vector<std::shared_ptr<Polarity>> refVal_setPolarities;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("polarities"))),
        refVal_setPolarities);
    setPolarities(refVal_setPolarities);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("thumbnail")))) {
    utility::string_t refVal_setThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("thumbnail"))),
        refVal_setThumbnail);
    setThumbnail(refVal_setThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tags")))) {
    std::vector<utility::string_t> refVal_setTags;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tags"))),
        refVal_setTags);
    setTags(refVal_setTags);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("vaulted")))) {
    bool refVal_setVaulted;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("vaulted"))),
        refVal_setVaulted);
    setVaulted(refVal_setVaulted);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("marketCost")))) {
    utility::string_t refVal_setMarketCost;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("marketCost"))),
        refVal_setMarketCost);
    setMarketCost(refVal_setMarketCost);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("bpCost")))) {
    utility::string_t refVal_setBpCost;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("bpCost"))),
        refVal_setBpCost);
    setBpCost(refVal_setBpCost);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("attacks")))) {
    std::vector<std::shared_ptr<Attack>> refVal_setAttacks;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("attacks"))),
        refVal_setAttacks);
    setAttacks(refVal_setAttacks);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("masteryReq")))) {
    int32_t refVal_setMasteryReq;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("masteryReq"))),
        refVal_setMasteryReq);
    setMasteryReq(refVal_setMasteryReq);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildPrice")))) {
    int32_t refVal_setBuildPrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildPrice"))),
        refVal_setBuildPrice);
    setBuildPrice(refVal_setBuildPrice);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildTime")))) {
    int32_t refVal_setBuildTime;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildTime"))),
        refVal_setBuildTime);
    setBuildTime(refVal_setBuildTime);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("skipBuildTimePrice")))) {
    int32_t refVal_setSkipBuildTimePrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("skipBuildTimePrice"))),
        refVal_setSkipBuildTimePrice);
    setSkipBuildTimePrice(refVal_setSkipBuildTimePrice);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildQuantity")))) {
    int32_t refVal_setBuildQuantity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildQuantity"))),
        refVal_setBuildQuantity);
    setBuildQuantity(refVal_setBuildQuantity);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("consumeOnBuild")))) {
    bool refVal_setConsumeOnBuild;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("consumeOnBuild"))),
        refVal_setConsumeOnBuild);
    setConsumeOnBuild(refVal_setConsumeOnBuild);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("wikiaThumbnail")))) {
    utility::string_t refVal_setWikiaThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("wikiaThumbnail"))),
        refVal_setWikiaThumbnail);
    setWikiaThumbnail(refVal_setWikiaThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("wikiaUrl")))) {
    utility::string_t refVal_setWikiaUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("wikiaUrl"))),
        refVal_setWikiaUrl);
    setWikiaUrl(refVal_setWikiaUrl);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("criticalChance")))) {
    float refVal_setCriticalChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("criticalChance"))),
        refVal_setCriticalChance);
    setCriticalChance(refVal_setCriticalChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("criticalMultiplier")))) {
    float refVal_setCriticalMultiplier;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("criticalMultiplier"))),
        refVal_setCriticalMultiplier);
    setCriticalMultiplier(refVal_setCriticalMultiplier);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("disposition")))) {
    int32_t refVal_setDisposition;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("disposition"))),
        refVal_setDisposition);
    setDisposition(refVal_setDisposition);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("fireRate")))) {
    float refVal_setFireRate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("fireRate"))),
        refVal_setFireRate);
    setFireRate(refVal_setFireRate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("omegaAttenuation")))) {
    float refVal_setOmegaAttenuation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("omegaAttenuation"))),
        refVal_setOmegaAttenuation);
    setOmegaAttenuation(refVal_setOmegaAttenuation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("procChance")))) {
    float refVal_setProcChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("procChance"))),
        refVal_setProcChance);
    setProcChance(refVal_setProcChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("releaseDate")))) {
    float refVal_setReleaseDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("releaseDate"))),
        refVal_setReleaseDate);
    setReleaseDate(refVal_setReleaseDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("slot")))) {
    int32_t refVal_setSlot;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("slot"))),
        refVal_setSlot);
    setSlot(refVal_setSlot);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("totalDamage")))) {
    int32_t refVal_setTotalDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("totalDamage"))),
        refVal_setTotalDamage);
    setTotalDamage(refVal_setTotalDamage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("vaultDate")))) {
    utility::datetime refVal_setVaultDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("vaultDate"))),
        refVal_setVaultDate);
    setVaultDate(refVal_setVaultDate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("blockingAngle")))) {
    int32_t refVal_setBlockingAngle;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("blockingAngle"))),
        refVal_setBlockingAngle);
    setBlockingAngle(refVal_setBlockingAngle);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("comboDuration")))) {
    int32_t refVal_setComboDuration;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("comboDuration"))),
        refVal_setComboDuration);
    setComboDuration(refVal_setComboDuration);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("damagePerShot")))) {
    std::vector<float> refVal_setDamagePerShot;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("damagePerShot"))),
        refVal_setDamagePerShot);
    setDamagePerShot(refVal_setDamagePerShot);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("followThrough")))) {
    float refVal_setFollowThrough;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("followThrough"))),
        refVal_setFollowThrough);
    setFollowThrough(refVal_setFollowThrough);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("heavyAttackDamage")))) {
    int32_t refVal_setHeavyAttackDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("heavyAttackDamage"))),
        refVal_setHeavyAttackDamage);
    setHeavyAttackDamage(refVal_setHeavyAttackDamage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("heavySlamAttack")))) {
    int32_t refVal_setHeavySlamAttack;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("heavySlamAttack"))),
        refVal_setHeavySlamAttack);
    setHeavySlamAttack(refVal_setHeavySlamAttack);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("heavySlamRadialDamage")))) {
    int32_t refVal_setHeavySlamRadialDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("heavySlamRadialDamage"))),
        refVal_setHeavySlamRadialDamage);
    setHeavySlamRadialDamage(refVal_setHeavySlamRadialDamage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("heavySlamRadius")))) {
    int32_t refVal_setHeavySlamRadius;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("heavySlamRadius"))),
        refVal_setHeavySlamRadius);
    setHeavySlamRadius(refVal_setHeavySlamRadius);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("range")))) {
    float refVal_setRange;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("range"))),
        refVal_setRange);
    setRange(refVal_setRange);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("slamAttack")))) {
    int32_t refVal_setSlamAttack;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("slamAttack"))),
        refVal_setSlamAttack);
    setSlamAttack(refVal_setSlamAttack);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("slamRadialDamage")))) {
    int32_t refVal_setSlamRadialDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("slamRadialDamage"))),
        refVal_setSlamRadialDamage);
    setSlamRadialDamage(refVal_setSlamRadialDamage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("slamRadius")))) {
    int32_t refVal_setSlamRadius;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("slamRadius"))),
        refVal_setSlamRadius);
    setSlamRadius(refVal_setSlamRadius);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("slideAttack")))) {
    int32_t refVal_setSlideAttack;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("slideAttack"))),
        refVal_setSlideAttack);
    setSlideAttack(refVal_setSlideAttack);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("stancePolarity")))) {
    std::shared_ptr<Polarity> refVal_setStancePolarity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("stancePolarity"))),
        refVal_setStancePolarity);
    setStancePolarity(refVal_setStancePolarity);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("windUp")))) {
    float refVal_setWindUp;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("windUp"))),
        refVal_setWindUp);
    setWindUp(refVal_setWindUp);
  }
  return ok;
}

utility::string_t MeleeWeapon::getName() const { return m_Name; }

void MeleeWeapon::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool MeleeWeapon::nameIsSet() const { return m_NameIsSet; }

void MeleeWeapon::unsetName() { m_NameIsSet = false; }
utility::string_t MeleeWeapon::getUniqueName() const { return m_UniqueName; }

void MeleeWeapon::setUniqueName(const utility::string_t &value) {
  m_UniqueName = value;
  m_UniqueNameIsSet = true;
}

bool MeleeWeapon::uniqueNameIsSet() const { return m_UniqueNameIsSet; }

void MeleeWeapon::unsetUniqueName() { m_UniqueNameIsSet = false; }
utility::string_t MeleeWeapon::getDescription() const { return m_Description; }

void MeleeWeapon::setDescription(const utility::string_t &value) {
  m_Description = value;
  m_DescriptionIsSet = true;
}

bool MeleeWeapon::descriptionIsSet() const { return m_DescriptionIsSet; }

void MeleeWeapon::unsetDescription() { m_DescriptionIsSet = false; }
utility::string_t MeleeWeapon::getType() const { return m_Type; }

void MeleeWeapon::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool MeleeWeapon::typeIsSet() const { return m_TypeIsSet; }

void MeleeWeapon::unsetType() { m_TypeIsSet = false; }
bool MeleeWeapon::isTradable() const { return m_Tradable; }

void MeleeWeapon::setTradable(bool value) {
  m_Tradable = value;
  m_TradableIsSet = true;
}

bool MeleeWeapon::tradableIsSet() const { return m_TradableIsSet; }

void MeleeWeapon::unsetTradable() { m_TradableIsSet = false; }
utility::string_t MeleeWeapon::getCategory() const { return m_Category; }

void MeleeWeapon::setCategory(const utility::string_t &value) {
  m_Category = value;
  m_CategoryIsSet = true;
}

bool MeleeWeapon::categoryIsSet() const { return m_CategoryIsSet; }

void MeleeWeapon::unsetCategory() { m_CategoryIsSet = false; }
utility::string_t MeleeWeapon::getProductCategory() const {
  return m_ProductCategory;
}

void MeleeWeapon::setProductCategory(const utility::string_t &value) {
  m_ProductCategory = value;
  m_ProductCategoryIsSet = true;
}

bool MeleeWeapon::productCategoryIsSet() const {
  return m_ProductCategoryIsSet;
}

void MeleeWeapon::unsetProductCategory() { m_ProductCategoryIsSet = false; }
std::vector<std::shared_ptr<Patchlog>> &MeleeWeapon::getPatchlogs() {
  return m_Patchlogs;
}

void MeleeWeapon::setPatchlogs(
    const std::vector<std::shared_ptr<Patchlog>> &value) {
  m_Patchlogs = value;
  m_PatchlogsIsSet = true;
}

bool MeleeWeapon::patchlogsIsSet() const { return m_PatchlogsIsSet; }

void MeleeWeapon::unsetPatchlogs() { m_PatchlogsIsSet = false; }
std::vector<std::shared_ptr<ShallowItem>> &MeleeWeapon::getComponents() {
  return m_Components;
}

void MeleeWeapon::setComponents(
    const std::vector<std::shared_ptr<ShallowItem>> &value) {
  m_Components = value;
  m_ComponentsIsSet = true;
}

bool MeleeWeapon::componentsIsSet() const { return m_ComponentsIsSet; }

void MeleeWeapon::unsetComponents() { m_ComponentsIsSet = false; }
std::shared_ptr<Introduced> MeleeWeapon::getIntroduced() const {
  return m_Introduced;
}

void MeleeWeapon::setIntroduced(const std::shared_ptr<Introduced> &value) {
  m_Introduced = value;
  m_IntroducedIsSet = true;
}

bool MeleeWeapon::introducedIsSet() const { return m_IntroducedIsSet; }

void MeleeWeapon::unsetIntroduced() { m_IntroducedIsSet = false; }
utility::datetime MeleeWeapon::getEstimatedVaultDate() const {
  return m_EstimatedVaultDate;
}

void MeleeWeapon::setEstimatedVaultDate(const utility::datetime &value) {
  m_EstimatedVaultDate = value;
  m_EstimatedVaultDateIsSet = true;
}

bool MeleeWeapon::estimatedVaultDateIsSet() const {
  return m_EstimatedVaultDateIsSet;
}

void MeleeWeapon::unsetEstimatedVaultDate() {
  m_EstimatedVaultDateIsSet = false;
}
utility::string_t MeleeWeapon::getUrl() const { return m_Url; }

void MeleeWeapon::setUrl(const utility::string_t &value) {
  m_Url = value;
  m_UrlIsSet = true;
}

bool MeleeWeapon::urlIsSet() const { return m_UrlIsSet; }

void MeleeWeapon::unsetUrl() { m_UrlIsSet = false; }
double MeleeWeapon::getMr() const { return m_Mr; }

void MeleeWeapon::setMr(double value) {
  m_Mr = value;
  m_MrIsSet = true;
}

bool MeleeWeapon::mrIsSet() const { return m_MrIsSet; }

void MeleeWeapon::unsetMr() { m_MrIsSet = false; }
double MeleeWeapon::getRivenDisposition() const { return m_Riven_disposition; }

void MeleeWeapon::setRivenDisposition(double value) {
  m_Riven_disposition = value;
  m_Riven_dispositionIsSet = true;
}

bool MeleeWeapon::rivenDispositionIsSet() const {
  return m_Riven_dispositionIsSet;
}

void MeleeWeapon::unsetRiven_disposition() { m_Riven_dispositionIsSet = false; }
std::vector<std::shared_ptr<Polarity>> &MeleeWeapon::getPolarities() {
  return m_Polarities;
}

void MeleeWeapon::setPolarities(
    const std::vector<std::shared_ptr<Polarity>> &value) {
  m_Polarities = value;
  m_PolaritiesIsSet = true;
}

bool MeleeWeapon::polaritiesIsSet() const { return m_PolaritiesIsSet; }

void MeleeWeapon::unsetPolarities() { m_PolaritiesIsSet = false; }
utility::string_t MeleeWeapon::getThumbnail() const { return m_Thumbnail; }

void MeleeWeapon::setThumbnail(const utility::string_t &value) {
  m_Thumbnail = value;
  m_ThumbnailIsSet = true;
}

bool MeleeWeapon::thumbnailIsSet() const { return m_ThumbnailIsSet; }

void MeleeWeapon::unsetThumbnail() { m_ThumbnailIsSet = false; }
std::vector<utility::string_t> &MeleeWeapon::getTags() { return m_Tags; }

void MeleeWeapon::setTags(const std::vector<utility::string_t> &value) {
  m_Tags = value;
  m_TagsIsSet = true;
}

bool MeleeWeapon::tagsIsSet() const { return m_TagsIsSet; }

void MeleeWeapon::unsetTags() { m_TagsIsSet = false; }
bool MeleeWeapon::isVaulted() const { return m_Vaulted; }

void MeleeWeapon::setVaulted(bool value) {
  m_Vaulted = value;
  m_VaultedIsSet = true;
}

bool MeleeWeapon::vaultedIsSet() const { return m_VaultedIsSet; }

void MeleeWeapon::unsetVaulted() { m_VaultedIsSet = false; }
utility::string_t MeleeWeapon::getMarketCost() const { return m_MarketCost; }

void MeleeWeapon::setMarketCost(const utility::string_t &value) {
  m_MarketCost = value;
  m_MarketCostIsSet = true;
}

bool MeleeWeapon::marketCostIsSet() const { return m_MarketCostIsSet; }

void MeleeWeapon::unsetMarketCost() { m_MarketCostIsSet = false; }
utility::string_t MeleeWeapon::getBpCost() const { return m_BpCost; }

void MeleeWeapon::setBpCost(const utility::string_t &value) {
  m_BpCost = value;
  m_BpCostIsSet = true;
}

bool MeleeWeapon::bpCostIsSet() const { return m_BpCostIsSet; }

void MeleeWeapon::unsetBpCost() { m_BpCostIsSet = false; }
std::vector<std::shared_ptr<Attack>> &MeleeWeapon::getAttacks() {
  return m_Attacks;
}

void MeleeWeapon::setAttacks(
    const std::vector<std::shared_ptr<Attack>> &value) {
  m_Attacks = value;
  m_AttacksIsSet = true;
}

bool MeleeWeapon::attacksIsSet() const { return m_AttacksIsSet; }

void MeleeWeapon::unsetAttacks() { m_AttacksIsSet = false; }
int32_t MeleeWeapon::getMasteryReq() const { return m_MasteryReq; }

void MeleeWeapon::setMasteryReq(int32_t value) {
  m_MasteryReq = value;
  m_MasteryReqIsSet = true;
}

bool MeleeWeapon::masteryReqIsSet() const { return m_MasteryReqIsSet; }

void MeleeWeapon::unsetMasteryReq() { m_MasteryReqIsSet = false; }
int32_t MeleeWeapon::getBuildPrice() const { return m_BuildPrice; }

void MeleeWeapon::setBuildPrice(int32_t value) {
  m_BuildPrice = value;
  m_BuildPriceIsSet = true;
}

bool MeleeWeapon::buildPriceIsSet() const { return m_BuildPriceIsSet; }

void MeleeWeapon::unsetBuildPrice() { m_BuildPriceIsSet = false; }
int32_t MeleeWeapon::getBuildTime() const { return m_BuildTime; }

void MeleeWeapon::setBuildTime(int32_t value) {
  m_BuildTime = value;
  m_BuildTimeIsSet = true;
}

bool MeleeWeapon::buildTimeIsSet() const { return m_BuildTimeIsSet; }

void MeleeWeapon::unsetBuildTime() { m_BuildTimeIsSet = false; }
int32_t MeleeWeapon::getSkipBuildTimePrice() const {
  return m_SkipBuildTimePrice;
}

void MeleeWeapon::setSkipBuildTimePrice(int32_t value) {
  m_SkipBuildTimePrice = value;
  m_SkipBuildTimePriceIsSet = true;
}

bool MeleeWeapon::skipBuildTimePriceIsSet() const {
  return m_SkipBuildTimePriceIsSet;
}

void MeleeWeapon::unsetSkipBuildTimePrice() {
  m_SkipBuildTimePriceIsSet = false;
}
int32_t MeleeWeapon::getBuildQuantity() const { return m_BuildQuantity; }

void MeleeWeapon::setBuildQuantity(int32_t value) {
  m_BuildQuantity = value;
  m_BuildQuantityIsSet = true;
}

bool MeleeWeapon::buildQuantityIsSet() const { return m_BuildQuantityIsSet; }

void MeleeWeapon::unsetBuildQuantity() { m_BuildQuantityIsSet = false; }
bool MeleeWeapon::isConsumeOnBuild() const { return m_ConsumeOnBuild; }

void MeleeWeapon::setConsumeOnBuild(bool value) {
  m_ConsumeOnBuild = value;
  m_ConsumeOnBuildIsSet = true;
}

bool MeleeWeapon::consumeOnBuildIsSet() const { return m_ConsumeOnBuildIsSet; }

void MeleeWeapon::unsetConsumeOnBuild() { m_ConsumeOnBuildIsSet = false; }
utility::string_t MeleeWeapon::getWikiaThumbnail() const {
  return m_WikiaThumbnail;
}

void MeleeWeapon::setWikiaThumbnail(const utility::string_t &value) {
  m_WikiaThumbnail = value;
  m_WikiaThumbnailIsSet = true;
}

bool MeleeWeapon::wikiaThumbnailIsSet() const { return m_WikiaThumbnailIsSet; }

void MeleeWeapon::unsetWikiaThumbnail() { m_WikiaThumbnailIsSet = false; }
utility::string_t MeleeWeapon::getWikiaUrl() const { return m_WikiaUrl; }

void MeleeWeapon::setWikiaUrl(const utility::string_t &value) {
  m_WikiaUrl = value;
  m_WikiaUrlIsSet = true;
}

bool MeleeWeapon::wikiaUrlIsSet() const { return m_WikiaUrlIsSet; }

void MeleeWeapon::unsetWikiaUrl() { m_WikiaUrlIsSet = false; }
float MeleeWeapon::getCriticalChance() const { return m_CriticalChance; }

void MeleeWeapon::setCriticalChance(float value) {
  m_CriticalChance = value;
  m_CriticalChanceIsSet = true;
}

bool MeleeWeapon::criticalChanceIsSet() const { return m_CriticalChanceIsSet; }

void MeleeWeapon::unsetCriticalChance() { m_CriticalChanceIsSet = false; }
float MeleeWeapon::getCriticalMultiplier() const {
  return m_CriticalMultiplier;
}

void MeleeWeapon::setCriticalMultiplier(float value) {
  m_CriticalMultiplier = value;
  m_CriticalMultiplierIsSet = true;
}

bool MeleeWeapon::criticalMultiplierIsSet() const {
  return m_CriticalMultiplierIsSet;
}

void MeleeWeapon::unsetCriticalMultiplier() {
  m_CriticalMultiplierIsSet = false;
}
int32_t MeleeWeapon::getDisposition() const { return m_Disposition; }

void MeleeWeapon::setDisposition(int32_t value) {
  m_Disposition = value;
  m_DispositionIsSet = true;
}

bool MeleeWeapon::dispositionIsSet() const { return m_DispositionIsSet; }

void MeleeWeapon::unsetDisposition() { m_DispositionIsSet = false; }
float MeleeWeapon::getFireRate() const { return m_FireRate; }

void MeleeWeapon::setFireRate(float value) {
  m_FireRate = value;
  m_FireRateIsSet = true;
}

bool MeleeWeapon::fireRateIsSet() const { return m_FireRateIsSet; }

void MeleeWeapon::unsetFireRate() { m_FireRateIsSet = false; }
float MeleeWeapon::getOmegaAttenuation() const { return m_OmegaAttenuation; }

void MeleeWeapon::setOmegaAttenuation(float value) {
  m_OmegaAttenuation = value;
  m_OmegaAttenuationIsSet = true;
}

bool MeleeWeapon::omegaAttenuationIsSet() const {
  return m_OmegaAttenuationIsSet;
}

void MeleeWeapon::unsetOmegaAttenuation() { m_OmegaAttenuationIsSet = false; }
float MeleeWeapon::getProcChance() const { return m_ProcChance; }

void MeleeWeapon::setProcChance(float value) {
  m_ProcChance = value;
  m_ProcChanceIsSet = true;
}

bool MeleeWeapon::procChanceIsSet() const { return m_ProcChanceIsSet; }

void MeleeWeapon::unsetProcChance() { m_ProcChanceIsSet = false; }
float MeleeWeapon::getReleaseDate() const { return m_ReleaseDate; }

void MeleeWeapon::setReleaseDate(float value) {
  m_ReleaseDate = value;
  m_ReleaseDateIsSet = true;
}

bool MeleeWeapon::releaseDateIsSet() const { return m_ReleaseDateIsSet; }

void MeleeWeapon::unsetReleaseDate() { m_ReleaseDateIsSet = false; }
int32_t MeleeWeapon::getSlot() const { return m_Slot; }

void MeleeWeapon::setSlot(int32_t value) {
  m_Slot = value;
  m_SlotIsSet = true;
}

bool MeleeWeapon::slotIsSet() const { return m_SlotIsSet; }

void MeleeWeapon::unsetSlot() { m_SlotIsSet = false; }
int32_t MeleeWeapon::getTotalDamage() const { return m_TotalDamage; }

void MeleeWeapon::setTotalDamage(int32_t value) {
  m_TotalDamage = value;
  m_TotalDamageIsSet = true;
}

bool MeleeWeapon::totalDamageIsSet() const { return m_TotalDamageIsSet; }

void MeleeWeapon::unsetTotalDamage() { m_TotalDamageIsSet = false; }
utility::datetime MeleeWeapon::getVaultDate() const { return m_VaultDate; }

void MeleeWeapon::setVaultDate(const utility::datetime &value) {
  m_VaultDate = value;
  m_VaultDateIsSet = true;
}

bool MeleeWeapon::vaultDateIsSet() const { return m_VaultDateIsSet; }

void MeleeWeapon::unsetVaultDate() { m_VaultDateIsSet = false; }
int32_t MeleeWeapon::getBlockingAngle() const { return m_BlockingAngle; }

void MeleeWeapon::setBlockingAngle(int32_t value) {
  m_BlockingAngle = value;
  m_BlockingAngleIsSet = true;
}

bool MeleeWeapon::blockingAngleIsSet() const { return m_BlockingAngleIsSet; }

void MeleeWeapon::unsetBlockingAngle() { m_BlockingAngleIsSet = false; }
int32_t MeleeWeapon::getComboDuration() const { return m_ComboDuration; }

void MeleeWeapon::setComboDuration(int32_t value) {
  m_ComboDuration = value;
  m_ComboDurationIsSet = true;
}

bool MeleeWeapon::comboDurationIsSet() const { return m_ComboDurationIsSet; }

void MeleeWeapon::unsetComboDuration() { m_ComboDurationIsSet = false; }
std::vector<float> &MeleeWeapon::getDamagePerShot() { return m_DamagePerShot; }

void MeleeWeapon::setDamagePerShot(std::vector<float> value) {
  m_DamagePerShot = value;
  m_DamagePerShotIsSet = true;
}

bool MeleeWeapon::damagePerShotIsSet() const { return m_DamagePerShotIsSet; }

void MeleeWeapon::unsetDamagePerShot() { m_DamagePerShotIsSet = false; }
float MeleeWeapon::getFollowThrough() const { return m_FollowThrough; }

void MeleeWeapon::setFollowThrough(float value) {
  m_FollowThrough = value;
  m_FollowThroughIsSet = true;
}

bool MeleeWeapon::followThroughIsSet() const { return m_FollowThroughIsSet; }

void MeleeWeapon::unsetFollowThrough() { m_FollowThroughIsSet = false; }
int32_t MeleeWeapon::getHeavyAttackDamage() const {
  return m_HeavyAttackDamage;
}

void MeleeWeapon::setHeavyAttackDamage(int32_t value) {
  m_HeavyAttackDamage = value;
  m_HeavyAttackDamageIsSet = true;
}

bool MeleeWeapon::heavyAttackDamageIsSet() const {
  return m_HeavyAttackDamageIsSet;
}

void MeleeWeapon::unsetHeavyAttackDamage() { m_HeavyAttackDamageIsSet = false; }
int32_t MeleeWeapon::getHeavySlamAttack() const { return m_HeavySlamAttack; }

void MeleeWeapon::setHeavySlamAttack(int32_t value) {
  m_HeavySlamAttack = value;
  m_HeavySlamAttackIsSet = true;
}

bool MeleeWeapon::heavySlamAttackIsSet() const {
  return m_HeavySlamAttackIsSet;
}

void MeleeWeapon::unsetHeavySlamAttack() { m_HeavySlamAttackIsSet = false; }
int32_t MeleeWeapon::getHeavySlamRadialDamage() const {
  return m_HeavySlamRadialDamage;
}

void MeleeWeapon::setHeavySlamRadialDamage(int32_t value) {
  m_HeavySlamRadialDamage = value;
  m_HeavySlamRadialDamageIsSet = true;
}

bool MeleeWeapon::heavySlamRadialDamageIsSet() const {
  return m_HeavySlamRadialDamageIsSet;
}

void MeleeWeapon::unsetHeavySlamRadialDamage() {
  m_HeavySlamRadialDamageIsSet = false;
}
int32_t MeleeWeapon::getHeavySlamRadius() const { return m_HeavySlamRadius; }

void MeleeWeapon::setHeavySlamRadius(int32_t value) {
  m_HeavySlamRadius = value;
  m_HeavySlamRadiusIsSet = true;
}

bool MeleeWeapon::heavySlamRadiusIsSet() const {
  return m_HeavySlamRadiusIsSet;
}

void MeleeWeapon::unsetHeavySlamRadius() { m_HeavySlamRadiusIsSet = false; }
float MeleeWeapon::getRange() const { return m_Range; }

void MeleeWeapon::setRange(float value) {
  m_Range = value;
  m_RangeIsSet = true;
}

bool MeleeWeapon::rangeIsSet() const { return m_RangeIsSet; }

void MeleeWeapon::unsetRange() { m_RangeIsSet = false; }
int32_t MeleeWeapon::getSlamAttack() const { return m_SlamAttack; }

void MeleeWeapon::setSlamAttack(int32_t value) {
  m_SlamAttack = value;
  m_SlamAttackIsSet = true;
}

bool MeleeWeapon::slamAttackIsSet() const { return m_SlamAttackIsSet; }

void MeleeWeapon::unsetSlamAttack() { m_SlamAttackIsSet = false; }
int32_t MeleeWeapon::getSlamRadialDamage() const { return m_SlamRadialDamage; }

void MeleeWeapon::setSlamRadialDamage(int32_t value) {
  m_SlamRadialDamage = value;
  m_SlamRadialDamageIsSet = true;
}

bool MeleeWeapon::slamRadialDamageIsSet() const {
  return m_SlamRadialDamageIsSet;
}

void MeleeWeapon::unsetSlamRadialDamage() { m_SlamRadialDamageIsSet = false; }
int32_t MeleeWeapon::getSlamRadius() const { return m_SlamRadius; }

void MeleeWeapon::setSlamRadius(int32_t value) {
  m_SlamRadius = value;
  m_SlamRadiusIsSet = true;
}

bool MeleeWeapon::slamRadiusIsSet() const { return m_SlamRadiusIsSet; }

void MeleeWeapon::unsetSlamRadius() { m_SlamRadiusIsSet = false; }
int32_t MeleeWeapon::getSlideAttack() const { return m_SlideAttack; }

void MeleeWeapon::setSlideAttack(int32_t value) {
  m_SlideAttack = value;
  m_SlideAttackIsSet = true;
}

bool MeleeWeapon::slideAttackIsSet() const { return m_SlideAttackIsSet; }

void MeleeWeapon::unsetSlideAttack() { m_SlideAttackIsSet = false; }
std::shared_ptr<Polarity> MeleeWeapon::getStancePolarity() const {
  return m_StancePolarity;
}

void MeleeWeapon::setStancePolarity(const std::shared_ptr<Polarity> &value) {
  m_StancePolarity = value;
  m_StancePolarityIsSet = true;
}

bool MeleeWeapon::stancePolarityIsSet() const { return m_StancePolarityIsSet; }

void MeleeWeapon::unsetStancePolarity() { m_StancePolarityIsSet = false; }
float MeleeWeapon::getWindUp() const { return m_WindUp; }

void MeleeWeapon::setWindUp(float value) {
  m_WindUp = value;
  m_WindUpIsSet = true;
}

bool MeleeWeapon::windUpIsSet() const { return m_WindUpIsSet; }

void MeleeWeapon::unsetWindUp() { m_WindUpIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
