/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/GetOutpostsByPlatform_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GetOutpostsByPlatform_200_response::GetOutpostsByPlatform_200_response() {
  m_MissionIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_PreviousIsSet = false;
}

GetOutpostsByPlatform_200_response::~GetOutpostsByPlatform_200_response() {}

void GetOutpostsByPlatform_200_response::validate() {
  // TODO: implement validation
}

web::json::value GetOutpostsByPlatform_200_response::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_MissionIsSet) {
    val[utility::conversions::to_string_t(U("mission"))] =
        ModelBase::toJson(m_Mission);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_PreviousIsSet) {
    val[utility::conversions::to_string_t(U("previous"))] =
        ModelBase::toJson(m_Previous);
  }

  return val;
}

bool GetOutpostsByPlatform_200_response::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("mission")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("mission")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Mission> refVal_setMission;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMission);
      setMission(refVal_setMission);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("previous")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("previous")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<GetOutpostsByPlatform_200_response_previous>
          refVal_setPrevious;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrevious);
      setPrevious(refVal_setPrevious);
    }
  }
  return ok;
}

void GetOutpostsByPlatform_200_response::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_MissionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("mission")),
        m_Mission));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_PreviousIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("previous")),
        m_Previous));
  }
}

bool GetOutpostsByPlatform_200_response::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("mission")))) {
    std::shared_ptr<Mission> refVal_setMission;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("mission"))),
        refVal_setMission);
    setMission(refVal_setMission);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("previous")))) {
    std::shared_ptr<GetOutpostsByPlatform_200_response_previous>
        refVal_setPrevious;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("previous"))),
        refVal_setPrevious);
    setPrevious(refVal_setPrevious);
  }
  return ok;
}

std::shared_ptr<Mission>
GetOutpostsByPlatform_200_response::getMission() const {
  return m_Mission;
}

void GetOutpostsByPlatform_200_response::setMission(
    const std::shared_ptr<Mission> &value) {
  m_Mission = value;
  m_MissionIsSet = true;
}

bool GetOutpostsByPlatform_200_response::missionIsSet() const {
  return m_MissionIsSet;
}

void GetOutpostsByPlatform_200_response::unsetMission() {
  m_MissionIsSet = false;
}
bool GetOutpostsByPlatform_200_response::isActive() const { return m_Active; }

void GetOutpostsByPlatform_200_response::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool GetOutpostsByPlatform_200_response::activeIsSet() const {
  return m_ActiveIsSet;
}

void GetOutpostsByPlatform_200_response::unsetActive() {
  m_ActiveIsSet = false;
}
utility::string_t GetOutpostsByPlatform_200_response::getId() const {
  return m_Id;
}

void GetOutpostsByPlatform_200_response::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool GetOutpostsByPlatform_200_response::idIsSet() const { return m_IdIsSet; }

void GetOutpostsByPlatform_200_response::unsetId() { m_IdIsSet = false; }
utility::datetime GetOutpostsByPlatform_200_response::getActivation() const {
  return m_Activation;
}

void GetOutpostsByPlatform_200_response::setActivation(
    const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool GetOutpostsByPlatform_200_response::activationIsSet() const {
  return m_ActivationIsSet;
}

void GetOutpostsByPlatform_200_response::unsetActivation() {
  m_ActivationIsSet = false;
}
utility::datetime GetOutpostsByPlatform_200_response::getExpiry() const {
  return m_Expiry;
}

void GetOutpostsByPlatform_200_response::setExpiry(
    const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool GetOutpostsByPlatform_200_response::expiryIsSet() const {
  return m_ExpiryIsSet;
}

void GetOutpostsByPlatform_200_response::unsetExpiry() {
  m_ExpiryIsSet = false;
}
std::shared_ptr<GetOutpostsByPlatform_200_response_previous>
GetOutpostsByPlatform_200_response::getPrevious() const {
  return m_Previous;
}

void GetOutpostsByPlatform_200_response::setPrevious(
    const std::shared_ptr<GetOutpostsByPlatform_200_response_previous> &value) {
  m_Previous = value;
  m_PreviousIsSet = true;
}

bool GetOutpostsByPlatform_200_response::previousIsSet() const {
  return m_PreviousIsSet;
}

void GetOutpostsByPlatform_200_response::unsetPrevious() {
  m_PreviousIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
