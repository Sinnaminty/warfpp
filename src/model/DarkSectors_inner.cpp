/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/DarkSectors_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DarkSectors_inner::DarkSectors_inner() {
  m_DefenderMOTD = utility::conversions::to_string_t("");
  m_DefenderMOTDIsSet = false;
  m_DeployerName = utility::conversions::to_string_t("");
  m_DeployerNameIsSet = false;
  m_DefenderDeploymentActivation = 0.0;
  m_DefenderDeploymentActivationIsSet = false;
  m_DefenderName = utility::conversions::to_string_t("");
  m_DefenderNameIsSet = false;
  m_DeployerClan = utility::conversions::to_string_t("");
  m_DeployerClanIsSet = false;
  m_IsAlliance = false;
  m_IsAllianceIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_HistoryIsSet = false;
}

DarkSectors_inner::~DarkSectors_inner() {}

void DarkSectors_inner::validate() {
  // TODO: implement validation
}

web::json::value DarkSectors_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_DefenderMOTDIsSet) {
    val[utility::conversions::to_string_t(U("defenderMOTD"))] =
        ModelBase::toJson(m_DefenderMOTD);
  }
  if (m_DeployerNameIsSet) {
    val[utility::conversions::to_string_t(U("deployerName"))] =
        ModelBase::toJson(m_DeployerName);
  }
  if (m_DefenderDeploymentActivationIsSet) {
    val[utility::conversions::to_string_t(U("defenderDeploymentActivation"))] =
        ModelBase::toJson(m_DefenderDeploymentActivation);
  }
  if (m_DefenderNameIsSet) {
    val[utility::conversions::to_string_t(U("defenderName"))] =
        ModelBase::toJson(m_DefenderName);
  }
  if (m_DeployerClanIsSet) {
    val[utility::conversions::to_string_t(U("deployerClan"))] =
        ModelBase::toJson(m_DeployerClan);
  }
  if (m_IsAllianceIsSet) {
    val[utility::conversions::to_string_t(U("isAlliance"))] =
        ModelBase::toJson(m_IsAlliance);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_HistoryIsSet) {
    val[utility::conversions::to_string_t(U("history"))] =
        ModelBase::toJson(m_History);
  }

  return val;
}

bool DarkSectors_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("defenderMOTD")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defenderMOTD")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDefenderMOTD;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefenderMOTD);
      setDefenderMOTD(refVal_setDefenderMOTD);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("deployerName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("deployerName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDeployerName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDeployerName);
      setDeployerName(refVal_setDeployerName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(
          U("defenderDeploymentActivation")))) {
    const web::json::value &fieldValue = val.at(
        utility::conversions::to_string_t(U("defenderDeploymentActivation")));
    if (!fieldValue.is_null()) {
      double refVal_setDefenderDeploymentActivation;
      ok &= ModelBase::fromJson(fieldValue,
                                refVal_setDefenderDeploymentActivation);
      setDefenderDeploymentActivation(refVal_setDefenderDeploymentActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("defenderName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defenderName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDefenderName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefenderName);
      setDefenderName(refVal_setDefenderName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("deployerClan")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("deployerClan")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDeployerClan;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDeployerClan);
      setDeployerClan(refVal_setDeployerClan);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isAlliance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isAlliance")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsAlliance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsAlliance);
      setIsAlliance(refVal_setIsAlliance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("history")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("history")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<DarkSectorHistory>> refVal_setHistory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHistory);
      setHistory(refVal_setHistory);
    }
  }
  return ok;
}

void DarkSectors_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_DefenderMOTDIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defenderMOTD")),
        m_DefenderMOTD));
  }
  if (m_DeployerNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("deployerName")),
        m_DeployerName));
  }
  if (m_DefenderDeploymentActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(
                         U("defenderDeploymentActivation")),
        m_DefenderDeploymentActivation));
  }
  if (m_DefenderNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defenderName")),
        m_DefenderName));
  }
  if (m_DeployerClanIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("deployerClan")),
        m_DeployerClan));
  }
  if (m_IsAllianceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isAlliance")),
        m_IsAlliance));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_HistoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("history")),
        m_History));
  }
}

bool DarkSectors_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("defenderMOTD")))) {
    utility::string_t refVal_setDefenderMOTD;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("defenderMOTD"))),
        refVal_setDefenderMOTD);
    setDefenderMOTD(refVal_setDefenderMOTD);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("deployerName")))) {
    utility::string_t refVal_setDeployerName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("deployerName"))),
        refVal_setDeployerName);
    setDeployerName(refVal_setDeployerName);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(
          U("defenderDeploymentActivation")))) {
    double refVal_setDefenderDeploymentActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(
            U("defenderDeploymentActivation"))),
        refVal_setDefenderDeploymentActivation);
    setDefenderDeploymentActivation(refVal_setDefenderDeploymentActivation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("defenderName")))) {
    utility::string_t refVal_setDefenderName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("defenderName"))),
        refVal_setDefenderName);
    setDefenderName(refVal_setDefenderName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("deployerClan")))) {
    utility::string_t refVal_setDeployerClan;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("deployerClan"))),
        refVal_setDeployerClan);
    setDeployerClan(refVal_setDeployerClan);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("isAlliance")))) {
    bool refVal_setIsAlliance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("isAlliance"))),
        refVal_setIsAlliance);
    setIsAlliance(refVal_setIsAlliance);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("history")))) {
    std::vector<std::shared_ptr<DarkSectorHistory>> refVal_setHistory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("history"))),
        refVal_setHistory);
    setHistory(refVal_setHistory);
  }
  return ok;
}

utility::string_t DarkSectors_inner::getDefenderMOTD() const {
  return m_DefenderMOTD;
}

void DarkSectors_inner::setDefenderMOTD(const utility::string_t &value) {
  m_DefenderMOTD = value;
  m_DefenderMOTDIsSet = true;
}

bool DarkSectors_inner::defenderMOTDIsSet() const {
  return m_DefenderMOTDIsSet;
}

void DarkSectors_inner::unsetDefenderMOTD() { m_DefenderMOTDIsSet = false; }
utility::string_t DarkSectors_inner::getDeployerName() const {
  return m_DeployerName;
}

void DarkSectors_inner::setDeployerName(const utility::string_t &value) {
  m_DeployerName = value;
  m_DeployerNameIsSet = true;
}

bool DarkSectors_inner::deployerNameIsSet() const {
  return m_DeployerNameIsSet;
}

void DarkSectors_inner::unsetDeployerName() { m_DeployerNameIsSet = false; }
double DarkSectors_inner::getDefenderDeploymentActivation() const {
  return m_DefenderDeploymentActivation;
}

void DarkSectors_inner::setDefenderDeploymentActivation(double value) {
  m_DefenderDeploymentActivation = value;
  m_DefenderDeploymentActivationIsSet = true;
}

bool DarkSectors_inner::defenderDeploymentActivationIsSet() const {
  return m_DefenderDeploymentActivationIsSet;
}

void DarkSectors_inner::unsetDefenderDeploymentActivation() {
  m_DefenderDeploymentActivationIsSet = false;
}
utility::string_t DarkSectors_inner::getDefenderName() const {
  return m_DefenderName;
}

void DarkSectors_inner::setDefenderName(const utility::string_t &value) {
  m_DefenderName = value;
  m_DefenderNameIsSet = true;
}

bool DarkSectors_inner::defenderNameIsSet() const {
  return m_DefenderNameIsSet;
}

void DarkSectors_inner::unsetDefenderName() { m_DefenderNameIsSet = false; }
utility::string_t DarkSectors_inner::getDeployerClan() const {
  return m_DeployerClan;
}

void DarkSectors_inner::setDeployerClan(const utility::string_t &value) {
  m_DeployerClan = value;
  m_DeployerClanIsSet = true;
}

bool DarkSectors_inner::deployerClanIsSet() const {
  return m_DeployerClanIsSet;
}

void DarkSectors_inner::unsetDeployerClan() { m_DeployerClanIsSet = false; }
bool DarkSectors_inner::isIsAlliance() const { return m_IsAlliance; }

void DarkSectors_inner::setIsAlliance(bool value) {
  m_IsAlliance = value;
  m_IsAllianceIsSet = true;
}

bool DarkSectors_inner::isAllianceIsSet() const { return m_IsAllianceIsSet; }

void DarkSectors_inner::unsetIsAlliance() { m_IsAllianceIsSet = false; }
utility::string_t DarkSectors_inner::getId() const { return m_Id; }

void DarkSectors_inner::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool DarkSectors_inner::idIsSet() const { return m_IdIsSet; }

void DarkSectors_inner::unsetId() { m_IdIsSet = false; }
std::vector<std::shared_ptr<DarkSectorHistory>> &
DarkSectors_inner::getHistory() {
  return m_History;
}

void DarkSectors_inner::setHistory(
    const std::vector<std::shared_ptr<DarkSectorHistory>> &value) {
  m_History = value;
  m_HistoryIsSet = true;
}

bool DarkSectors_inner::historyIsSet() const { return m_HistoryIsSet; }

void DarkSectors_inner::unsetHistory() { m_HistoryIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
