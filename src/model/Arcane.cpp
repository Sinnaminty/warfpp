/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Arcane.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Arcane::Arcane() {
  m_Regex = utility::conversions::to_string_t("");
  m_RegexIsSet = false;
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_Effect = utility::conversions::to_string_t("");
  m_EffectIsSet = false;
  m_Rarity = utility::conversions::to_string_t("");
  m_RarityIsSet = false;
  m_Location = utility::conversions::to_string_t("");
  m_LocationIsSet = false;
  m_Thumbnail = utility::conversions::to_string_t("");
  m_ThumbnailIsSet = false;
  m_Info = utility::conversions::to_string_t("");
  m_InfoIsSet = false;
}

Arcane::~Arcane() {}

void Arcane::validate() {
  // TODO: implement validation
}

web::json::value Arcane::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_RegexIsSet) {
    val[utility::conversions::to_string_t(U("regex"))] =
        ModelBase::toJson(m_Regex);
  }
  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_EffectIsSet) {
    val[utility::conversions::to_string_t(U("effect"))] =
        ModelBase::toJson(m_Effect);
  }
  if (m_RarityIsSet) {
    val[utility::conversions::to_string_t(U("rarity"))] =
        ModelBase::toJson(m_Rarity);
  }
  if (m_LocationIsSet) {
    val[utility::conversions::to_string_t(U("location"))] =
        ModelBase::toJson(m_Location);
  }
  if (m_ThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("thumbnail"))] =
        ModelBase::toJson(m_Thumbnail);
  }
  if (m_InfoIsSet) {
    val[utility::conversions::to_string_t(U("info"))] =
        ModelBase::toJson(m_Info);
  }

  return val;
}

bool Arcane::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("regex")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("regex")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRegex;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRegex);
      setRegex(refVal_setRegex);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("effect")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("effect")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEffect;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEffect);
      setEffect(refVal_setEffect);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rarity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rarity")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRarity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRarity);
      setRarity(refVal_setRarity);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("location")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("location")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setLocation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setLocation);
      setLocation(refVal_setLocation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("thumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("thumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
      setThumbnail(refVal_setThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("info")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("info")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setInfo;
      ok &= ModelBase::fromJson(fieldValue, refVal_setInfo);
      setInfo(refVal_setInfo);
    }
  }
  return ok;
}

void Arcane::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                         const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_RegexIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("regex")), m_Regex));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_EffectIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("effect")), m_Effect));
  }
  if (m_RarityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rarity")), m_Rarity));
  }
  if (m_LocationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("location")),
        m_Location));
  }
  if (m_ThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("thumbnail")),
        m_Thumbnail));
  }
  if (m_InfoIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("info")), m_Info));
  }
}

bool Arcane::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("regex")))) {
    utility::string_t refVal_setRegex;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("regex"))),
        refVal_setRegex);
    setRegex(refVal_setRegex);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("effect")))) {
    utility::string_t refVal_setEffect;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("effect"))),
        refVal_setEffect);
    setEffect(refVal_setEffect);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("rarity")))) {
    utility::string_t refVal_setRarity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("rarity"))),
        refVal_setRarity);
    setRarity(refVal_setRarity);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("location")))) {
    utility::string_t refVal_setLocation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("location"))),
        refVal_setLocation);
    setLocation(refVal_setLocation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("thumbnail")))) {
    utility::string_t refVal_setThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("thumbnail"))),
        refVal_setThumbnail);
    setThumbnail(refVal_setThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("info")))) {
    utility::string_t refVal_setInfo;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("info"))),
        refVal_setInfo);
    setInfo(refVal_setInfo);
  }
  return ok;
}

utility::string_t Arcane::getRegex() const { return m_Regex; }

void Arcane::setRegex(const utility::string_t &value) {
  m_Regex = value;
  m_RegexIsSet = true;
}

bool Arcane::regexIsSet() const { return m_RegexIsSet; }

void Arcane::unsetRegex() { m_RegexIsSet = false; }
utility::string_t Arcane::getName() const { return m_Name; }

void Arcane::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool Arcane::nameIsSet() const { return m_NameIsSet; }

void Arcane::unsetName() { m_NameIsSet = false; }
utility::string_t Arcane::getEffect() const { return m_Effect; }

void Arcane::setEffect(const utility::string_t &value) {
  m_Effect = value;
  m_EffectIsSet = true;
}

bool Arcane::effectIsSet() const { return m_EffectIsSet; }

void Arcane::unsetEffect() { m_EffectIsSet = false; }
utility::string_t Arcane::getRarity() const { return m_Rarity; }

void Arcane::setRarity(const utility::string_t &value) {
  m_Rarity = value;
  m_RarityIsSet = true;
}

bool Arcane::rarityIsSet() const { return m_RarityIsSet; }

void Arcane::unsetRarity() { m_RarityIsSet = false; }
utility::string_t Arcane::getLocation() const { return m_Location; }

void Arcane::setLocation(const utility::string_t &value) {
  m_Location = value;
  m_LocationIsSet = true;
}

bool Arcane::locationIsSet() const { return m_LocationIsSet; }

void Arcane::unsetLocation() { m_LocationIsSet = false; }
utility::string_t Arcane::getThumbnail() const { return m_Thumbnail; }

void Arcane::setThumbnail(const utility::string_t &value) {
  m_Thumbnail = value;
  m_ThumbnailIsSet = true;
}

bool Arcane::thumbnailIsSet() const { return m_ThumbnailIsSet; }

void Arcane::unsetThumbnail() { m_ThumbnailIsSet = false; }
utility::string_t Arcane::getInfo() const { return m_Info; }

void Arcane::setInfo(const utility::string_t &value) {
  m_Info = value;
  m_InfoIsSet = true;
}

bool Arcane::infoIsSet() const { return m_InfoIsSet; }

void Arcane::unsetInfo() { m_InfoIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
