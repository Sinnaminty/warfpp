/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Element.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

namespace {
using EnumUnderlyingType = utility::string_t;

Element::eElement toEnum(const EnumUnderlyingType &val) {
  if (val == utility::conversions::to_string_t(U("impact")))
    return Element::eElement::Element_IMPACT;
  if (val == utility::conversions::to_string_t(U("puncture")))
    return Element::eElement::Element_PUNCTURE;
  if (val == utility::conversions::to_string_t(U("slash")))
    return Element::eElement::Element_SLASH;
  if (val == utility::conversions::to_string_t(U("heat")))
    return Element::eElement::Element_HEAT;
  if (val == utility::conversions::to_string_t(U("cold")))
    return Element::eElement::Element_COLD;
  if (val == utility::conversions::to_string_t(U("electric")))
    return Element::eElement::Element_ELECTRIC;
  if (val == utility::conversions::to_string_t(U("toxin")))
    return Element::eElement::Element_TOXIN;
  if (val == utility::conversions::to_string_t(U("gas")))
    return Element::eElement::Element_GAS;
  if (val == utility::conversions::to_string_t(U("viral")))
    return Element::eElement::Element_VIRAL;
  if (val == utility::conversions::to_string_t(U("corrosive")))
    return Element::eElement::Element_CORROSIVE;
  if (val == utility::conversions::to_string_t(U("blast")))
    return Element::eElement::Element_BLAST;
  if (val == utility::conversions::to_string_t(U("magnetic")))
    return Element::eElement::Element_MAGNETIC;
  if (val == utility::conversions::to_string_t(U("radiation")))
    return Element::eElement::Element_RADIATION;
  if (val == utility::conversions::to_string_t(U("true")))
    return Element::eElement::Element_TRUE;
  if (val == utility::conversions::to_string_t(U("void")))
    return Element::eElement::Element_VOID;
  return {};
}

EnumUnderlyingType fromEnum(Element::eElement e) {
  switch (e) {
  case Element::eElement::Element_IMPACT:
    return U("impact");
  case Element::eElement::Element_PUNCTURE:
    return U("puncture");
  case Element::eElement::Element_SLASH:
    return U("slash");
  case Element::eElement::Element_HEAT:
    return U("heat");
  case Element::eElement::Element_COLD:
    return U("cold");
  case Element::eElement::Element_ELECTRIC:
    return U("electric");
  case Element::eElement::Element_TOXIN:
    return U("toxin");
  case Element::eElement::Element_GAS:
    return U("gas");
  case Element::eElement::Element_VIRAL:
    return U("viral");
  case Element::eElement::Element_CORROSIVE:
    return U("corrosive");
  case Element::eElement::Element_BLAST:
    return U("blast");
  case Element::eElement::Element_MAGNETIC:
    return U("magnetic");
  case Element::eElement::Element_RADIATION:
    return U("radiation");
  case Element::eElement::Element_TRUE:
    return U("true");
  case Element::eElement::Element_VOID:
    return U("void");
  default:
    break;
  }
  return {};
}
} // namespace

Element::Element() {}

Element::~Element() {}

void Element::validate() {
  // TODO: implement validation
}

web::json::value Element::toJson() const {
  auto val = fromEnum(m_value);
  return web::json::value(val);
}

bool Element::fromJson(const web::json::value &val) {
  m_value = toEnum(val.as_string());
  return true;
}

void Element::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                          const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }

  auto e = fromEnum(m_value);
  multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool Element::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (!namePrefix.empty() && namePrefix.back() != U('.')) {
    namePrefix.push_back(U('.'));
  }
  {
    EnumUnderlyingType e;
    ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
    if (ok) {
      auto v = toEnum(e);
      setValue(v);
    }
  }
  return ok;
}

Element::eElement Element::getValue() const { return m_value; }

void Element::setValue(Element::eElement const value) { m_value = value; }

} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
