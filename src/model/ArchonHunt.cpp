/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/ArchonHunt.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ArchonHunt::ArchonHunt() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Activation = utility::datetime();
  m_ActivationIsSet = false;
  m_Expiry = utility::datetime();
  m_ExpiryIsSet = false;
  m_StartString = utility::conversions::to_string_t("");
  m_StartStringIsSet = false;
  m_Active = false;
  m_ActiveIsSet = false;
  m_RewardPool = utility::conversions::to_string_t("");
  m_RewardPoolIsSet = false;
  m_MissionsIsSet = false;
  m_Boss = utility::conversions::to_string_t("");
  m_BossIsSet = false;
  m_FactionIsSet = false;
  m_FactionKeyIsSet = false;
  m_Expired = false;
  m_ExpiredIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
}

ArchonHunt::~ArchonHunt() {}

void ArchonHunt::validate() {
  // TODO: implement validation
}

web::json::value ArchonHunt::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_StartStringIsSet) {
    val[utility::conversions::to_string_t(U("startString"))] =
        ModelBase::toJson(m_StartString);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_RewardPoolIsSet) {
    val[utility::conversions::to_string_t(U("rewardPool"))] =
        ModelBase::toJson(m_RewardPool);
  }
  if (m_MissionsIsSet) {
    val[utility::conversions::to_string_t(U("missions"))] =
        ModelBase::toJson(m_Missions);
  }
  if (m_BossIsSet) {
    val[utility::conversions::to_string_t(U("boss"))] =
        ModelBase::toJson(m_Boss);
  }
  if (m_FactionIsSet) {
    val[utility::conversions::to_string_t(U("faction"))] =
        ModelBase::toJson(m_Faction);
  }
  if (m_FactionKeyIsSet) {
    val[utility::conversions::to_string_t(U("factionKey"))] =
        ModelBase::toJson(m_FactionKey);
  }
  if (m_ExpiredIsSet) {
    val[utility::conversions::to_string_t(U("expired"))] =
        ModelBase::toJson(m_Expired);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }

  return val;
}

bool ArchonHunt::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("startString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("startString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStartString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStartString);
      setStartString(refVal_setStartString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      bool refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rewardPool")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rewardPool")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRewardPool;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRewardPool);
      setRewardPool(refVal_setRewardPool);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("missions")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("missions")));
    if (!fieldValue.is_null()) {
      std::set<std::shared_ptr<Mission>> refVal_setMissions;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMissions);
      setMissions(refVal_setMissions);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("boss")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("boss")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBoss;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBoss);
      setBoss(refVal_setBoss);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("faction")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("faction")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<ArchonHunt_allOf_faction> refVal_setFaction;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFaction);
      setFaction(refVal_setFaction);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("factionKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("factionKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<ArchonHunt_allOf_factionKey> refVal_setFactionKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFactionKey);
      setFactionKey(refVal_setFactionKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expired")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expired")));
    if (!fieldValue.is_null()) {
      bool refVal_setExpired;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
      setExpired(refVal_setExpired);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  return ok;
}

void ArchonHunt::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_StartStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("startString")),
        m_StartString));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_RewardPoolIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rewardPool")),
        m_RewardPool));
  }
  if (m_MissionsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("missions")),
        m_Missions));
  }
  if (m_BossIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("boss")), m_Boss));
  }
  if (m_FactionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("faction")),
        m_Faction));
  }
  if (m_FactionKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("factionKey")),
        m_FactionKey));
  }
  if (m_ExpiredIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expired")),
        m_Expired));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
}

bool ArchonHunt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::datetime refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::datetime refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("startString")))) {
    utility::string_t refVal_setStartString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("startString"))),
        refVal_setStartString);
    setStartString(refVal_setStartString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    bool refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("rewardPool")))) {
    utility::string_t refVal_setRewardPool;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("rewardPool"))),
        refVal_setRewardPool);
    setRewardPool(refVal_setRewardPool);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("missions")))) {
    std::set<std::shared_ptr<Mission>> refVal_setMissions;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("missions"))),
        refVal_setMissions);
    setMissions(refVal_setMissions);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("boss")))) {
    utility::string_t refVal_setBoss;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("boss"))),
        refVal_setBoss);
    setBoss(refVal_setBoss);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("faction")))) {
    std::shared_ptr<ArchonHunt_allOf_faction> refVal_setFaction;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("faction"))),
        refVal_setFaction);
    setFaction(refVal_setFaction);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("factionKey")))) {
    std::shared_ptr<ArchonHunt_allOf_factionKey> refVal_setFactionKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("factionKey"))),
        refVal_setFactionKey);
    setFactionKey(refVal_setFactionKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expired")))) {
    bool refVal_setExpired;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expired"))),
        refVal_setExpired);
    setExpired(refVal_setExpired);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  return ok;
}

utility::string_t ArchonHunt::getId() const { return m_Id; }

void ArchonHunt::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool ArchonHunt::idIsSet() const { return m_IdIsSet; }

void ArchonHunt::unsetId() { m_IdIsSet = false; }
utility::datetime ArchonHunt::getActivation() const { return m_Activation; }

void ArchonHunt::setActivation(const utility::datetime &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool ArchonHunt::activationIsSet() const { return m_ActivationIsSet; }

void ArchonHunt::unsetActivation() { m_ActivationIsSet = false; }
utility::datetime ArchonHunt::getExpiry() const { return m_Expiry; }

void ArchonHunt::setExpiry(const utility::datetime &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool ArchonHunt::expiryIsSet() const { return m_ExpiryIsSet; }

void ArchonHunt::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t ArchonHunt::getStartString() const { return m_StartString; }

void ArchonHunt::setStartString(const utility::string_t &value) {
  m_StartString = value;
  m_StartStringIsSet = true;
}

bool ArchonHunt::startStringIsSet() const { return m_StartStringIsSet; }

void ArchonHunt::unsetStartString() { m_StartStringIsSet = false; }
bool ArchonHunt::isActive() const { return m_Active; }

void ArchonHunt::setActive(bool value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool ArchonHunt::activeIsSet() const { return m_ActiveIsSet; }

void ArchonHunt::unsetActive() { m_ActiveIsSet = false; }
utility::string_t ArchonHunt::getRewardPool() const { return m_RewardPool; }

void ArchonHunt::setRewardPool(const utility::string_t &value) {
  m_RewardPool = value;
  m_RewardPoolIsSet = true;
}

bool ArchonHunt::rewardPoolIsSet() const { return m_RewardPoolIsSet; }

void ArchonHunt::unsetRewardPool() { m_RewardPoolIsSet = false; }
std::set<std::shared_ptr<Mission>> &ArchonHunt::getMissions() {
  return m_Missions;
}

void ArchonHunt::setMissions(const std::set<std::shared_ptr<Mission>> &value) {
  m_Missions = value;
  m_MissionsIsSet = true;
}

bool ArchonHunt::missionsIsSet() const { return m_MissionsIsSet; }

void ArchonHunt::unsetMissions() { m_MissionsIsSet = false; }
utility::string_t ArchonHunt::getBoss() const { return m_Boss; }

void ArchonHunt::setBoss(const utility::string_t &value) {
  m_Boss = value;
  m_BossIsSet = true;
}

bool ArchonHunt::bossIsSet() const { return m_BossIsSet; }

void ArchonHunt::unsetBoss() { m_BossIsSet = false; }
std::shared_ptr<ArchonHunt_allOf_faction> ArchonHunt::getFaction() const {
  return m_Faction;
}

void ArchonHunt::setFaction(
    const std::shared_ptr<ArchonHunt_allOf_faction> &value) {
  m_Faction = value;
  m_FactionIsSet = true;
}

bool ArchonHunt::factionIsSet() const { return m_FactionIsSet; }

void ArchonHunt::unsetFaction() { m_FactionIsSet = false; }
std::shared_ptr<ArchonHunt_allOf_factionKey> ArchonHunt::getFactionKey() const {
  return m_FactionKey;
}

void ArchonHunt::setFactionKey(
    const std::shared_ptr<ArchonHunt_allOf_factionKey> &value) {
  m_FactionKey = value;
  m_FactionKeyIsSet = true;
}

bool ArchonHunt::factionKeyIsSet() const { return m_FactionKeyIsSet; }

void ArchonHunt::unsetFactionKey() { m_FactionKeyIsSet = false; }
bool ArchonHunt::isExpired() const { return m_Expired; }

void ArchonHunt::setExpired(bool value) {
  m_Expired = value;
  m_ExpiredIsSet = true;
}

bool ArchonHunt::expiredIsSet() const { return m_ExpiredIsSet; }

void ArchonHunt::unsetExpired() { m_ExpiredIsSet = false; }
utility::string_t ArchonHunt::getEta() const { return m_Eta; }

void ArchonHunt::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool ArchonHunt::etaIsSet() const { return m_EtaIsSet; }

void ArchonHunt::unsetEta() { m_EtaIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
