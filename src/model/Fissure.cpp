/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Fissure.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Fissure::Fissure() {
  m_Node = utility::conversions::to_string_t("");
  m_NodeIsSet = false;
  m_Expired = false;
  m_ExpiredIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_MissionTypeIsSet = false;
  m_MissionKeyIsSet = false;
  m_TierIsSet = false;
  m_TierNum = 0.0;
  m_TierNumIsSet = false;
  m_EnemyIsSet = false;
  m_EnemyKeyIsSet = false;
  m_IsStorm = false;
  m_IsStormIsSet = false;
  m_IsHard = false;
  m_IsHardIsSet = false;
}

Fissure::~Fissure() {}

void Fissure::validate() {
  // TODO: implement validation
}

web::json::value Fissure::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NodeIsSet) {
    val[utility::conversions::to_string_t(U("node"))] =
        ModelBase::toJson(m_Node);
  }
  if (m_ExpiredIsSet) {
    val[utility::conversions::to_string_t(U("expired"))] =
        ModelBase::toJson(m_Expired);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_MissionTypeIsSet) {
    val[utility::conversions::to_string_t(U("missionType"))] =
        ModelBase::toJson(m_MissionType);
  }
  if (m_MissionKeyIsSet) {
    val[utility::conversions::to_string_t(U("missionKey"))] =
        ModelBase::toJson(m_MissionKey);
  }
  if (m_TierIsSet) {
    val[utility::conversions::to_string_t(U("tier"))] =
        ModelBase::toJson(m_Tier);
  }
  if (m_TierNumIsSet) {
    val[utility::conversions::to_string_t(U("tierNum"))] =
        ModelBase::toJson(m_TierNum);
  }
  if (m_EnemyIsSet) {
    val[utility::conversions::to_string_t(U("enemy"))] =
        ModelBase::toJson(m_Enemy);
  }
  if (m_EnemyKeyIsSet) {
    val[utility::conversions::to_string_t(U("enemyKey"))] =
        ModelBase::toJson(m_EnemyKey);
  }
  if (m_IsStormIsSet) {
    val[utility::conversions::to_string_t(U("isStorm"))] =
        ModelBase::toJson(m_IsStorm);
  }
  if (m_IsHardIsSet) {
    val[utility::conversions::to_string_t(U("isHard"))] =
        ModelBase::toJson(m_IsHard);
  }

  return val;
}

bool Fissure::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("node")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("node")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
      setNode(refVal_setNode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expired")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expired")));
    if (!fieldValue.is_null()) {
      bool refVal_setExpired;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
      setExpired(refVal_setExpired);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("missionType")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("missionType")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<MissionType> refVal_setMissionType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMissionType);
      setMissionType(refVal_setMissionType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("missionKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("missionKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<MissionType> refVal_setMissionKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMissionKey);
      setMissionKey(refVal_setMissionKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tier")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tier")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<AnyType> refVal_setTier;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTier);
      setTier(refVal_setTier);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tierNum")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tierNum")));
    if (!fieldValue.is_null()) {
      double refVal_setTierNum;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTierNum);
      setTierNum(refVal_setTierNum);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("enemy")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("enemy")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Faction> refVal_setEnemy;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnemy);
      setEnemy(refVal_setEnemy);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("enemyKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("enemyKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Faction> refVal_setEnemyKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnemyKey);
      setEnemyKey(refVal_setEnemyKey);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isStorm")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isStorm")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsStorm;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsStorm);
      setIsStorm(refVal_setIsStorm);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("isHard")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("isHard")));
    if (!fieldValue.is_null()) {
      bool refVal_setIsHard;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIsHard);
      setIsHard(refVal_setIsHard);
    }
  }
  return ok;
}

void Fissure::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                          const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NodeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
  }
  if (m_ExpiredIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expired")),
        m_Expired));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_MissionTypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("missionType")),
        m_MissionType));
  }
  if (m_MissionKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("missionKey")),
        m_MissionKey));
  }
  if (m_TierIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tier")), m_Tier));
  }
  if (m_TierNumIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tierNum")),
        m_TierNum));
  }
  if (m_EnemyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("enemy")), m_Enemy));
  }
  if (m_EnemyKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("enemyKey")),
        m_EnemyKey));
  }
  if (m_IsStormIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isStorm")),
        m_IsStorm));
  }
  if (m_IsHardIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("isHard")), m_IsHard));
  }
}

bool Fissure::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("node")))) {
    utility::string_t refVal_setNode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("node"))),
        refVal_setNode);
    setNode(refVal_setNode);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expired")))) {
    bool refVal_setExpired;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expired"))),
        refVal_setExpired);
    setExpired(refVal_setExpired);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("missionType")))) {
    std::shared_ptr<MissionType> refVal_setMissionType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("missionType"))),
        refVal_setMissionType);
    setMissionType(refVal_setMissionType);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("missionKey")))) {
    std::shared_ptr<MissionType> refVal_setMissionKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("missionKey"))),
        refVal_setMissionKey);
    setMissionKey(refVal_setMissionKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tier")))) {
    std::shared_ptr<AnyType> refVal_setTier;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tier"))),
        refVal_setTier);
    setTier(refVal_setTier);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tierNum")))) {
    double refVal_setTierNum;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tierNum"))),
        refVal_setTierNum);
    setTierNum(refVal_setTierNum);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("enemy")))) {
    std::shared_ptr<Faction> refVal_setEnemy;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("enemy"))),
        refVal_setEnemy);
    setEnemy(refVal_setEnemy);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("enemyKey")))) {
    std::shared_ptr<Faction> refVal_setEnemyKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("enemyKey"))),
        refVal_setEnemyKey);
    setEnemyKey(refVal_setEnemyKey);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("isStorm")))) {
    bool refVal_setIsStorm;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("isStorm"))),
        refVal_setIsStorm);
    setIsStorm(refVal_setIsStorm);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("isHard")))) {
    bool refVal_setIsHard;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("isHard"))),
        refVal_setIsHard);
    setIsHard(refVal_setIsHard);
  }
  return ok;
}

utility::string_t Fissure::getNode() const { return m_Node; }

void Fissure::setNode(const utility::string_t &value) {
  m_Node = value;
  m_NodeIsSet = true;
}

bool Fissure::nodeIsSet() const { return m_NodeIsSet; }

void Fissure::unsetNode() { m_NodeIsSet = false; }
bool Fissure::isExpired() const { return m_Expired; }

void Fissure::setExpired(bool value) {
  m_Expired = value;
  m_ExpiredIsSet = true;
}

bool Fissure::expiredIsSet() const { return m_ExpiredIsSet; }

void Fissure::unsetExpired() { m_ExpiredIsSet = false; }
utility::string_t Fissure::getEta() const { return m_Eta; }

void Fissure::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool Fissure::etaIsSet() const { return m_EtaIsSet; }

void Fissure::unsetEta() { m_EtaIsSet = false; }
std::shared_ptr<MissionType> Fissure::getMissionType() const {
  return m_MissionType;
}

void Fissure::setMissionType(const std::shared_ptr<MissionType> &value) {
  m_MissionType = value;
  m_MissionTypeIsSet = true;
}

bool Fissure::missionTypeIsSet() const { return m_MissionTypeIsSet; }

void Fissure::unsetMissionType() { m_MissionTypeIsSet = false; }
std::shared_ptr<MissionType> Fissure::getMissionKey() const {
  return m_MissionKey;
}

void Fissure::setMissionKey(const std::shared_ptr<MissionType> &value) {
  m_MissionKey = value;
  m_MissionKeyIsSet = true;
}

bool Fissure::missionKeyIsSet() const { return m_MissionKeyIsSet; }

void Fissure::unsetMissionKey() { m_MissionKeyIsSet = false; }
std::shared_ptr<AnyType> Fissure::getTier() const { return m_Tier; }

void Fissure::setTier(const std::shared_ptr<AnyType> &value) {
  m_Tier = value;
  m_TierIsSet = true;
}

bool Fissure::tierIsSet() const { return m_TierIsSet; }

void Fissure::unsetTier() { m_TierIsSet = false; }
double Fissure::getTierNum() const { return m_TierNum; }

void Fissure::setTierNum(double value) {
  m_TierNum = value;
  m_TierNumIsSet = true;
}

bool Fissure::tierNumIsSet() const { return m_TierNumIsSet; }

void Fissure::unsetTierNum() { m_TierNumIsSet = false; }
std::shared_ptr<Faction> Fissure::getEnemy() const { return m_Enemy; }

void Fissure::setEnemy(const std::shared_ptr<Faction> &value) {
  m_Enemy = value;
  m_EnemyIsSet = true;
}

bool Fissure::enemyIsSet() const { return m_EnemyIsSet; }

void Fissure::unsetEnemy() { m_EnemyIsSet = false; }
std::shared_ptr<Faction> Fissure::getEnemyKey() const { return m_EnemyKey; }

void Fissure::setEnemyKey(const std::shared_ptr<Faction> &value) {
  m_EnemyKey = value;
  m_EnemyKeyIsSet = true;
}

bool Fissure::enemyKeyIsSet() const { return m_EnemyKeyIsSet; }

void Fissure::unsetEnemyKey() { m_EnemyKeyIsSet = false; }
bool Fissure::isIsStorm() const { return m_IsStorm; }

void Fissure::setIsStorm(bool value) {
  m_IsStorm = value;
  m_IsStormIsSet = true;
}

bool Fissure::isStormIsSet() const { return m_IsStormIsSet; }

void Fissure::unsetIsStorm() { m_IsStormIsSet = false; }
bool Fissure::isIsHard() const { return m_IsHard; }

void Fissure::setIsHard(bool value) {
  m_IsHard = value;
  m_IsHardIsSet = true;
}

bool Fissure::isHardIsSet() const { return m_IsHardIsSet; }

void Fissure::unsetIsHard() { m_IsHardIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
