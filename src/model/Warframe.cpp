/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Warframe.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Warframe::Warframe() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_UniqueName = utility::conversions::to_string_t("");
  m_UniqueNameIsSet = false;
  m_Description = utility::conversions::to_string_t("");
  m_DescriptionIsSet = false;
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_Tradable = false;
  m_TradableIsSet = false;
  m_Category = utility::conversions::to_string_t("");
  m_CategoryIsSet = false;
  m_ProductCategory = utility::conversions::to_string_t("");
  m_ProductCategoryIsSet = false;
  m_PatchlogsIsSet = false;
  m_ComponentsIsSet = false;
  m_IntroducedIsSet = false;
  m_EstimatedVaultDateIsSet = false;
  m_Shield = 0.0;
  m_ShieldIsSet = false;
  m_PolaritiesIsSet = false;
  m_Prime_power = utility::conversions::to_string_t("");
  m_Prime_powerIsSet = false;
  m_Prime_mr = utility::conversions::to_string_t("");
  m_Prime_mrIsSet = false;
  m_Color = 0.0;
  m_ColorIsSet = false;
  m_Prime_polaritiesIsSet = false;
  m_Conclave = false;
  m_ConclaveIsSet = false;
  m_Prime_armor = 0.0;
  m_Prime_armorIsSet = false;
  m_Speed = utility::conversions::to_string_t("");
  m_SpeedIsSet = false;
  m_Aura = utility::conversions::to_string_t("");
  m_AuraIsSet = false;
  m_Prime_url = utility::conversions::to_string_t("");
  m_Prime_urlIsSet = false;
  m_Prime_health = 0.0;
  m_Prime_healthIsSet = false;
  m_Power = 0.0;
  m_PowerIsSet = false;
  m_Prime_aura = utility::conversions::to_string_t("");
  m_Prime_auraIsSet = false;
  m_Info = utility::conversions::to_string_t("");
  m_InfoIsSet = false;
  m_Thumbnail = utility::conversions::to_string_t("");
  m_ThumbnailIsSet = false;
  m_Mr = utility::conversions::to_string_t("");
  m_MrIsSet = false;
  m_Prime_shield = 0.0;
  m_Prime_shieldIsSet = false;
  m_Health = 0.0;
  m_HealthIsSet = false;
  m_Prime_speed = utility::conversions::to_string_t("");
  m_Prime_speedIsSet = false;
  m_Url = utility::conversions::to_string_t("");
  m_UrlIsSet = false;
  m_Regex = utility::conversions::to_string_t("");
  m_RegexIsSet = false;
  m_Armor = 0.0;
  m_ArmorIsSet = false;
  m_Location = utility::conversions::to_string_t("");
  m_LocationIsSet = false;
  m_Prime_conclave = utility::conversions::to_string_t("");
  m_Prime_conclaveIsSet = false;
}

Warframe::~Warframe() {}

void Warframe::validate() {
  // TODO: implement validation
}

web::json::value Warframe::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_UniqueNameIsSet) {
    val[utility::conversions::to_string_t(U("uniqueName"))] =
        ModelBase::toJson(m_UniqueName);
  }
  if (m_DescriptionIsSet) {
    val[utility::conversions::to_string_t(U("description"))] =
        ModelBase::toJson(m_Description);
  }
  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_TradableIsSet) {
    val[utility::conversions::to_string_t(U("tradable"))] =
        ModelBase::toJson(m_Tradable);
  }
  if (m_CategoryIsSet) {
    val[utility::conversions::to_string_t(U("category"))] =
        ModelBase::toJson(m_Category);
  }
  if (m_ProductCategoryIsSet) {
    val[utility::conversions::to_string_t(U("productCategory"))] =
        ModelBase::toJson(m_ProductCategory);
  }
  if (m_PatchlogsIsSet) {
    val[utility::conversions::to_string_t(U("patchlogs"))] =
        ModelBase::toJson(m_Patchlogs);
  }
  if (m_ComponentsIsSet) {
    val[utility::conversions::to_string_t(U("components"))] =
        ModelBase::toJson(m_Components);
  }
  if (m_IntroducedIsSet) {
    val[utility::conversions::to_string_t(U("introduced"))] =
        ModelBase::toJson(m_Introduced);
  }
  if (m_EstimatedVaultDateIsSet) {
    val[utility::conversions::to_string_t(U("estimatedVaultDate"))] =
        ModelBase::toJson(m_EstimatedVaultDate);
  }
  if (m_ShieldIsSet) {
    val[utility::conversions::to_string_t(U("shield"))] =
        ModelBase::toJson(m_Shield);
  }
  if (m_PolaritiesIsSet) {
    val[utility::conversions::to_string_t(U("polarities"))] =
        ModelBase::toJson(m_Polarities);
  }
  if (m_Prime_powerIsSet) {
    val[utility::conversions::to_string_t(U("prime_power"))] =
        ModelBase::toJson(m_Prime_power);
  }
  if (m_Prime_mrIsSet) {
    val[utility::conversions::to_string_t(U("prime_mr"))] =
        ModelBase::toJson(m_Prime_mr);
  }
  if (m_ColorIsSet) {
    val[utility::conversions::to_string_t(U("color"))] =
        ModelBase::toJson(m_Color);
  }
  if (m_Prime_polaritiesIsSet) {
    val[utility::conversions::to_string_t(U("prime_polarities"))] =
        ModelBase::toJson(m_Prime_polarities);
  }
  if (m_ConclaveIsSet) {
    val[utility::conversions::to_string_t(U("conclave"))] =
        ModelBase::toJson(m_Conclave);
  }
  if (m_Prime_armorIsSet) {
    val[utility::conversions::to_string_t(U("prime_armor"))] =
        ModelBase::toJson(m_Prime_armor);
  }
  if (m_SpeedIsSet) {
    val[utility::conversions::to_string_t(U("speed"))] =
        ModelBase::toJson(m_Speed);
  }
  if (m_AuraIsSet) {
    val[utility::conversions::to_string_t(U("aura"))] =
        ModelBase::toJson(m_Aura);
  }
  if (m_Prime_urlIsSet) {
    val[utility::conversions::to_string_t(U("prime_url"))] =
        ModelBase::toJson(m_Prime_url);
  }
  if (m_Prime_healthIsSet) {
    val[utility::conversions::to_string_t(U("prime_health"))] =
        ModelBase::toJson(m_Prime_health);
  }
  if (m_PowerIsSet) {
    val[utility::conversions::to_string_t(U("power"))] =
        ModelBase::toJson(m_Power);
  }
  if (m_Prime_auraIsSet) {
    val[utility::conversions::to_string_t(U("prime_aura"))] =
        ModelBase::toJson(m_Prime_aura);
  }
  if (m_InfoIsSet) {
    val[utility::conversions::to_string_t(U("info"))] =
        ModelBase::toJson(m_Info);
  }
  if (m_ThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("thumbnail"))] =
        ModelBase::toJson(m_Thumbnail);
  }
  if (m_MrIsSet) {
    val[utility::conversions::to_string_t(U("mr"))] = ModelBase::toJson(m_Mr);
  }
  if (m_Prime_shieldIsSet) {
    val[utility::conversions::to_string_t(U("prime_shield"))] =
        ModelBase::toJson(m_Prime_shield);
  }
  if (m_HealthIsSet) {
    val[utility::conversions::to_string_t(U("health"))] =
        ModelBase::toJson(m_Health);
  }
  if (m_Prime_speedIsSet) {
    val[utility::conversions::to_string_t(U("prime_speed"))] =
        ModelBase::toJson(m_Prime_speed);
  }
  if (m_UrlIsSet) {
    val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
  }
  if (m_RegexIsSet) {
    val[utility::conversions::to_string_t(U("regex"))] =
        ModelBase::toJson(m_Regex);
  }
  if (m_ArmorIsSet) {
    val[utility::conversions::to_string_t(U("armor"))] =
        ModelBase::toJson(m_Armor);
  }
  if (m_LocationIsSet) {
    val[utility::conversions::to_string_t(U("location"))] =
        ModelBase::toJson(m_Location);
  }
  if (m_Prime_conclaveIsSet) {
    val[utility::conversions::to_string_t(U("prime_conclave"))] =
        ModelBase::toJson(m_Prime_conclave);
  }

  return val;
}

bool Warframe::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("uniqueName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("uniqueName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUniqueName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueName);
      setUniqueName(refVal_setUniqueName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("description")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("description")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
      setDescription(refVal_setDescription);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tradable")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tradable")));
    if (!fieldValue.is_null()) {
      bool refVal_setTradable;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTradable);
      setTradable(refVal_setTradable);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("category")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("category")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
      setCategory(refVal_setCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("productCategory")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("productCategory")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setProductCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProductCategory);
      setProductCategory(refVal_setProductCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("patchlogs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("patchlogs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPatchlogs);
      setPatchlogs(refVal_setPatchlogs);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("components")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("components")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
      ok &= ModelBase::fromJson(fieldValue, refVal_setComponents);
      setComponents(refVal_setComponents);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("introduced")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("introduced")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Introduced> refVal_setIntroduced;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIntroduced);
      setIntroduced(refVal_setIntroduced);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("estimatedVaultDate")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setEstimatedVaultDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedVaultDate);
      setEstimatedVaultDate(refVal_setEstimatedVaultDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("shield")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("shield")));
    if (!fieldValue.is_null()) {
      double refVal_setShield;
      ok &= ModelBase::fromJson(fieldValue, refVal_setShield);
      setShield(refVal_setShield);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("polarities")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("polarities")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setPolarities;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPolarities);
      setPolarities(refVal_setPolarities);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_power")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_power")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimePower;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimePower);
      setPrimePower(refVal_setPrimePower);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_mr")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_mr")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimeMr;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeMr);
      setPrimeMr(refVal_setPrimeMr);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("color")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("color")));
    if (!fieldValue.is_null()) {
      double refVal_setColor;
      ok &= ModelBase::fromJson(fieldValue, refVal_setColor);
      setColor(refVal_setColor);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_polarities")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_polarities")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setPrimePolarities;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimePolarities);
      setPrimePolarities(refVal_setPrimePolarities);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("conclave")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("conclave")));
    if (!fieldValue.is_null()) {
      bool refVal_setConclave;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConclave);
      setConclave(refVal_setConclave);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_armor")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_armor")));
    if (!fieldValue.is_null()) {
      double refVal_setPrimeArmor;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeArmor);
      setPrimeArmor(refVal_setPrimeArmor);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("speed")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("speed")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSpeed;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSpeed);
      setSpeed(refVal_setSpeed);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("aura")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("aura")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAura;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAura);
      setAura(refVal_setAura);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_url")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_url")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimeUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeUrl);
      setPrimeUrl(refVal_setPrimeUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_health")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_health")));
    if (!fieldValue.is_null()) {
      double refVal_setPrimeHealth;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeHealth);
      setPrimeHealth(refVal_setPrimeHealth);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("power")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("power")));
    if (!fieldValue.is_null()) {
      double refVal_setPower;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPower);
      setPower(refVal_setPower);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_aura")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_aura")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimeAura;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeAura);
      setPrimeAura(refVal_setPrimeAura);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("info")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("info")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setInfo;
      ok &= ModelBase::fromJson(fieldValue, refVal_setInfo);
      setInfo(refVal_setInfo);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("thumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("thumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
      setThumbnail(refVal_setThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("mr")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("mr")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMr;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMr);
      setMr(refVal_setMr);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_shield")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_shield")));
    if (!fieldValue.is_null()) {
      double refVal_setPrimeShield;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeShield);
      setPrimeShield(refVal_setPrimeShield);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("health")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("health")));
    if (!fieldValue.is_null()) {
      double refVal_setHealth;
      ok &= ModelBase::fromJson(fieldValue, refVal_setHealth);
      setHealth(refVal_setHealth);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_speed")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_speed")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimeSpeed;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeSpeed);
      setPrimeSpeed(refVal_setPrimeSpeed);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("url")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("url")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
      setUrl(refVal_setUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("regex")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("regex")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setRegex;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRegex);
      setRegex(refVal_setRegex);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("armor")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("armor")));
    if (!fieldValue.is_null()) {
      double refVal_setArmor;
      ok &= ModelBase::fromJson(fieldValue, refVal_setArmor);
      setArmor(refVal_setArmor);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("location")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("location")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setLocation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setLocation);
      setLocation(refVal_setLocation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("prime_conclave")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("prime_conclave")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setPrimeConclave;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPrimeConclave);
      setPrimeConclave(refVal_setPrimeConclave);
    }
  }
  return ok;
}

void Warframe::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_UniqueNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("uniqueName")),
        m_UniqueName));
  }
  if (m_DescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("description")),
        m_Description));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_TradableIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tradable")),
        m_Tradable));
  }
  if (m_CategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("category")),
        m_Category));
  }
  if (m_ProductCategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("productCategory")),
        m_ProductCategory));
  }
  if (m_PatchlogsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("patchlogs")),
        m_Patchlogs));
  }
  if (m_ComponentsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("components")),
        m_Components));
  }
  if (m_IntroducedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("introduced")),
        m_Introduced));
  }
  if (m_EstimatedVaultDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("estimatedVaultDate")),
        m_EstimatedVaultDate));
  }
  if (m_ShieldIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("shield")), m_Shield));
  }
  if (m_PolaritiesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("polarities")),
        m_Polarities));
  }
  if (m_Prime_powerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_power")),
        m_Prime_power));
  }
  if (m_Prime_mrIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_mr")),
        m_Prime_mr));
  }
  if (m_ColorIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("color")), m_Color));
  }
  if (m_Prime_polaritiesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_polarities")),
        m_Prime_polarities));
  }
  if (m_ConclaveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("conclave")),
        m_Conclave));
  }
  if (m_Prime_armorIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_armor")),
        m_Prime_armor));
  }
  if (m_SpeedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("speed")), m_Speed));
  }
  if (m_AuraIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("aura")), m_Aura));
  }
  if (m_Prime_urlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_url")),
        m_Prime_url));
  }
  if (m_Prime_healthIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_health")),
        m_Prime_health));
  }
  if (m_PowerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("power")), m_Power));
  }
  if (m_Prime_auraIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_aura")),
        m_Prime_aura));
  }
  if (m_InfoIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("info")), m_Info));
  }
  if (m_ThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("thumbnail")),
        m_Thumbnail));
  }
  if (m_MrIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("mr")), m_Mr));
  }
  if (m_Prime_shieldIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_shield")),
        m_Prime_shield));
  }
  if (m_HealthIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("health")), m_Health));
  }
  if (m_Prime_speedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_speed")),
        m_Prime_speed));
  }
  if (m_UrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
  }
  if (m_RegexIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("regex")), m_Regex));
  }
  if (m_ArmorIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("armor")), m_Armor));
  }
  if (m_LocationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("location")),
        m_Location));
  }
  if (m_Prime_conclaveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("prime_conclave")),
        m_Prime_conclave));
  }
}

bool Warframe::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                             const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("uniqueName")))) {
    utility::string_t refVal_setUniqueName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("uniqueName"))),
        refVal_setUniqueName);
    setUniqueName(refVal_setUniqueName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("description")))) {
    utility::string_t refVal_setDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("description"))),
        refVal_setDescription);
    setDescription(refVal_setDescription);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tradable")))) {
    bool refVal_setTradable;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tradable"))),
        refVal_setTradable);
    setTradable(refVal_setTradable);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("category")))) {
    utility::string_t refVal_setCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("category"))),
        refVal_setCategory);
    setCategory(refVal_setCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("productCategory")))) {
    utility::string_t refVal_setProductCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("productCategory"))),
        refVal_setProductCategory);
    setProductCategory(refVal_setProductCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("patchlogs")))) {
    std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("patchlogs"))),
        refVal_setPatchlogs);
    setPatchlogs(refVal_setPatchlogs);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("components")))) {
    std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("components"))),
        refVal_setComponents);
    setComponents(refVal_setComponents);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("introduced")))) {
    std::shared_ptr<Introduced> refVal_setIntroduced;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("introduced"))),
        refVal_setIntroduced);
    setIntroduced(refVal_setIntroduced);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    utility::datetime refVal_setEstimatedVaultDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("estimatedVaultDate"))),
        refVal_setEstimatedVaultDate);
    setEstimatedVaultDate(refVal_setEstimatedVaultDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("shield")))) {
    double refVal_setShield;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("shield"))),
        refVal_setShield);
    setShield(refVal_setShield);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("polarities")))) {
    std::vector<utility::string_t> refVal_setPolarities;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("polarities"))),
        refVal_setPolarities);
    setPolarities(refVal_setPolarities);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_power")))) {
    utility::string_t refVal_setPrimePower;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_power"))),
        refVal_setPrimePower);
    setPrimePower(refVal_setPrimePower);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("prime_mr")))) {
    utility::string_t refVal_setPrimeMr;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("prime_mr"))),
        refVal_setPrimeMr);
    setPrimeMr(refVal_setPrimeMr);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("color")))) {
    double refVal_setColor;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("color"))),
        refVal_setColor);
    setColor(refVal_setColor);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_polarities")))) {
    std::vector<utility::string_t> refVal_setPrimePolarities;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_polarities"))),
        refVal_setPrimePolarities);
    setPrimePolarities(refVal_setPrimePolarities);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("conclave")))) {
    bool refVal_setConclave;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("conclave"))),
        refVal_setConclave);
    setConclave(refVal_setConclave);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_armor")))) {
    double refVal_setPrimeArmor;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_armor"))),
        refVal_setPrimeArmor);
    setPrimeArmor(refVal_setPrimeArmor);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("speed")))) {
    utility::string_t refVal_setSpeed;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("speed"))),
        refVal_setSpeed);
    setSpeed(refVal_setSpeed);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("aura")))) {
    utility::string_t refVal_setAura;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("aura"))),
        refVal_setAura);
    setAura(refVal_setAura);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_url")))) {
    utility::string_t refVal_setPrimeUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_url"))),
        refVal_setPrimeUrl);
    setPrimeUrl(refVal_setPrimeUrl);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_health")))) {
    double refVal_setPrimeHealth;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_health"))),
        refVal_setPrimeHealth);
    setPrimeHealth(refVal_setPrimeHealth);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("power")))) {
    double refVal_setPower;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("power"))),
        refVal_setPower);
    setPower(refVal_setPower);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_aura")))) {
    utility::string_t refVal_setPrimeAura;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_aura"))),
        refVal_setPrimeAura);
    setPrimeAura(refVal_setPrimeAura);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("info")))) {
    utility::string_t refVal_setInfo;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("info"))),
        refVal_setInfo);
    setInfo(refVal_setInfo);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("thumbnail")))) {
    utility::string_t refVal_setThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("thumbnail"))),
        refVal_setThumbnail);
    setThumbnail(refVal_setThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("mr")))) {
    utility::string_t refVal_setMr;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("mr"))),
        refVal_setMr);
    setMr(refVal_setMr);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_shield")))) {
    double refVal_setPrimeShield;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_shield"))),
        refVal_setPrimeShield);
    setPrimeShield(refVal_setPrimeShield);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("health")))) {
    double refVal_setHealth;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("health"))),
        refVal_setHealth);
    setHealth(refVal_setHealth);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_speed")))) {
    utility::string_t refVal_setPrimeSpeed;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_speed"))),
        refVal_setPrimeSpeed);
    setPrimeSpeed(refVal_setPrimeSpeed);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("url")))) {
    utility::string_t refVal_setUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("url"))),
        refVal_setUrl);
    setUrl(refVal_setUrl);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("regex")))) {
    utility::string_t refVal_setRegex;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("regex"))),
        refVal_setRegex);
    setRegex(refVal_setRegex);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("armor")))) {
    double refVal_setArmor;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("armor"))),
        refVal_setArmor);
    setArmor(refVal_setArmor);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("location")))) {
    utility::string_t refVal_setLocation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("location"))),
        refVal_setLocation);
    setLocation(refVal_setLocation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("prime_conclave")))) {
    utility::string_t refVal_setPrimeConclave;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("prime_conclave"))),
        refVal_setPrimeConclave);
    setPrimeConclave(refVal_setPrimeConclave);
  }
  return ok;
}

utility::string_t Warframe::getName() const { return m_Name; }

void Warframe::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool Warframe::nameIsSet() const { return m_NameIsSet; }

void Warframe::unsetName() { m_NameIsSet = false; }
utility::string_t Warframe::getUniqueName() const { return m_UniqueName; }

void Warframe::setUniqueName(const utility::string_t &value) {
  m_UniqueName = value;
  m_UniqueNameIsSet = true;
}

bool Warframe::uniqueNameIsSet() const { return m_UniqueNameIsSet; }

void Warframe::unsetUniqueName() { m_UniqueNameIsSet = false; }
utility::string_t Warframe::getDescription() const { return m_Description; }

void Warframe::setDescription(const utility::string_t &value) {
  m_Description = value;
  m_DescriptionIsSet = true;
}

bool Warframe::descriptionIsSet() const { return m_DescriptionIsSet; }

void Warframe::unsetDescription() { m_DescriptionIsSet = false; }
utility::string_t Warframe::getType() const { return m_Type; }

void Warframe::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool Warframe::typeIsSet() const { return m_TypeIsSet; }

void Warframe::unsetType() { m_TypeIsSet = false; }
bool Warframe::isTradable() const { return m_Tradable; }

void Warframe::setTradable(bool value) {
  m_Tradable = value;
  m_TradableIsSet = true;
}

bool Warframe::tradableIsSet() const { return m_TradableIsSet; }

void Warframe::unsetTradable() { m_TradableIsSet = false; }
utility::string_t Warframe::getCategory() const { return m_Category; }

void Warframe::setCategory(const utility::string_t &value) {
  m_Category = value;
  m_CategoryIsSet = true;
}

bool Warframe::categoryIsSet() const { return m_CategoryIsSet; }

void Warframe::unsetCategory() { m_CategoryIsSet = false; }
utility::string_t Warframe::getProductCategory() const {
  return m_ProductCategory;
}

void Warframe::setProductCategory(const utility::string_t &value) {
  m_ProductCategory = value;
  m_ProductCategoryIsSet = true;
}

bool Warframe::productCategoryIsSet() const { return m_ProductCategoryIsSet; }

void Warframe::unsetProductCategory() { m_ProductCategoryIsSet = false; }
std::vector<std::shared_ptr<Patchlog>> &Warframe::getPatchlogs() {
  return m_Patchlogs;
}

void Warframe::setPatchlogs(
    const std::vector<std::shared_ptr<Patchlog>> &value) {
  m_Patchlogs = value;
  m_PatchlogsIsSet = true;
}

bool Warframe::patchlogsIsSet() const { return m_PatchlogsIsSet; }

void Warframe::unsetPatchlogs() { m_PatchlogsIsSet = false; }
std::vector<std::shared_ptr<ShallowItem>> &Warframe::getComponents() {
  return m_Components;
}

void Warframe::setComponents(
    const std::vector<std::shared_ptr<ShallowItem>> &value) {
  m_Components = value;
  m_ComponentsIsSet = true;
}

bool Warframe::componentsIsSet() const { return m_ComponentsIsSet; }

void Warframe::unsetComponents() { m_ComponentsIsSet = false; }
std::shared_ptr<Introduced> Warframe::getIntroduced() const {
  return m_Introduced;
}

void Warframe::setIntroduced(const std::shared_ptr<Introduced> &value) {
  m_Introduced = value;
  m_IntroducedIsSet = true;
}

bool Warframe::introducedIsSet() const { return m_IntroducedIsSet; }

void Warframe::unsetIntroduced() { m_IntroducedIsSet = false; }
utility::datetime Warframe::getEstimatedVaultDate() const {
  return m_EstimatedVaultDate;
}

void Warframe::setEstimatedVaultDate(const utility::datetime &value) {
  m_EstimatedVaultDate = value;
  m_EstimatedVaultDateIsSet = true;
}

bool Warframe::estimatedVaultDateIsSet() const {
  return m_EstimatedVaultDateIsSet;
}

void Warframe::unsetEstimatedVaultDate() { m_EstimatedVaultDateIsSet = false; }
double Warframe::getShield() const { return m_Shield; }

void Warframe::setShield(double value) {
  m_Shield = value;
  m_ShieldIsSet = true;
}

bool Warframe::shieldIsSet() const { return m_ShieldIsSet; }

void Warframe::unsetShield() { m_ShieldIsSet = false; }
std::vector<utility::string_t> &Warframe::getPolarities() {
  return m_Polarities;
}

void Warframe::setPolarities(const std::vector<utility::string_t> &value) {
  m_Polarities = value;
  m_PolaritiesIsSet = true;
}

bool Warframe::polaritiesIsSet() const { return m_PolaritiesIsSet; }

void Warframe::unsetPolarities() { m_PolaritiesIsSet = false; }
utility::string_t Warframe::getPrimePower() const { return m_Prime_power; }

void Warframe::setPrimePower(const utility::string_t &value) {
  m_Prime_power = value;
  m_Prime_powerIsSet = true;
}

bool Warframe::primePowerIsSet() const { return m_Prime_powerIsSet; }

void Warframe::unsetPrime_power() { m_Prime_powerIsSet = false; }
utility::string_t Warframe::getPrimeMr() const { return m_Prime_mr; }

void Warframe::setPrimeMr(const utility::string_t &value) {
  m_Prime_mr = value;
  m_Prime_mrIsSet = true;
}

bool Warframe::primeMrIsSet() const { return m_Prime_mrIsSet; }

void Warframe::unsetPrime_mr() { m_Prime_mrIsSet = false; }
double Warframe::getColor() const { return m_Color; }

void Warframe::setColor(double value) {
  m_Color = value;
  m_ColorIsSet = true;
}

bool Warframe::colorIsSet() const { return m_ColorIsSet; }

void Warframe::unsetColor() { m_ColorIsSet = false; }
std::vector<utility::string_t> &Warframe::getPrimePolarities() {
  return m_Prime_polarities;
}

void Warframe::setPrimePolarities(const std::vector<utility::string_t> &value) {
  m_Prime_polarities = value;
  m_Prime_polaritiesIsSet = true;
}

bool Warframe::primePolaritiesIsSet() const { return m_Prime_polaritiesIsSet; }

void Warframe::unsetPrime_polarities() { m_Prime_polaritiesIsSet = false; }
bool Warframe::isConclave() const { return m_Conclave; }

void Warframe::setConclave(bool value) {
  m_Conclave = value;
  m_ConclaveIsSet = true;
}

bool Warframe::conclaveIsSet() const { return m_ConclaveIsSet; }

void Warframe::unsetConclave() { m_ConclaveIsSet = false; }
double Warframe::getPrimeArmor() const { return m_Prime_armor; }

void Warframe::setPrimeArmor(double value) {
  m_Prime_armor = value;
  m_Prime_armorIsSet = true;
}

bool Warframe::primeArmorIsSet() const { return m_Prime_armorIsSet; }

void Warframe::unsetPrime_armor() { m_Prime_armorIsSet = false; }
utility::string_t Warframe::getSpeed() const { return m_Speed; }

void Warframe::setSpeed(const utility::string_t &value) {
  m_Speed = value;
  m_SpeedIsSet = true;
}

bool Warframe::speedIsSet() const { return m_SpeedIsSet; }

void Warframe::unsetSpeed() { m_SpeedIsSet = false; }
utility::string_t Warframe::getAura() const { return m_Aura; }

void Warframe::setAura(const utility::string_t &value) {
  m_Aura = value;
  m_AuraIsSet = true;
}

bool Warframe::auraIsSet() const { return m_AuraIsSet; }

void Warframe::unsetAura() { m_AuraIsSet = false; }
utility::string_t Warframe::getPrimeUrl() const { return m_Prime_url; }

void Warframe::setPrimeUrl(const utility::string_t &value) {
  m_Prime_url = value;
  m_Prime_urlIsSet = true;
}

bool Warframe::primeUrlIsSet() const { return m_Prime_urlIsSet; }

void Warframe::unsetPrime_url() { m_Prime_urlIsSet = false; }
double Warframe::getPrimeHealth() const { return m_Prime_health; }

void Warframe::setPrimeHealth(double value) {
  m_Prime_health = value;
  m_Prime_healthIsSet = true;
}

bool Warframe::primeHealthIsSet() const { return m_Prime_healthIsSet; }

void Warframe::unsetPrime_health() { m_Prime_healthIsSet = false; }
double Warframe::getPower() const { return m_Power; }

void Warframe::setPower(double value) {
  m_Power = value;
  m_PowerIsSet = true;
}

bool Warframe::powerIsSet() const { return m_PowerIsSet; }

void Warframe::unsetPower() { m_PowerIsSet = false; }
utility::string_t Warframe::getPrimeAura() const { return m_Prime_aura; }

void Warframe::setPrimeAura(const utility::string_t &value) {
  m_Prime_aura = value;
  m_Prime_auraIsSet = true;
}

bool Warframe::primeAuraIsSet() const { return m_Prime_auraIsSet; }

void Warframe::unsetPrime_aura() { m_Prime_auraIsSet = false; }
utility::string_t Warframe::getInfo() const { return m_Info; }

void Warframe::setInfo(const utility::string_t &value) {
  m_Info = value;
  m_InfoIsSet = true;
}

bool Warframe::infoIsSet() const { return m_InfoIsSet; }

void Warframe::unsetInfo() { m_InfoIsSet = false; }
utility::string_t Warframe::getThumbnail() const { return m_Thumbnail; }

void Warframe::setThumbnail(const utility::string_t &value) {
  m_Thumbnail = value;
  m_ThumbnailIsSet = true;
}

bool Warframe::thumbnailIsSet() const { return m_ThumbnailIsSet; }

void Warframe::unsetThumbnail() { m_ThumbnailIsSet = false; }
utility::string_t Warframe::getMr() const { return m_Mr; }

void Warframe::setMr(const utility::string_t &value) {
  m_Mr = value;
  m_MrIsSet = true;
}

bool Warframe::mrIsSet() const { return m_MrIsSet; }

void Warframe::unsetMr() { m_MrIsSet = false; }
double Warframe::getPrimeShield() const { return m_Prime_shield; }

void Warframe::setPrimeShield(double value) {
  m_Prime_shield = value;
  m_Prime_shieldIsSet = true;
}

bool Warframe::primeShieldIsSet() const { return m_Prime_shieldIsSet; }

void Warframe::unsetPrime_shield() { m_Prime_shieldIsSet = false; }
double Warframe::getHealth() const { return m_Health; }

void Warframe::setHealth(double value) {
  m_Health = value;
  m_HealthIsSet = true;
}

bool Warframe::healthIsSet() const { return m_HealthIsSet; }

void Warframe::unsetHealth() { m_HealthIsSet = false; }
utility::string_t Warframe::getPrimeSpeed() const { return m_Prime_speed; }

void Warframe::setPrimeSpeed(const utility::string_t &value) {
  m_Prime_speed = value;
  m_Prime_speedIsSet = true;
}

bool Warframe::primeSpeedIsSet() const { return m_Prime_speedIsSet; }

void Warframe::unsetPrime_speed() { m_Prime_speedIsSet = false; }
utility::string_t Warframe::getUrl() const { return m_Url; }

void Warframe::setUrl(const utility::string_t &value) {
  m_Url = value;
  m_UrlIsSet = true;
}

bool Warframe::urlIsSet() const { return m_UrlIsSet; }

void Warframe::unsetUrl() { m_UrlIsSet = false; }
utility::string_t Warframe::getRegex() const { return m_Regex; }

void Warframe::setRegex(const utility::string_t &value) {
  m_Regex = value;
  m_RegexIsSet = true;
}

bool Warframe::regexIsSet() const { return m_RegexIsSet; }

void Warframe::unsetRegex() { m_RegexIsSet = false; }
double Warframe::getArmor() const { return m_Armor; }

void Warframe::setArmor(double value) {
  m_Armor = value;
  m_ArmorIsSet = true;
}

bool Warframe::armorIsSet() const { return m_ArmorIsSet; }

void Warframe::unsetArmor() { m_ArmorIsSet = false; }
utility::string_t Warframe::getLocation() const { return m_Location; }

void Warframe::setLocation(const utility::string_t &value) {
  m_Location = value;
  m_LocationIsSet = true;
}

bool Warframe::locationIsSet() const { return m_LocationIsSet; }

void Warframe::unsetLocation() { m_LocationIsSet = false; }
utility::string_t Warframe::getPrimeConclave() const {
  return m_Prime_conclave;
}

void Warframe::setPrimeConclave(const utility::string_t &value) {
  m_Prime_conclave = value;
  m_Prime_conclaveIsSet = true;
}

bool Warframe::primeConclaveIsSet() const { return m_Prime_conclaveIsSet; }

void Warframe::unsetPrime_conclave() { m_Prime_conclaveIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
