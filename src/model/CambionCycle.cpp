/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/CambionCycle.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

CambionCycle::CambionCycle() {
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Expiry = utility::conversions::to_string_t("");
  m_ExpiryIsSet = false;
  m_Activation = utility::conversions::to_string_t("");
  m_ActivationIsSet = false;
  m_State = utility::conversions::to_string_t("");
  m_StateIsSet = false;
  m_Active = utility::conversions::to_string_t("");
  m_ActiveIsSet = false;
  m_TimeLeft = utility::conversions::to_string_t("");
  m_TimeLeftIsSet = false;
}

CambionCycle::~CambionCycle() {}

void CambionCycle::validate() {
  // TODO: implement validation
}

web::json::value CambionCycle::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_ActivationIsSet) {
    val[utility::conversions::to_string_t(U("activation"))] =
        ModelBase::toJson(m_Activation);
  }
  if (m_StateIsSet) {
    val[utility::conversions::to_string_t(U("state"))] =
        ModelBase::toJson(m_State);
  }
  if (m_ActiveIsSet) {
    val[utility::conversions::to_string_t(U("active"))] =
        ModelBase::toJson(m_Active);
  }
  if (m_TimeLeftIsSet) {
    val[utility::conversions::to_string_t(U("timeLeft"))] =
        ModelBase::toJson(m_TimeLeft);
  }

  return val;
}

bool CambionCycle::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("activation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("activation")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setActivation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActivation);
      setActivation(refVal_setActivation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("state")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("state")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setState;
      ok &= ModelBase::fromJson(fieldValue, refVal_setState);
      setState(refVal_setState);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("active")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("active")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setActive;
      ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
      setActive(refVal_setActive);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("timeLeft")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("timeLeft")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTimeLeft;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLeft);
      setTimeLeft(refVal_setTimeLeft);
    }
  }
  return ok;
}

void CambionCycle::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_ActivationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("activation")),
        m_Activation));
  }
  if (m_StateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("state")), m_State));
  }
  if (m_ActiveIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
  }
  if (m_TimeLeftIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("timeLeft")),
        m_TimeLeft));
  }
}

bool CambionCycle::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::string_t refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("activation")))) {
    utility::string_t refVal_setActivation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("activation"))),
        refVal_setActivation);
    setActivation(refVal_setActivation);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("state")))) {
    utility::string_t refVal_setState;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("state"))),
        refVal_setState);
    setState(refVal_setState);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("active")))) {
    utility::string_t refVal_setActive;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("active"))),
        refVal_setActive);
    setActive(refVal_setActive);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("timeLeft")))) {
    utility::string_t refVal_setTimeLeft;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("timeLeft"))),
        refVal_setTimeLeft);
    setTimeLeft(refVal_setTimeLeft);
  }
  return ok;
}

utility::string_t CambionCycle::getId() const { return m_Id; }

void CambionCycle::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool CambionCycle::idIsSet() const { return m_IdIsSet; }

void CambionCycle::unsetId() { m_IdIsSet = false; }
utility::string_t CambionCycle::getExpiry() const { return m_Expiry; }

void CambionCycle::setExpiry(const utility::string_t &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool CambionCycle::expiryIsSet() const { return m_ExpiryIsSet; }

void CambionCycle::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t CambionCycle::getActivation() const { return m_Activation; }

void CambionCycle::setActivation(const utility::string_t &value) {
  m_Activation = value;
  m_ActivationIsSet = true;
}

bool CambionCycle::activationIsSet() const { return m_ActivationIsSet; }

void CambionCycle::unsetActivation() { m_ActivationIsSet = false; }
utility::string_t CambionCycle::getState() const { return m_State; }

void CambionCycle::setState(const utility::string_t &value) {
  m_State = value;
  m_StateIsSet = true;
}

bool CambionCycle::stateIsSet() const { return m_StateIsSet; }

void CambionCycle::unsetState() { m_StateIsSet = false; }
utility::string_t CambionCycle::getActive() const { return m_Active; }

void CambionCycle::setActive(const utility::string_t &value) {
  m_Active = value;
  m_ActiveIsSet = true;
}

bool CambionCycle::activeIsSet() const { return m_ActiveIsSet; }

void CambionCycle::unsetActive() { m_ActiveIsSet = false; }
utility::string_t CambionCycle::getTimeLeft() const { return m_TimeLeft; }

void CambionCycle::setTimeLeft(const utility::string_t &value) {
  m_TimeLeft = value;
  m_TimeLeftIsSet = true;
}

bool CambionCycle::timeLeftIsSet() const { return m_TimeLeftIsSet; }

void CambionCycle::unsetTimeLeft() { m_TimeLeftIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
