/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Attack.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Attack::Attack() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_Crit_chance = 0.0f;
  m_Crit_chanceIsSet = false;
  m_Crit_mult = 0.0f;
  m_Crit_multIsSet = false;
  m_Status_chance = 0.0f;
  m_Status_chanceIsSet = false;
  m_Shot_type = 0.0f;
  m_Shot_typeIsSet = false;
  m_Shot_speed = 0.0f;
  m_Shot_speedIsSet = false;
  m_Duration = 0.0f;
  m_DurationIsSet = false;
  m_Radius = 0.0f;
  m_RadiusIsSet = false;
  m_Speed = 0.0f;
  m_SpeedIsSet = false;
  m_PelletIsSet = false;
  m_Charge_time = 0.0f;
  m_Charge_timeIsSet = false;
  m_Flight = 0.0f;
  m_FlightIsSet = false;
  m_FalloffIsSet = false;
  m_DamageIsSet = false;
  m_Slide = utility::conversions::to_string_t("");
  m_SlideIsSet = false;
  m_Jump = utility::conversions::to_string_t("");
  m_JumpIsSet = false;
  m_Wall = utility::conversions::to_string_t("");
  m_WallIsSet = false;
  m_Channeling = 0.0f;
  m_ChannelingIsSet = false;
  m_SlamIsSet = false;
}

Attack::~Attack() {}

void Attack::validate() {
  // TODO: implement validation
}

web::json::value Attack::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_Crit_chanceIsSet) {
    val[utility::conversions::to_string_t(U("crit_chance"))] =
        ModelBase::toJson(m_Crit_chance);
  }
  if (m_Crit_multIsSet) {
    val[utility::conversions::to_string_t(U("crit_mult"))] =
        ModelBase::toJson(m_Crit_mult);
  }
  if (m_Status_chanceIsSet) {
    val[utility::conversions::to_string_t(U("status_chance"))] =
        ModelBase::toJson(m_Status_chance);
  }
  if (m_Shot_typeIsSet) {
    val[utility::conversions::to_string_t(U("shot_type"))] =
        ModelBase::toJson(m_Shot_type);
  }
  if (m_Shot_speedIsSet) {
    val[utility::conversions::to_string_t(U("shot_speed"))] =
        ModelBase::toJson(m_Shot_speed);
  }
  if (m_DurationIsSet) {
    val[utility::conversions::to_string_t(U("duration"))] =
        ModelBase::toJson(m_Duration);
  }
  if (m_RadiusIsSet) {
    val[utility::conversions::to_string_t(U("radius"))] =
        ModelBase::toJson(m_Radius);
  }
  if (m_SpeedIsSet) {
    val[utility::conversions::to_string_t(U("speed"))] =
        ModelBase::toJson(m_Speed);
  }
  if (m_PelletIsSet) {
    val[utility::conversions::to_string_t(U("pellet"))] =
        ModelBase::toJson(m_Pellet);
  }
  if (m_Charge_timeIsSet) {
    val[utility::conversions::to_string_t(U("charge_time"))] =
        ModelBase::toJson(m_Charge_time);
  }
  if (m_FlightIsSet) {
    val[utility::conversions::to_string_t(U("flight"))] =
        ModelBase::toJson(m_Flight);
  }
  if (m_FalloffIsSet) {
    val[utility::conversions::to_string_t(U("falloff"))] =
        ModelBase::toJson(m_Falloff);
  }
  if (m_DamageIsSet) {
    val[utility::conversions::to_string_t(U("damage"))] =
        ModelBase::toJson(m_Damage);
  }
  if (m_SlideIsSet) {
    val[utility::conversions::to_string_t(U("slide"))] =
        ModelBase::toJson(m_Slide);
  }
  if (m_JumpIsSet) {
    val[utility::conversions::to_string_t(U("jump"))] =
        ModelBase::toJson(m_Jump);
  }
  if (m_WallIsSet) {
    val[utility::conversions::to_string_t(U("wall"))] =
        ModelBase::toJson(m_Wall);
  }
  if (m_ChannelingIsSet) {
    val[utility::conversions::to_string_t(U("channeling"))] =
        ModelBase::toJson(m_Channeling);
  }
  if (m_SlamIsSet) {
    val[utility::conversions::to_string_t(U("slam"))] =
        ModelBase::toJson(m_Slam);
  }

  return val;
}

bool Attack::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("crit_chance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("crit_chance")));
    if (!fieldValue.is_null()) {
      float refVal_setCritChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCritChance);
      setCritChance(refVal_setCritChance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("crit_mult")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("crit_mult")));
    if (!fieldValue.is_null()) {
      float refVal_setCritMult;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCritMult);
      setCritMult(refVal_setCritMult);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("status_chance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("status_chance")));
    if (!fieldValue.is_null()) {
      float refVal_setStatusChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStatusChance);
      setStatusChance(refVal_setStatusChance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("shot_type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("shot_type")));
    if (!fieldValue.is_null()) {
      float refVal_setShotType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setShotType);
      setShotType(refVal_setShotType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("shot_speed")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("shot_speed")));
    if (!fieldValue.is_null()) {
      float refVal_setShotSpeed;
      ok &= ModelBase::fromJson(fieldValue, refVal_setShotSpeed);
      setShotSpeed(refVal_setShotSpeed);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("duration")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("duration")));
    if (!fieldValue.is_null()) {
      float refVal_setDuration;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
      setDuration(refVal_setDuration);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("radius")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("radius")));
    if (!fieldValue.is_null()) {
      float refVal_setRadius;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRadius);
      setRadius(refVal_setRadius);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("speed")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("speed")));
    if (!fieldValue.is_null()) {
      float refVal_setSpeed;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSpeed);
      setSpeed(refVal_setSpeed);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("pellet")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("pellet")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Attack_pellet> refVal_setPellet;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPellet);
      setPellet(refVal_setPellet);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("charge_time")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("charge_time")));
    if (!fieldValue.is_null()) {
      float refVal_setChargeTime;
      ok &= ModelBase::fromJson(fieldValue, refVal_setChargeTime);
      setChargeTime(refVal_setChargeTime);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("flight")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("flight")));
    if (!fieldValue.is_null()) {
      float refVal_setFlight;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFlight);
      setFlight(refVal_setFlight);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("falloff")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("falloff")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Attack_falloff> refVal_setFalloff;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFalloff);
      setFalloff(refVal_setFalloff);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("damage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("damage")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Damage> refVal_setDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDamage);
      setDamage(refVal_setDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slide")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slide")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSlide;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlide);
      setSlide(refVal_setSlide);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("jump")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("jump")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setJump;
      ok &= ModelBase::fromJson(fieldValue, refVal_setJump);
      setJump(refVal_setJump);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("wall")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("wall")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWall;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWall);
      setWall(refVal_setWall);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("channeling")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("channeling")));
    if (!fieldValue.is_null()) {
      float refVal_setChanneling;
      ok &= ModelBase::fromJson(fieldValue, refVal_setChanneling);
      setChanneling(refVal_setChanneling);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slam")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slam")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<SlamAttack> refVal_setSlam;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlam);
      setSlam(refVal_setSlam);
    }
  }
  return ok;
}

void Attack::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                         const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_Crit_chanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("crit_chance")),
        m_Crit_chance));
  }
  if (m_Crit_multIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("crit_mult")),
        m_Crit_mult));
  }
  if (m_Status_chanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("status_chance")),
        m_Status_chance));
  }
  if (m_Shot_typeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("shot_type")),
        m_Shot_type));
  }
  if (m_Shot_speedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("shot_speed")),
        m_Shot_speed));
  }
  if (m_DurationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("duration")),
        m_Duration));
  }
  if (m_RadiusIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("radius")), m_Radius));
  }
  if (m_SpeedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("speed")), m_Speed));
  }
  if (m_PelletIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("pellet")), m_Pellet));
  }
  if (m_Charge_timeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("charge_time")),
        m_Charge_time));
  }
  if (m_FlightIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("flight")), m_Flight));
  }
  if (m_FalloffIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("falloff")),
        m_Falloff));
  }
  if (m_DamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("damage")), m_Damage));
  }
  if (m_SlideIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slide")), m_Slide));
  }
  if (m_JumpIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("jump")), m_Jump));
  }
  if (m_WallIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("wall")), m_Wall));
  }
  if (m_ChannelingIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("channeling")),
        m_Channeling));
  }
  if (m_SlamIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slam")), m_Slam));
  }
}

bool Attack::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                           const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("crit_chance")))) {
    float refVal_setCritChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("crit_chance"))),
        refVal_setCritChance);
    setCritChance(refVal_setCritChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("crit_mult")))) {
    float refVal_setCritMult;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("crit_mult"))),
        refVal_setCritMult);
    setCritMult(refVal_setCritMult);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("status_chance")))) {
    float refVal_setStatusChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("status_chance"))),
        refVal_setStatusChance);
    setStatusChance(refVal_setStatusChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("shot_type")))) {
    float refVal_setShotType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("shot_type"))),
        refVal_setShotType);
    setShotType(refVal_setShotType);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("shot_speed")))) {
    float refVal_setShotSpeed;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("shot_speed"))),
        refVal_setShotSpeed);
    setShotSpeed(refVal_setShotSpeed);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("duration")))) {
    float refVal_setDuration;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("duration"))),
        refVal_setDuration);
    setDuration(refVal_setDuration);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("radius")))) {
    float refVal_setRadius;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("radius"))),
        refVal_setRadius);
    setRadius(refVal_setRadius);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("speed")))) {
    float refVal_setSpeed;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("speed"))),
        refVal_setSpeed);
    setSpeed(refVal_setSpeed);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("pellet")))) {
    std::shared_ptr<Attack_pellet> refVal_setPellet;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("pellet"))),
        refVal_setPellet);
    setPellet(refVal_setPellet);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("charge_time")))) {
    float refVal_setChargeTime;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("charge_time"))),
        refVal_setChargeTime);
    setChargeTime(refVal_setChargeTime);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("flight")))) {
    float refVal_setFlight;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("flight"))),
        refVal_setFlight);
    setFlight(refVal_setFlight);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("falloff")))) {
    std::shared_ptr<Attack_falloff> refVal_setFalloff;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("falloff"))),
        refVal_setFalloff);
    setFalloff(refVal_setFalloff);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("damage")))) {
    std::shared_ptr<Damage> refVal_setDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("damage"))),
        refVal_setDamage);
    setDamage(refVal_setDamage);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("slide")))) {
    utility::string_t refVal_setSlide;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("slide"))),
        refVal_setSlide);
    setSlide(refVal_setSlide);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("jump")))) {
    utility::string_t refVal_setJump;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("jump"))),
        refVal_setJump);
    setJump(refVal_setJump);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("wall")))) {
    utility::string_t refVal_setWall;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("wall"))),
        refVal_setWall);
    setWall(refVal_setWall);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("channeling")))) {
    float refVal_setChanneling;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("channeling"))),
        refVal_setChanneling);
    setChanneling(refVal_setChanneling);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("slam")))) {
    std::shared_ptr<SlamAttack> refVal_setSlam;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("slam"))),
        refVal_setSlam);
    setSlam(refVal_setSlam);
  }
  return ok;
}

utility::string_t Attack::getName() const { return m_Name; }

void Attack::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool Attack::nameIsSet() const { return m_NameIsSet; }

void Attack::unsetName() { m_NameIsSet = false; }
float Attack::getCritChance() const { return m_Crit_chance; }

void Attack::setCritChance(float value) {
  m_Crit_chance = value;
  m_Crit_chanceIsSet = true;
}

bool Attack::critChanceIsSet() const { return m_Crit_chanceIsSet; }

void Attack::unsetCrit_chance() { m_Crit_chanceIsSet = false; }
float Attack::getCritMult() const { return m_Crit_mult; }

void Attack::setCritMult(float value) {
  m_Crit_mult = value;
  m_Crit_multIsSet = true;
}

bool Attack::critMultIsSet() const { return m_Crit_multIsSet; }

void Attack::unsetCrit_mult() { m_Crit_multIsSet = false; }
float Attack::getStatusChance() const { return m_Status_chance; }

void Attack::setStatusChance(float value) {
  m_Status_chance = value;
  m_Status_chanceIsSet = true;
}

bool Attack::statusChanceIsSet() const { return m_Status_chanceIsSet; }

void Attack::unsetStatus_chance() { m_Status_chanceIsSet = false; }
float Attack::getShotType() const { return m_Shot_type; }

void Attack::setShotType(float value) {
  m_Shot_type = value;
  m_Shot_typeIsSet = true;
}

bool Attack::shotTypeIsSet() const { return m_Shot_typeIsSet; }

void Attack::unsetShot_type() { m_Shot_typeIsSet = false; }
float Attack::getShotSpeed() const { return m_Shot_speed; }

void Attack::setShotSpeed(float value) {
  m_Shot_speed = value;
  m_Shot_speedIsSet = true;
}

bool Attack::shotSpeedIsSet() const { return m_Shot_speedIsSet; }

void Attack::unsetShot_speed() { m_Shot_speedIsSet = false; }
float Attack::getDuration() const { return m_Duration; }

void Attack::setDuration(float value) {
  m_Duration = value;
  m_DurationIsSet = true;
}

bool Attack::durationIsSet() const { return m_DurationIsSet; }

void Attack::unsetDuration() { m_DurationIsSet = false; }
float Attack::getRadius() const { return m_Radius; }

void Attack::setRadius(float value) {
  m_Radius = value;
  m_RadiusIsSet = true;
}

bool Attack::radiusIsSet() const { return m_RadiusIsSet; }

void Attack::unsetRadius() { m_RadiusIsSet = false; }
float Attack::getSpeed() const { return m_Speed; }

void Attack::setSpeed(float value) {
  m_Speed = value;
  m_SpeedIsSet = true;
}

bool Attack::speedIsSet() const { return m_SpeedIsSet; }

void Attack::unsetSpeed() { m_SpeedIsSet = false; }
std::shared_ptr<Attack_pellet> Attack::getPellet() const { return m_Pellet; }

void Attack::setPellet(const std::shared_ptr<Attack_pellet> &value) {
  m_Pellet = value;
  m_PelletIsSet = true;
}

bool Attack::pelletIsSet() const { return m_PelletIsSet; }

void Attack::unsetPellet() { m_PelletIsSet = false; }
float Attack::getChargeTime() const { return m_Charge_time; }

void Attack::setChargeTime(float value) {
  m_Charge_time = value;
  m_Charge_timeIsSet = true;
}

bool Attack::chargeTimeIsSet() const { return m_Charge_timeIsSet; }

void Attack::unsetCharge_time() { m_Charge_timeIsSet = false; }
float Attack::getFlight() const { return m_Flight; }

void Attack::setFlight(float value) {
  m_Flight = value;
  m_FlightIsSet = true;
}

bool Attack::flightIsSet() const { return m_FlightIsSet; }

void Attack::unsetFlight() { m_FlightIsSet = false; }
std::shared_ptr<Attack_falloff> Attack::getFalloff() const { return m_Falloff; }

void Attack::setFalloff(const std::shared_ptr<Attack_falloff> &value) {
  m_Falloff = value;
  m_FalloffIsSet = true;
}

bool Attack::falloffIsSet() const { return m_FalloffIsSet; }

void Attack::unsetFalloff() { m_FalloffIsSet = false; }
std::shared_ptr<Damage> Attack::getDamage() const { return m_Damage; }

void Attack::setDamage(const std::shared_ptr<Damage> &value) {
  m_Damage = value;
  m_DamageIsSet = true;
}

bool Attack::damageIsSet() const { return m_DamageIsSet; }

void Attack::unsetDamage() { m_DamageIsSet = false; }
utility::string_t Attack::getSlide() const { return m_Slide; }

void Attack::setSlide(const utility::string_t &value) {
  m_Slide = value;
  m_SlideIsSet = true;
}

bool Attack::slideIsSet() const { return m_SlideIsSet; }

void Attack::unsetSlide() { m_SlideIsSet = false; }
utility::string_t Attack::getJump() const { return m_Jump; }

void Attack::setJump(const utility::string_t &value) {
  m_Jump = value;
  m_JumpIsSet = true;
}

bool Attack::jumpIsSet() const { return m_JumpIsSet; }

void Attack::unsetJump() { m_JumpIsSet = false; }
utility::string_t Attack::getWall() const { return m_Wall; }

void Attack::setWall(const utility::string_t &value) {
  m_Wall = value;
  m_WallIsSet = true;
}

bool Attack::wallIsSet() const { return m_WallIsSet; }

void Attack::unsetWall() { m_WallIsSet = false; }
float Attack::getChanneling() const { return m_Channeling; }

void Attack::setChanneling(float value) {
  m_Channeling = value;
  m_ChannelingIsSet = true;
}

bool Attack::channelingIsSet() const { return m_ChannelingIsSet; }

void Attack::unsetChanneling() { m_ChannelingIsSet = false; }
std::shared_ptr<SlamAttack> Attack::getSlam() const { return m_Slam; }

void Attack::setSlam(const std::shared_ptr<SlamAttack> &value) {
  m_Slam = value;
  m_SlamIsSet = true;
}

bool Attack::slamIsSet() const { return m_SlamIsSet; }

void Attack::unsetSlam() { m_SlamIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
