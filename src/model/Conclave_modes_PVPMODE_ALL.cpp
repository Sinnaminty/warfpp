/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Conclave_modes_PVPMODE_ALL.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Conclave_modes_PVPMODE_ALL::Conclave_modes_PVPMODE_ALL() {
  m_Value = utility::conversions::to_string_t("");
  m_ValueIsSet = false;
}

Conclave_modes_PVPMODE_ALL::~Conclave_modes_PVPMODE_ALL() {}

void Conclave_modes_PVPMODE_ALL::validate() {
  // TODO: implement validation
}

web::json::value Conclave_modes_PVPMODE_ALL::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ValueIsSet) {
    val[utility::conversions::to_string_t(U("value"))] =
        ModelBase::toJson(m_Value);
  }

  return val;
}

bool Conclave_modes_PVPMODE_ALL::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("value")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("value")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setValue;
      ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
      setValue(refVal_setValue);
    }
  }
  return ok;
}

void Conclave_modes_PVPMODE_ALL::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ValueIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
  }
}

bool Conclave_modes_PVPMODE_ALL::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("value")))) {
    utility::string_t refVal_setValue;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("value"))),
        refVal_setValue);
    setValue(refVal_setValue);
  }
  return ok;
}

utility::string_t Conclave_modes_PVPMODE_ALL::getValue() const {
  return m_Value;
}

void Conclave_modes_PVPMODE_ALL::setValue(const utility::string_t &value) {
  m_Value = value;
  m_ValueIsSet = true;
}

bool Conclave_modes_PVPMODE_ALL::valueIsSet() const { return m_ValueIsSet; }

void Conclave_modes_PVPMODE_ALL::unsetValue() { m_ValueIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
