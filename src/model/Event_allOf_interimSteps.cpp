/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Event_allOf_interimSteps.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Event_allOf_interimSteps::Event_allOf_interimSteps() {
  m_Goal = 0.0;
  m_GoalIsSet = false;
  m_RewardIsSet = false;
  m_MessageIsSet = false;
  m_WinnerCount = 0.0;
  m_WinnerCountIsSet = false;
}

Event_allOf_interimSteps::~Event_allOf_interimSteps() {}

void Event_allOf_interimSteps::validate() {
  // TODO: implement validation
}

web::json::value Event_allOf_interimSteps::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_GoalIsSet) {
    val[utility::conversions::to_string_t(U("goal"))] =
        ModelBase::toJson(m_Goal);
  }
  if (m_RewardIsSet) {
    val[utility::conversions::to_string_t(U("reward"))] =
        ModelBase::toJson(m_Reward);
  }
  if (m_MessageIsSet) {
    val[utility::conversions::to_string_t(U("message"))] =
        ModelBase::toJson(m_Message);
  }
  if (m_WinnerCountIsSet) {
    val[utility::conversions::to_string_t(U("winnerCount"))] =
        ModelBase::toJson(m_WinnerCount);
  }

  return val;
}

bool Event_allOf_interimSteps::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("goal")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("goal")));
    if (!fieldValue.is_null()) {
      double refVal_setGoal;
      ok &= ModelBase::fromJson(fieldValue, refVal_setGoal);
      setGoal(refVal_setGoal);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("reward")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("reward")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Reward> refVal_setReward;
      ok &= ModelBase::fromJson(fieldValue, refVal_setReward);
      setReward(refVal_setReward);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("message")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("message")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Event_allOf_message> refVal_setMessage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
      setMessage(refVal_setMessage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("winnerCount")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("winnerCount")));
    if (!fieldValue.is_null()) {
      double refVal_setWinnerCount;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWinnerCount);
      setWinnerCount(refVal_setWinnerCount);
    }
  }
  return ok;
}

void Event_allOf_interimSteps::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_GoalIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("goal")), m_Goal));
  }
  if (m_RewardIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("reward")), m_Reward));
  }
  if (m_MessageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("message")),
        m_Message));
  }
  if (m_WinnerCountIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("winnerCount")),
        m_WinnerCount));
  }
}

bool Event_allOf_interimSteps::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("goal")))) {
    double refVal_setGoal;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("goal"))),
        refVal_setGoal);
    setGoal(refVal_setGoal);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("reward")))) {
    std::shared_ptr<Reward> refVal_setReward;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("reward"))),
        refVal_setReward);
    setReward(refVal_setReward);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("message")))) {
    std::shared_ptr<Event_allOf_message> refVal_setMessage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("message"))),
        refVal_setMessage);
    setMessage(refVal_setMessage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("winnerCount")))) {
    double refVal_setWinnerCount;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("winnerCount"))),
        refVal_setWinnerCount);
    setWinnerCount(refVal_setWinnerCount);
  }
  return ok;
}

double Event_allOf_interimSteps::getGoal() const { return m_Goal; }

void Event_allOf_interimSteps::setGoal(double value) {
  m_Goal = value;
  m_GoalIsSet = true;
}

bool Event_allOf_interimSteps::goalIsSet() const { return m_GoalIsSet; }

void Event_allOf_interimSteps::unsetGoal() { m_GoalIsSet = false; }
std::shared_ptr<Reward> Event_allOf_interimSteps::getReward() const {
  return m_Reward;
}

void Event_allOf_interimSteps::setReward(const std::shared_ptr<Reward> &value) {
  m_Reward = value;
  m_RewardIsSet = true;
}

bool Event_allOf_interimSteps::rewardIsSet() const { return m_RewardIsSet; }

void Event_allOf_interimSteps::unsetReward() { m_RewardIsSet = false; }
std::shared_ptr<Event_allOf_message>
Event_allOf_interimSteps::getMessage() const {
  return m_Message;
}

void Event_allOf_interimSteps::setMessage(
    const std::shared_ptr<Event_allOf_message> &value) {
  m_Message = value;
  m_MessageIsSet = true;
}

bool Event_allOf_interimSteps::messageIsSet() const { return m_MessageIsSet; }

void Event_allOf_interimSteps::unsetMessage() { m_MessageIsSet = false; }
double Event_allOf_interimSteps::getWinnerCount() const {
  return m_WinnerCount;
}

void Event_allOf_interimSteps::setWinnerCount(double value) {
  m_WinnerCount = value;
  m_WinnerCountIsSet = true;
}

bool Event_allOf_interimSteps::winnerCountIsSet() const {
  return m_WinnerCountIsSet;
}

void Event_allOf_interimSteps::unsetWinnerCount() {
  m_WinnerCountIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
