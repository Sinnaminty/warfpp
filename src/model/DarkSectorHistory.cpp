/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/DarkSectorHistory.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

DarkSectorHistory::DarkSectorHistory() {
  m_Defender = utility::conversions::to_string_t("");
  m_DefenderIsSet = false;
  m_DefenderIsAlliance = false;
  m_DefenderIsAllianceIsSet = false;
  m_Attacker = utility::conversions::to_string_t("");
  m_AttackerIsSet = false;
  m_Winner = utility::conversions::to_string_t("");
  m_WinnerIsSet = false;
  m_Start = utility::conversions::to_string_t("");
  m_StartIsSet = false;
  m_End = utility::conversions::to_string_t("");
  m_EndIsSet = false;
}

DarkSectorHistory::~DarkSectorHistory() {}

void DarkSectorHistory::validate() {
  // TODO: implement validation
}

web::json::value DarkSectorHistory::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_DefenderIsSet) {
    val[utility::conversions::to_string_t(U("defender"))] =
        ModelBase::toJson(m_Defender);
  }
  if (m_DefenderIsAllianceIsSet) {
    val[utility::conversions::to_string_t(U("defenderIsAlliance"))] =
        ModelBase::toJson(m_DefenderIsAlliance);
  }
  if (m_AttackerIsSet) {
    val[utility::conversions::to_string_t(U("attacker"))] =
        ModelBase::toJson(m_Attacker);
  }
  if (m_WinnerIsSet) {
    val[utility::conversions::to_string_t(U("winner"))] =
        ModelBase::toJson(m_Winner);
  }
  if (m_StartIsSet) {
    val[utility::conversions::to_string_t(U("start"))] =
        ModelBase::toJson(m_Start);
  }
  if (m_EndIsSet) {
    val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
  }

  return val;
}

bool DarkSectorHistory::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("defender")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defender")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDefender;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefender);
      setDefender(refVal_setDefender);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("defenderIsAlliance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("defenderIsAlliance")));
    if (!fieldValue.is_null()) {
      bool refVal_setDefenderIsAlliance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDefenderIsAlliance);
      setDefenderIsAlliance(refVal_setDefenderIsAlliance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attacker")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attacker")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAttacker;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttacker);
      setAttacker(refVal_setAttacker);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("winner")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("winner")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWinner;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWinner);
      setWinner(refVal_setWinner);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("start")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("start")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setStart;
      ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
      setStart(refVal_setStart);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("end")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("end")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEnd;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
      setEnd(refVal_setEnd);
    }
  }
  return ok;
}

void DarkSectorHistory::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_DefenderIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defender")),
        m_Defender));
  }
  if (m_DefenderIsAllianceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("defenderIsAlliance")),
        m_DefenderIsAlliance));
  }
  if (m_AttackerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attacker")),
        m_Attacker));
  }
  if (m_WinnerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("winner")), m_Winner));
  }
  if (m_StartIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
  }
  if (m_EndIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("end")), m_End));
  }
}

bool DarkSectorHistory::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("defender")))) {
    utility::string_t refVal_setDefender;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("defender"))),
        refVal_setDefender);
    setDefender(refVal_setDefender);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("defenderIsAlliance")))) {
    bool refVal_setDefenderIsAlliance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("defenderIsAlliance"))),
        refVal_setDefenderIsAlliance);
    setDefenderIsAlliance(refVal_setDefenderIsAlliance);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("attacker")))) {
    utility::string_t refVal_setAttacker;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("attacker"))),
        refVal_setAttacker);
    setAttacker(refVal_setAttacker);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("winner")))) {
    utility::string_t refVal_setWinner;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("winner"))),
        refVal_setWinner);
    setWinner(refVal_setWinner);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("start")))) {
    utility::string_t refVal_setStart;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("start"))),
        refVal_setStart);
    setStart(refVal_setStart);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("end")))) {
    utility::string_t refVal_setEnd;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("end"))),
        refVal_setEnd);
    setEnd(refVal_setEnd);
  }
  return ok;
}

utility::string_t DarkSectorHistory::getDefender() const { return m_Defender; }

void DarkSectorHistory::setDefender(const utility::string_t &value) {
  m_Defender = value;
  m_DefenderIsSet = true;
}

bool DarkSectorHistory::defenderIsSet() const { return m_DefenderIsSet; }

void DarkSectorHistory::unsetDefender() { m_DefenderIsSet = false; }
bool DarkSectorHistory::isDefenderIsAlliance() const {
  return m_DefenderIsAlliance;
}

void DarkSectorHistory::setDefenderIsAlliance(bool value) {
  m_DefenderIsAlliance = value;
  m_DefenderIsAllianceIsSet = true;
}

bool DarkSectorHistory::defenderIsAllianceIsSet() const {
  return m_DefenderIsAllianceIsSet;
}

void DarkSectorHistory::unsetDefenderIsAlliance() {
  m_DefenderIsAllianceIsSet = false;
}
utility::string_t DarkSectorHistory::getAttacker() const { return m_Attacker; }

void DarkSectorHistory::setAttacker(const utility::string_t &value) {
  m_Attacker = value;
  m_AttackerIsSet = true;
}

bool DarkSectorHistory::attackerIsSet() const { return m_AttackerIsSet; }

void DarkSectorHistory::unsetAttacker() { m_AttackerIsSet = false; }
utility::string_t DarkSectorHistory::getWinner() const { return m_Winner; }

void DarkSectorHistory::setWinner(const utility::string_t &value) {
  m_Winner = value;
  m_WinnerIsSet = true;
}

bool DarkSectorHistory::winnerIsSet() const { return m_WinnerIsSet; }

void DarkSectorHistory::unsetWinner() { m_WinnerIsSet = false; }
utility::string_t DarkSectorHistory::getStart() const { return m_Start; }

void DarkSectorHistory::setStart(const utility::string_t &value) {
  m_Start = value;
  m_StartIsSet = true;
}

bool DarkSectorHistory::startIsSet() const { return m_StartIsSet; }

void DarkSectorHistory::unsetStart() { m_StartIsSet = false; }
utility::string_t DarkSectorHistory::getEnd() const { return m_End; }

void DarkSectorHistory::setEnd(const utility::string_t &value) {
  m_End = value;
  m_EndIsSet = true;
}

bool DarkSectorHistory::endIsSet() const { return m_EndIsSet; }

void DarkSectorHistory::unsetEnd() { m_EndIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
