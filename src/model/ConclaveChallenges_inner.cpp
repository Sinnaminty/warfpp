/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/ConclaveChallenges_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ConclaveChallenges_inner::ConclaveChallenges_inner() {
  m_Mode = utility::conversions::to_string_t("");
  m_ModeIsSet = false;
  m_Amount = 0.0;
  m_AmountIsSet = false;
  m_Eta = utility::conversions::to_string_t("");
  m_EtaIsSet = false;
  m_Expired = false;
  m_ExpiredIsSet = false;
  m_EndString = utility::conversions::to_string_t("");
  m_EndStringIsSet = false;
  m_Daily = false;
  m_DailyIsSet = false;
  m_Description = utility::conversions::to_string_t("");
  m_DescriptionIsSet = false;
  m_Id = utility::conversions::to_string_t("");
  m_IdIsSet = false;
  m_Expiry = utility::conversions::to_string_t("");
  m_ExpiryIsSet = false;
  m_AsString = utility::conversions::to_string_t("");
  m_AsStringIsSet = false;
  m_Category = utility::conversions::to_string_t("");
  m_CategoryIsSet = false;
  m_RootChallenge = false;
  m_RootChallengeIsSet = false;
}

ConclaveChallenges_inner::~ConclaveChallenges_inner() {}

void ConclaveChallenges_inner::validate() {
  // TODO: implement validation
}

web::json::value ConclaveChallenges_inner::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_ModeIsSet) {
    val[utility::conversions::to_string_t(U("mode"))] =
        ModelBase::toJson(m_Mode);
  }
  if (m_AmountIsSet) {
    val[utility::conversions::to_string_t(U("amount"))] =
        ModelBase::toJson(m_Amount);
  }
  if (m_EtaIsSet) {
    val[utility::conversions::to_string_t(U("eta"))] = ModelBase::toJson(m_Eta);
  }
  if (m_ExpiredIsSet) {
    val[utility::conversions::to_string_t(U("expired"))] =
        ModelBase::toJson(m_Expired);
  }
  if (m_EndStringIsSet) {
    val[utility::conversions::to_string_t(U("endString"))] =
        ModelBase::toJson(m_EndString);
  }
  if (m_DailyIsSet) {
    val[utility::conversions::to_string_t(U("daily"))] =
        ModelBase::toJson(m_Daily);
  }
  if (m_DescriptionIsSet) {
    val[utility::conversions::to_string_t(U("description"))] =
        ModelBase::toJson(m_Description);
  }
  if (m_IdIsSet) {
    val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
  }
  if (m_ExpiryIsSet) {
    val[utility::conversions::to_string_t(U("expiry"))] =
        ModelBase::toJson(m_Expiry);
  }
  if (m_AsStringIsSet) {
    val[utility::conversions::to_string_t(U("asString"))] =
        ModelBase::toJson(m_AsString);
  }
  if (m_CategoryIsSet) {
    val[utility::conversions::to_string_t(U("category"))] =
        ModelBase::toJson(m_Category);
  }
  if (m_RootChallengeIsSet) {
    val[utility::conversions::to_string_t(U("rootChallenge"))] =
        ModelBase::toJson(m_RootChallenge);
  }

  return val;
}

bool ConclaveChallenges_inner::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("mode")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("mode")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMode;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMode);
      setMode(refVal_setMode);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("amount")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("amount")));
    if (!fieldValue.is_null()) {
      double refVal_setAmount;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAmount);
      setAmount(refVal_setAmount);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("eta")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("eta")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEta;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEta);
      setEta(refVal_setEta);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expired")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expired")));
    if (!fieldValue.is_null()) {
      bool refVal_setExpired;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpired);
      setExpired(refVal_setExpired);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("endString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("endString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setEndString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEndString);
      setEndString(refVal_setEndString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("daily")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("daily")));
    if (!fieldValue.is_null()) {
      bool refVal_setDaily;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDaily);
      setDaily(refVal_setDaily);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("description")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("description")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
      setDescription(refVal_setDescription);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("id")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("id")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setId;
      ok &= ModelBase::fromJson(fieldValue, refVal_setId);
      setId(refVal_setId);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("expiry")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("expiry")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setExpiry;
      ok &= ModelBase::fromJson(fieldValue, refVal_setExpiry);
      setExpiry(refVal_setExpiry);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("asString")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("asString")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setAsString;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAsString);
      setAsString(refVal_setAsString);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("category")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("category")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
      setCategory(refVal_setCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("rootChallenge")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("rootChallenge")));
    if (!fieldValue.is_null()) {
      bool refVal_setRootChallenge;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRootChallenge);
      setRootChallenge(refVal_setRootChallenge);
    }
  }
  return ok;
}

void ConclaveChallenges_inner::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_ModeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
  }
  if (m_AmountIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("amount")), m_Amount));
  }
  if (m_EtaIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("eta")), m_Eta));
  }
  if (m_ExpiredIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expired")),
        m_Expired));
  }
  if (m_EndStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("endString")),
        m_EndString));
  }
  if (m_DailyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("daily")), m_Daily));
  }
  if (m_DescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("description")),
        m_Description));
  }
  if (m_IdIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
  }
  if (m_ExpiryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("expiry")), m_Expiry));
  }
  if (m_AsStringIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("asString")),
        m_AsString));
  }
  if (m_CategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("category")),
        m_Category));
  }
  if (m_RootChallengeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("rootChallenge")),
        m_RootChallenge));
  }
}

bool ConclaveChallenges_inner::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("mode")))) {
    utility::string_t refVal_setMode;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("mode"))),
        refVal_setMode);
    setMode(refVal_setMode);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("amount")))) {
    double refVal_setAmount;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("amount"))),
        refVal_setAmount);
    setAmount(refVal_setAmount);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("eta")))) {
    utility::string_t refVal_setEta;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("eta"))),
        refVal_setEta);
    setEta(refVal_setEta);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expired")))) {
    bool refVal_setExpired;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expired"))),
        refVal_setExpired);
    setExpired(refVal_setExpired);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("endString")))) {
    utility::string_t refVal_setEndString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("endString"))),
        refVal_setEndString);
    setEndString(refVal_setEndString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("daily")))) {
    bool refVal_setDaily;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("daily"))),
        refVal_setDaily);
    setDaily(refVal_setDaily);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("description")))) {
    utility::string_t refVal_setDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("description"))),
        refVal_setDescription);
    setDescription(refVal_setDescription);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("id")))) {
    utility::string_t refVal_setId;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("id"))),
        refVal_setId);
    setId(refVal_setId);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("expiry")))) {
    utility::string_t refVal_setExpiry;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("expiry"))),
        refVal_setExpiry);
    setExpiry(refVal_setExpiry);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("asString")))) {
    utility::string_t refVal_setAsString;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("asString"))),
        refVal_setAsString);
    setAsString(refVal_setAsString);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("category")))) {
    utility::string_t refVal_setCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("category"))),
        refVal_setCategory);
    setCategory(refVal_setCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("rootChallenge")))) {
    bool refVal_setRootChallenge;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("rootChallenge"))),
        refVal_setRootChallenge);
    setRootChallenge(refVal_setRootChallenge);
  }
  return ok;
}

utility::string_t ConclaveChallenges_inner::getMode() const { return m_Mode; }

void ConclaveChallenges_inner::setMode(const utility::string_t &value) {
  m_Mode = value;
  m_ModeIsSet = true;
}

bool ConclaveChallenges_inner::modeIsSet() const { return m_ModeIsSet; }

void ConclaveChallenges_inner::unsetMode() { m_ModeIsSet = false; }
double ConclaveChallenges_inner::getAmount() const { return m_Amount; }

void ConclaveChallenges_inner::setAmount(double value) {
  m_Amount = value;
  m_AmountIsSet = true;
}

bool ConclaveChallenges_inner::amountIsSet() const { return m_AmountIsSet; }

void ConclaveChallenges_inner::unsetAmount() { m_AmountIsSet = false; }
utility::string_t ConclaveChallenges_inner::getEta() const { return m_Eta; }

void ConclaveChallenges_inner::setEta(const utility::string_t &value) {
  m_Eta = value;
  m_EtaIsSet = true;
}

bool ConclaveChallenges_inner::etaIsSet() const { return m_EtaIsSet; }

void ConclaveChallenges_inner::unsetEta() { m_EtaIsSet = false; }
bool ConclaveChallenges_inner::isExpired() const { return m_Expired; }

void ConclaveChallenges_inner::setExpired(bool value) {
  m_Expired = value;
  m_ExpiredIsSet = true;
}

bool ConclaveChallenges_inner::expiredIsSet() const { return m_ExpiredIsSet; }

void ConclaveChallenges_inner::unsetExpired() { m_ExpiredIsSet = false; }
utility::string_t ConclaveChallenges_inner::getEndString() const {
  return m_EndString;
}

void ConclaveChallenges_inner::setEndString(const utility::string_t &value) {
  m_EndString = value;
  m_EndStringIsSet = true;
}

bool ConclaveChallenges_inner::endStringIsSet() const {
  return m_EndStringIsSet;
}

void ConclaveChallenges_inner::unsetEndString() { m_EndStringIsSet = false; }
bool ConclaveChallenges_inner::isDaily() const { return m_Daily; }

void ConclaveChallenges_inner::setDaily(bool value) {
  m_Daily = value;
  m_DailyIsSet = true;
}

bool ConclaveChallenges_inner::dailyIsSet() const { return m_DailyIsSet; }

void ConclaveChallenges_inner::unsetDaily() { m_DailyIsSet = false; }
utility::string_t ConclaveChallenges_inner::getDescription() const {
  return m_Description;
}

void ConclaveChallenges_inner::setDescription(const utility::string_t &value) {
  m_Description = value;
  m_DescriptionIsSet = true;
}

bool ConclaveChallenges_inner::descriptionIsSet() const {
  return m_DescriptionIsSet;
}

void ConclaveChallenges_inner::unsetDescription() {
  m_DescriptionIsSet = false;
}
utility::string_t ConclaveChallenges_inner::getId() const { return m_Id; }

void ConclaveChallenges_inner::setId(const utility::string_t &value) {
  m_Id = value;
  m_IdIsSet = true;
}

bool ConclaveChallenges_inner::idIsSet() const { return m_IdIsSet; }

void ConclaveChallenges_inner::unsetId() { m_IdIsSet = false; }
utility::string_t ConclaveChallenges_inner::getExpiry() const {
  return m_Expiry;
}

void ConclaveChallenges_inner::setExpiry(const utility::string_t &value) {
  m_Expiry = value;
  m_ExpiryIsSet = true;
}

bool ConclaveChallenges_inner::expiryIsSet() const { return m_ExpiryIsSet; }

void ConclaveChallenges_inner::unsetExpiry() { m_ExpiryIsSet = false; }
utility::string_t ConclaveChallenges_inner::getAsString() const {
  return m_AsString;
}

void ConclaveChallenges_inner::setAsString(const utility::string_t &value) {
  m_AsString = value;
  m_AsStringIsSet = true;
}

bool ConclaveChallenges_inner::asStringIsSet() const { return m_AsStringIsSet; }

void ConclaveChallenges_inner::unsetAsString() { m_AsStringIsSet = false; }
utility::string_t ConclaveChallenges_inner::getCategory() const {
  return m_Category;
}

void ConclaveChallenges_inner::setCategory(const utility::string_t &value) {
  m_Category = value;
  m_CategoryIsSet = true;
}

bool ConclaveChallenges_inner::categoryIsSet() const { return m_CategoryIsSet; }

void ConclaveChallenges_inner::unsetCategory() { m_CategoryIsSet = false; }
bool ConclaveChallenges_inner::isRootChallenge() const {
  return m_RootChallenge;
}

void ConclaveChallenges_inner::setRootChallenge(bool value) {
  m_RootChallenge = value;
  m_RootChallengeIsSet = true;
}

bool ConclaveChallenges_inner::rootChallengeIsSet() const {
  return m_RootChallengeIsSet;
}

void ConclaveChallenges_inner::unsetRootChallenge() {
  m_RootChallengeIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
