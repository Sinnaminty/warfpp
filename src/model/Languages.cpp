/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Languages.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Languages::Languages() { m_LanguageKeyIsSet = false; }

Languages::~Languages() {}

void Languages::validate() {
  // TODO: implement validation
}

web::json::value Languages::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_LanguageKeyIsSet) {
    val[utility::conversions::to_string_t(U("languageKey"))] =
        ModelBase::toJson(m_LanguageKey);
  }

  return val;
}

bool Languages::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("languageKey")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("languageKey")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setLanguageKey;
      ok &= ModelBase::fromJson(fieldValue, refVal_setLanguageKey);
      setLanguageKey(refVal_setLanguageKey);
    }
  }
  return ok;
}

void Languages::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                            const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_LanguageKeyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("languageKey")),
        m_LanguageKey));
  }
}

bool Languages::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                              const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("languageKey")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setLanguageKey;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("languageKey"))),
        refVal_setLanguageKey);
    setLanguageKey(refVal_setLanguageKey);
  }
  return ok;
}

std::shared_ptr<Conclave_modes_PVPMODE_ALL> Languages::getLanguageKey() const {
  return m_LanguageKey;
}

void Languages::setLanguageKey(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_LanguageKey = value;
  m_LanguageKeyIsSet = true;
}

bool Languages::languageKeyIsSet() const { return m_LanguageKeyIsSet; }

void Languages::unsetLanguageKey() { m_LanguageKeyIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
