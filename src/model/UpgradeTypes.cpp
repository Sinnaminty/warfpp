/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/UpgradeTypes.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UpgradeTypes::UpgradeTypes() {
  m_GAMEPLAY_KILL_XP_AMOUNTIsSet = false;
  m_GAMEPLAY_PICKUP_AMOUNTIsSet = false;
  m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet = false;
  m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet = false;
}

UpgradeTypes::~UpgradeTypes() {}

void UpgradeTypes::validate() {
  // TODO: implement validation
}

web::json::value UpgradeTypes::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_GAMEPLAY_KILL_XP_AMOUNTIsSet) {
    val[utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT"))] =
        ModelBase::toJson(m_GAMEPLAY_KILL_XP_AMOUNT);
  }
  if (m_GAMEPLAY_PICKUP_AMOUNTIsSet) {
    val[utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT"))] =
        ModelBase::toJson(m_GAMEPLAY_PICKUP_AMOUNT);
  }
  if (m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet) {
    val[utility::conversions::to_string_t(U("GAMEPLAY_MONEY_REWARD_AMOUNT"))] =
        ModelBase::toJson(m_GAMEPLAY_MONEY_REWARD_AMOUNT);
  }
  if (m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet) {
    val[utility::conversions::to_string_t(U("GAMEPLAY_MONEY_PICKUP_AMOUNT"))] =
        ModelBase::toJson(m_GAMEPLAY_MONEY_PICKUP_AMOUNT);
  }

  return val;
}

bool UpgradeTypes::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(
          utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setGAMEPLAYKILLXPAMOUNT;
      ok &= ModelBase::fromJson(fieldValue, refVal_setGAMEPLAYKILLXPAMOUNT);
      setGAMEPLAYKILLXPAMOUNT(refVal_setGAMEPLAYKILLXPAMOUNT);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setGAMEPLAYPICKUPAMOUNT;
      ok &= ModelBase::fromJson(fieldValue, refVal_setGAMEPLAYPICKUPAMOUNT);
      setGAMEPLAYPICKUPAMOUNT(refVal_setGAMEPLAYPICKUPAMOUNT);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(
          U("GAMEPLAY_MONEY_REWARD_AMOUNT")))) {
    const web::json::value &fieldValue = val.at(
        utility::conversions::to_string_t(U("GAMEPLAY_MONEY_REWARD_AMOUNT")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setGAMEPLAYMONEYREWARDAMOUNT;
      ok &=
          ModelBase::fromJson(fieldValue, refVal_setGAMEPLAYMONEYREWARDAMOUNT);
      setGAMEPLAYMONEYREWARDAMOUNT(refVal_setGAMEPLAYMONEYREWARDAMOUNT);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(
          U("GAMEPLAY_MONEY_PICKUP_AMOUNT")))) {
    const web::json::value &fieldValue = val.at(
        utility::conversions::to_string_t(U("GAMEPLAY_MONEY_PICKUP_AMOUNT")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Conclave_modes_PVPMODE_ALL>
          refVal_setGAMEPLAYMONEYPICKUPAMOUNT;
      ok &=
          ModelBase::fromJson(fieldValue, refVal_setGAMEPLAYMONEYPICKUPAMOUNT);
      setGAMEPLAYMONEYPICKUPAMOUNT(refVal_setGAMEPLAYMONEYPICKUPAMOUNT);
    }
  }
  return ok;
}

void UpgradeTypes::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_GAMEPLAY_KILL_XP_AMOUNTIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT")),
        m_GAMEPLAY_KILL_XP_AMOUNT));
  }
  if (m_GAMEPLAY_PICKUP_AMOUNTIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix +
            utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT")),
        m_GAMEPLAY_PICKUP_AMOUNT));
  }
  if (m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(
                         U("GAMEPLAY_MONEY_REWARD_AMOUNT")),
        m_GAMEPLAY_MONEY_REWARD_AMOUNT));
  }
  if (m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(
                         U("GAMEPLAY_MONEY_PICKUP_AMOUNT")),
        m_GAMEPLAY_MONEY_PICKUP_AMOUNT));
  }
}

bool UpgradeTypes::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(
          utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setGAMEPLAYKILLXPAMOUNT;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("GAMEPLAY_KILL_XP_AMOUNT"))),
        refVal_setGAMEPLAYKILLXPAMOUNT);
    setGAMEPLAYKILLXPAMOUNT(refVal_setGAMEPLAYKILLXPAMOUNT);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL> refVal_setGAMEPLAYPICKUPAMOUNT;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("GAMEPLAY_PICKUP_AMOUNT"))),
        refVal_setGAMEPLAYPICKUPAMOUNT);
    setGAMEPLAYPICKUPAMOUNT(refVal_setGAMEPLAYPICKUPAMOUNT);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(
          U("GAMEPLAY_MONEY_REWARD_AMOUNT")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL>
        refVal_setGAMEPLAYMONEYREWARDAMOUNT;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(
            U("GAMEPLAY_MONEY_REWARD_AMOUNT"))),
        refVal_setGAMEPLAYMONEYREWARDAMOUNT);
    setGAMEPLAYMONEYREWARDAMOUNT(refVal_setGAMEPLAYMONEYREWARDAMOUNT);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(
          U("GAMEPLAY_MONEY_PICKUP_AMOUNT")))) {
    std::shared_ptr<Conclave_modes_PVPMODE_ALL>
        refVal_setGAMEPLAYMONEYPICKUPAMOUNT;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(
            U("GAMEPLAY_MONEY_PICKUP_AMOUNT"))),
        refVal_setGAMEPLAYMONEYPICKUPAMOUNT);
    setGAMEPLAYMONEYPICKUPAMOUNT(refVal_setGAMEPLAYMONEYPICKUPAMOUNT);
  }
  return ok;
}

std::shared_ptr<Conclave_modes_PVPMODE_ALL>
UpgradeTypes::getGAMEPLAYKILLXPAMOUNT() const {
  return m_GAMEPLAY_KILL_XP_AMOUNT;
}

void UpgradeTypes::setGAMEPLAYKILLXPAMOUNT(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_GAMEPLAY_KILL_XP_AMOUNT = value;
  m_GAMEPLAY_KILL_XP_AMOUNTIsSet = true;
}

bool UpgradeTypes::gAMEPLAYKILLXPAMOUNTIsSet() const {
  return m_GAMEPLAY_KILL_XP_AMOUNTIsSet;
}

void UpgradeTypes::unsetGAMEPLAY_KILL_XP_AMOUNT() {
  m_GAMEPLAY_KILL_XP_AMOUNTIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
UpgradeTypes::getGAMEPLAYPICKUPAMOUNT() const {
  return m_GAMEPLAY_PICKUP_AMOUNT;
}

void UpgradeTypes::setGAMEPLAYPICKUPAMOUNT(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_GAMEPLAY_PICKUP_AMOUNT = value;
  m_GAMEPLAY_PICKUP_AMOUNTIsSet = true;
}

bool UpgradeTypes::gAMEPLAYPICKUPAMOUNTIsSet() const {
  return m_GAMEPLAY_PICKUP_AMOUNTIsSet;
}

void UpgradeTypes::unsetGAMEPLAY_PICKUP_AMOUNT() {
  m_GAMEPLAY_PICKUP_AMOUNTIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
UpgradeTypes::getGAMEPLAYMONEYREWARDAMOUNT() const {
  return m_GAMEPLAY_MONEY_REWARD_AMOUNT;
}

void UpgradeTypes::setGAMEPLAYMONEYREWARDAMOUNT(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_GAMEPLAY_MONEY_REWARD_AMOUNT = value;
  m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet = true;
}

bool UpgradeTypes::gAMEPLAYMONEYREWARDAMOUNTIsSet() const {
  return m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet;
}

void UpgradeTypes::unsetGAMEPLAY_MONEY_REWARD_AMOUNT() {
  m_GAMEPLAY_MONEY_REWARD_AMOUNTIsSet = false;
}
std::shared_ptr<Conclave_modes_PVPMODE_ALL>
UpgradeTypes::getGAMEPLAYMONEYPICKUPAMOUNT() const {
  return m_GAMEPLAY_MONEY_PICKUP_AMOUNT;
}

void UpgradeTypes::setGAMEPLAYMONEYPICKUPAMOUNT(
    const std::shared_ptr<Conclave_modes_PVPMODE_ALL> &value) {
  m_GAMEPLAY_MONEY_PICKUP_AMOUNT = value;
  m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet = true;
}

bool UpgradeTypes::gAMEPLAYMONEYPICKUPAMOUNTIsSet() const {
  return m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet;
}

void UpgradeTypes::unsetGAMEPLAY_MONEY_PICKUP_AMOUNT() {
  m_GAMEPLAY_MONEY_PICKUP_AMOUNTIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
