/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Event_allOf_progressSteps.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Event_allOf_progressSteps::Event_allOf_progressSteps() {
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_ProgressAmt = 0.0;
  m_ProgressAmtIsSet = false;
}

Event_allOf_progressSteps::~Event_allOf_progressSteps() {}

void Event_allOf_progressSteps::validate() {
  // TODO: implement validation
}

web::json::value Event_allOf_progressSteps::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_ProgressAmtIsSet) {
    val[utility::conversions::to_string_t(U("progressAmt"))] =
        ModelBase::toJson(m_ProgressAmt);
  }

  return val;
}

bool Event_allOf_progressSteps::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("progressAmt")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("progressAmt")));
    if (!fieldValue.is_null()) {
      double refVal_setProgressAmt;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProgressAmt);
      setProgressAmt(refVal_setProgressAmt);
    }
  }
  return ok;
}

void Event_allOf_progressSteps::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_ProgressAmtIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("progressAmt")),
        m_ProgressAmt));
  }
}

bool Event_allOf_progressSteps::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("progressAmt")))) {
    double refVal_setProgressAmt;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("progressAmt"))),
        refVal_setProgressAmt);
    setProgressAmt(refVal_setProgressAmt);
  }
  return ok;
}

utility::string_t Event_allOf_progressSteps::getType() const { return m_Type; }

void Event_allOf_progressSteps::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool Event_allOf_progressSteps::typeIsSet() const { return m_TypeIsSet; }

void Event_allOf_progressSteps::unsetType() { m_TypeIsSet = false; }
double Event_allOf_progressSteps::getProgressAmt() const {
  return m_ProgressAmt;
}

void Event_allOf_progressSteps::setProgressAmt(double value) {
  m_ProgressAmt = value;
  m_ProgressAmtIsSet = true;
}

bool Event_allOf_progressSteps::progressAmtIsSet() const {
  return m_ProgressAmtIsSet;
}

void Event_allOf_progressSteps::unsetProgressAmt() {
  m_ProgressAmtIsSet = false;
}
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
