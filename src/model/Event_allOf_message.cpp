/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/Event_allOf_message.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Event_allOf_message::Event_allOf_message() {
  m_Sender = utility::conversions::to_string_t("");
  m_SenderIsSet = false;
  m_Subject = utility::conversions::to_string_t("");
  m_SubjectIsSet = false;
  m_Message = utility::conversions::to_string_t("");
  m_MessageIsSet = false;
  m_SenderIcon = utility::conversions::to_string_t("");
  m_SenderIconIsSet = false;
  m_AttachmentsIsSet = false;
}

Event_allOf_message::~Event_allOf_message() {}

void Event_allOf_message::validate() {
  // TODO: implement validation
}

web::json::value Event_allOf_message::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_SenderIsSet) {
    val[utility::conversions::to_string_t(U("sender"))] =
        ModelBase::toJson(m_Sender);
  }
  if (m_SubjectIsSet) {
    val[utility::conversions::to_string_t(U("subject"))] =
        ModelBase::toJson(m_Subject);
  }
  if (m_MessageIsSet) {
    val[utility::conversions::to_string_t(U("message"))] =
        ModelBase::toJson(m_Message);
  }
  if (m_SenderIconIsSet) {
    val[utility::conversions::to_string_t(U("senderIcon"))] =
        ModelBase::toJson(m_SenderIcon);
  }
  if (m_AttachmentsIsSet) {
    val[utility::conversions::to_string_t(U("attachments"))] =
        ModelBase::toJson(m_Attachments);
  }

  return val;
}

bool Event_allOf_message::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("sender")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("sender")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSender;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
      setSender(refVal_setSender);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("subject")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("subject")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSubject;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
      setSubject(refVal_setSubject);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("message")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("message")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMessage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
      setMessage(refVal_setMessage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("senderIcon")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("senderIcon")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setSenderIcon;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSenderIcon);
      setSenderIcon(refVal_setSenderIcon);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attachments")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attachments")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setAttachments;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttachments);
      setAttachments(refVal_setAttachments);
    }
  }
  return ok;
}

void Event_allOf_message::toMultipart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_SenderIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
  }
  if (m_SubjectIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("subject")),
        m_Subject));
  }
  if (m_MessageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("message")),
        m_Message));
  }
  if (m_SenderIconIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("senderIcon")),
        m_SenderIcon));
  }
  if (m_AttachmentsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attachments")),
        m_Attachments));
  }
}

bool Event_allOf_message::fromMultiPart(
    std::shared_ptr<MultipartFormData> multipart,
    const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("sender")))) {
    utility::string_t refVal_setSender;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("sender"))),
        refVal_setSender);
    setSender(refVal_setSender);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("subject")))) {
    utility::string_t refVal_setSubject;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("subject"))),
        refVal_setSubject);
    setSubject(refVal_setSubject);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("message")))) {
    utility::string_t refVal_setMessage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("message"))),
        refVal_setMessage);
    setMessage(refVal_setMessage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("senderIcon")))) {
    utility::string_t refVal_setSenderIcon;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("senderIcon"))),
        refVal_setSenderIcon);
    setSenderIcon(refVal_setSenderIcon);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("attachments")))) {
    std::vector<utility::string_t> refVal_setAttachments;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("attachments"))),
        refVal_setAttachments);
    setAttachments(refVal_setAttachments);
  }
  return ok;
}

utility::string_t Event_allOf_message::getSender() const { return m_Sender; }

void Event_allOf_message::setSender(const utility::string_t &value) {
  m_Sender = value;
  m_SenderIsSet = true;
}

bool Event_allOf_message::senderIsSet() const { return m_SenderIsSet; }

void Event_allOf_message::unsetSender() { m_SenderIsSet = false; }
utility::string_t Event_allOf_message::getSubject() const { return m_Subject; }

void Event_allOf_message::setSubject(const utility::string_t &value) {
  m_Subject = value;
  m_SubjectIsSet = true;
}

bool Event_allOf_message::subjectIsSet() const { return m_SubjectIsSet; }

void Event_allOf_message::unsetSubject() { m_SubjectIsSet = false; }
utility::string_t Event_allOf_message::getMessage() const { return m_Message; }

void Event_allOf_message::setMessage(const utility::string_t &value) {
  m_Message = value;
  m_MessageIsSet = true;
}

bool Event_allOf_message::messageIsSet() const { return m_MessageIsSet; }

void Event_allOf_message::unsetMessage() { m_MessageIsSet = false; }
utility::string_t Event_allOf_message::getSenderIcon() const {
  return m_SenderIcon;
}

void Event_allOf_message::setSenderIcon(const utility::string_t &value) {
  m_SenderIcon = value;
  m_SenderIconIsSet = true;
}

bool Event_allOf_message::senderIconIsSet() const { return m_SenderIconIsSet; }

void Event_allOf_message::unsetSenderIcon() { m_SenderIconIsSet = false; }
std::vector<utility::string_t> &Event_allOf_message::getAttachments() {
  return m_Attachments;
}

void Event_allOf_message::setAttachments(
    const std::vector<utility::string_t> &value) {
  m_Attachments = value;
  m_AttachmentsIsSet = true;
}

bool Event_allOf_message::attachmentsIsSet() const {
  return m_AttachmentsIsSet;
}

void Event_allOf_message::unsetAttachments() { m_AttachmentsIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
