/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/model/RangedWeapon.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

RangedWeapon::RangedWeapon() {
  m_Name = utility::conversions::to_string_t("");
  m_NameIsSet = false;
  m_UniqueName = utility::conversions::to_string_t("");
  m_UniqueNameIsSet = false;
  m_Description = utility::conversions::to_string_t("");
  m_DescriptionIsSet = false;
  m_Type = utility::conversions::to_string_t("");
  m_TypeIsSet = false;
  m_Tradable = false;
  m_TradableIsSet = false;
  m_Category = utility::conversions::to_string_t("");
  m_CategoryIsSet = false;
  m_ProductCategory = utility::conversions::to_string_t("");
  m_ProductCategoryIsSet = false;
  m_PatchlogsIsSet = false;
  m_ComponentsIsSet = false;
  m_IntroducedIsSet = false;
  m_EstimatedVaultDateIsSet = false;
  m_Url = utility::conversions::to_string_t("");
  m_UrlIsSet = false;
  m_Mr = 0.0;
  m_MrIsSet = false;
  m_Riven_disposition = 0.0;
  m_Riven_dispositionIsSet = false;
  m_PolaritiesIsSet = false;
  m_Thumbnail = utility::conversions::to_string_t("");
  m_ThumbnailIsSet = false;
  m_TagsIsSet = false;
  m_Vaulted = false;
  m_VaultedIsSet = false;
  m_MarketCost = utility::conversions::to_string_t("");
  m_MarketCostIsSet = false;
  m_BpCost = utility::conversions::to_string_t("");
  m_BpCostIsSet = false;
  m_AttacksIsSet = false;
  m_MasteryReq = 0;
  m_MasteryReqIsSet = false;
  m_BuildPrice = 0;
  m_BuildPriceIsSet = false;
  m_BuildTime = 0;
  m_BuildTimeIsSet = false;
  m_SkipBuildTimePrice = 0;
  m_SkipBuildTimePriceIsSet = false;
  m_BuildQuantity = 0;
  m_BuildQuantityIsSet = false;
  m_ConsumeOnBuild = false;
  m_ConsumeOnBuildIsSet = false;
  m_WikiaThumbnail = utility::conversions::to_string_t("");
  m_WikiaThumbnailIsSet = false;
  m_WikiaUrl = utility::conversions::to_string_t("");
  m_WikiaUrlIsSet = false;
  m_CriticalChance = 0.0f;
  m_CriticalChanceIsSet = false;
  m_CriticalMultiplier = 0.0f;
  m_CriticalMultiplierIsSet = false;
  m_Disposition = 0;
  m_DispositionIsSet = false;
  m_FireRate = 0.0f;
  m_FireRateIsSet = false;
  m_OmegaAttenuation = 0.0f;
  m_OmegaAttenuationIsSet = false;
  m_ProcChance = 0.0f;
  m_ProcChanceIsSet = false;
  m_ReleaseDate = 0.0f;
  m_ReleaseDateIsSet = false;
  m_Slot = 0;
  m_SlotIsSet = false;
  m_TotalDamage = 0;
  m_TotalDamageIsSet = false;
  m_VaultDateIsSet = false;
  m_Accuracy = 0.0;
  m_AccuracyIsSet = false;
  m_Ammo = 0.0;
  m_AmmoIsSet = false;
  m_MagazineSize = 0;
  m_MagazineSizeIsSet = false;
  m_Multishot = 0.0f;
  m_MultishotIsSet = false;
  m_Noise = utility::conversions::to_string_t("");
  m_NoiseIsSet = false;
  m_Trigger = utility::conversions::to_string_t("");
  m_TriggerIsSet = false;
}

RangedWeapon::~RangedWeapon() {}

void RangedWeapon::validate() {
  // TODO: implement validation
}

web::json::value RangedWeapon::toJson() const {

  web::json::value val = web::json::value::object();

  if (m_NameIsSet) {
    val[utility::conversions::to_string_t(U("name"))] =
        ModelBase::toJson(m_Name);
  }
  if (m_UniqueNameIsSet) {
    val[utility::conversions::to_string_t(U("uniqueName"))] =
        ModelBase::toJson(m_UniqueName);
  }
  if (m_DescriptionIsSet) {
    val[utility::conversions::to_string_t(U("description"))] =
        ModelBase::toJson(m_Description);
  }
  if (m_TypeIsSet) {
    val[utility::conversions::to_string_t(U("type"))] =
        ModelBase::toJson(m_Type);
  }
  if (m_TradableIsSet) {
    val[utility::conversions::to_string_t(U("tradable"))] =
        ModelBase::toJson(m_Tradable);
  }
  if (m_CategoryIsSet) {
    val[utility::conversions::to_string_t(U("category"))] =
        ModelBase::toJson(m_Category);
  }
  if (m_ProductCategoryIsSet) {
    val[utility::conversions::to_string_t(U("productCategory"))] =
        ModelBase::toJson(m_ProductCategory);
  }
  if (m_PatchlogsIsSet) {
    val[utility::conversions::to_string_t(U("patchlogs"))] =
        ModelBase::toJson(m_Patchlogs);
  }
  if (m_ComponentsIsSet) {
    val[utility::conversions::to_string_t(U("components"))] =
        ModelBase::toJson(m_Components);
  }
  if (m_IntroducedIsSet) {
    val[utility::conversions::to_string_t(U("introduced"))] =
        ModelBase::toJson(m_Introduced);
  }
  if (m_EstimatedVaultDateIsSet) {
    val[utility::conversions::to_string_t(U("estimatedVaultDate"))] =
        ModelBase::toJson(m_EstimatedVaultDate);
  }
  if (m_UrlIsSet) {
    val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
  }
  if (m_MrIsSet) {
    val[utility::conversions::to_string_t(U("mr"))] = ModelBase::toJson(m_Mr);
  }
  if (m_Riven_dispositionIsSet) {
    val[utility::conversions::to_string_t(U("riven_disposition"))] =
        ModelBase::toJson(m_Riven_disposition);
  }
  if (m_PolaritiesIsSet) {
    val[utility::conversions::to_string_t(U("polarities"))] =
        ModelBase::toJson(m_Polarities);
  }
  if (m_ThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("thumbnail"))] =
        ModelBase::toJson(m_Thumbnail);
  }
  if (m_TagsIsSet) {
    val[utility::conversions::to_string_t(U("tags"))] =
        ModelBase::toJson(m_Tags);
  }
  if (m_VaultedIsSet) {
    val[utility::conversions::to_string_t(U("vaulted"))] =
        ModelBase::toJson(m_Vaulted);
  }
  if (m_MarketCostIsSet) {
    val[utility::conversions::to_string_t(U("marketCost"))] =
        ModelBase::toJson(m_MarketCost);
  }
  if (m_BpCostIsSet) {
    val[utility::conversions::to_string_t(U("bpCost"))] =
        ModelBase::toJson(m_BpCost);
  }
  if (m_AttacksIsSet) {
    val[utility::conversions::to_string_t(U("attacks"))] =
        ModelBase::toJson(m_Attacks);
  }
  if (m_MasteryReqIsSet) {
    val[utility::conversions::to_string_t(U("masteryReq"))] =
        ModelBase::toJson(m_MasteryReq);
  }
  if (m_BuildPriceIsSet) {
    val[utility::conversions::to_string_t(U("buildPrice"))] =
        ModelBase::toJson(m_BuildPrice);
  }
  if (m_BuildTimeIsSet) {
    val[utility::conversions::to_string_t(U("buildTime"))] =
        ModelBase::toJson(m_BuildTime);
  }
  if (m_SkipBuildTimePriceIsSet) {
    val[utility::conversions::to_string_t(U("skipBuildTimePrice"))] =
        ModelBase::toJson(m_SkipBuildTimePrice);
  }
  if (m_BuildQuantityIsSet) {
    val[utility::conversions::to_string_t(U("buildQuantity"))] =
        ModelBase::toJson(m_BuildQuantity);
  }
  if (m_ConsumeOnBuildIsSet) {
    val[utility::conversions::to_string_t(U("consumeOnBuild"))] =
        ModelBase::toJson(m_ConsumeOnBuild);
  }
  if (m_WikiaThumbnailIsSet) {
    val[utility::conversions::to_string_t(U("wikiaThumbnail"))] =
        ModelBase::toJson(m_WikiaThumbnail);
  }
  if (m_WikiaUrlIsSet) {
    val[utility::conversions::to_string_t(U("wikiaUrl"))] =
        ModelBase::toJson(m_WikiaUrl);
  }
  if (m_CriticalChanceIsSet) {
    val[utility::conversions::to_string_t(U("criticalChance"))] =
        ModelBase::toJson(m_CriticalChance);
  }
  if (m_CriticalMultiplierIsSet) {
    val[utility::conversions::to_string_t(U("criticalMultiplier"))] =
        ModelBase::toJson(m_CriticalMultiplier);
  }
  if (m_DispositionIsSet) {
    val[utility::conversions::to_string_t(U("disposition"))] =
        ModelBase::toJson(m_Disposition);
  }
  if (m_FireRateIsSet) {
    val[utility::conversions::to_string_t(U("fireRate"))] =
        ModelBase::toJson(m_FireRate);
  }
  if (m_OmegaAttenuationIsSet) {
    val[utility::conversions::to_string_t(U("omegaAttenuation"))] =
        ModelBase::toJson(m_OmegaAttenuation);
  }
  if (m_ProcChanceIsSet) {
    val[utility::conversions::to_string_t(U("procChance"))] =
        ModelBase::toJson(m_ProcChance);
  }
  if (m_ReleaseDateIsSet) {
    val[utility::conversions::to_string_t(U("releaseDate"))] =
        ModelBase::toJson(m_ReleaseDate);
  }
  if (m_SlotIsSet) {
    val[utility::conversions::to_string_t(U("slot"))] =
        ModelBase::toJson(m_Slot);
  }
  if (m_TotalDamageIsSet) {
    val[utility::conversions::to_string_t(U("totalDamage"))] =
        ModelBase::toJson(m_TotalDamage);
  }
  if (m_VaultDateIsSet) {
    val[utility::conversions::to_string_t(U("vaultDate"))] =
        ModelBase::toJson(m_VaultDate);
  }
  if (m_AccuracyIsSet) {
    val[utility::conversions::to_string_t(U("accuracy"))] =
        ModelBase::toJson(m_Accuracy);
  }
  if (m_AmmoIsSet) {
    val[utility::conversions::to_string_t(U("ammo"))] =
        ModelBase::toJson(m_Ammo);
  }
  if (m_MagazineSizeIsSet) {
    val[utility::conversions::to_string_t(U("magazineSize"))] =
        ModelBase::toJson(m_MagazineSize);
  }
  if (m_MultishotIsSet) {
    val[utility::conversions::to_string_t(U("multishot"))] =
        ModelBase::toJson(m_Multishot);
  }
  if (m_NoiseIsSet) {
    val[utility::conversions::to_string_t(U("noise"))] =
        ModelBase::toJson(m_Noise);
  }
  if (m_TriggerIsSet) {
    val[utility::conversions::to_string_t(U("trigger"))] =
        ModelBase::toJson(m_Trigger);
  }

  return val;
}

bool RangedWeapon::fromJson(const web::json::value &val) {
  bool ok = true;

  if (val.has_field(utility::conversions::to_string_t(U("name")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("name")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setName);
      setName(refVal_setName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("uniqueName")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("uniqueName")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUniqueName;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUniqueName);
      setUniqueName(refVal_setUniqueName);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("description")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("description")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setDescription;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
      setDescription(refVal_setDescription);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("type")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("type")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setType;
      ok &= ModelBase::fromJson(fieldValue, refVal_setType);
      setType(refVal_setType);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tradable")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tradable")));
    if (!fieldValue.is_null()) {
      bool refVal_setTradable;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTradable);
      setTradable(refVal_setTradable);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("category")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("category")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
      setCategory(refVal_setCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("productCategory")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("productCategory")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setProductCategory;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProductCategory);
      setProductCategory(refVal_setProductCategory);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("patchlogs")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("patchlogs")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPatchlogs);
      setPatchlogs(refVal_setPatchlogs);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("components")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("components")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
      ok &= ModelBase::fromJson(fieldValue, refVal_setComponents);
      setComponents(refVal_setComponents);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("introduced")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("introduced")));
    if (!fieldValue.is_null()) {
      std::shared_ptr<Introduced> refVal_setIntroduced;
      ok &= ModelBase::fromJson(fieldValue, refVal_setIntroduced);
      setIntroduced(refVal_setIntroduced);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("estimatedVaultDate")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setEstimatedVaultDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedVaultDate);
      setEstimatedVaultDate(refVal_setEstimatedVaultDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("url")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("url")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
      setUrl(refVal_setUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("mr")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("mr")));
    if (!fieldValue.is_null()) {
      double refVal_setMr;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMr);
      setMr(refVal_setMr);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("riven_disposition")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("riven_disposition")));
    if (!fieldValue.is_null()) {
      double refVal_setRivenDisposition;
      ok &= ModelBase::fromJson(fieldValue, refVal_setRivenDisposition);
      setRivenDisposition(refVal_setRivenDisposition);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("polarities")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("polarities")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Polarity>> refVal_setPolarities;
      ok &= ModelBase::fromJson(fieldValue, refVal_setPolarities);
      setPolarities(refVal_setPolarities);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("thumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("thumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnail);
      setThumbnail(refVal_setThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("tags")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("tags")));
    if (!fieldValue.is_null()) {
      std::vector<utility::string_t> refVal_setTags;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
      setTags(refVal_setTags);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vaulted")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vaulted")));
    if (!fieldValue.is_null()) {
      bool refVal_setVaulted;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVaulted);
      setVaulted(refVal_setVaulted);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("marketCost")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("marketCost")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setMarketCost;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMarketCost);
      setMarketCost(refVal_setMarketCost);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("bpCost")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("bpCost")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setBpCost;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBpCost);
      setBpCost(refVal_setBpCost);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("attacks")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("attacks")));
    if (!fieldValue.is_null()) {
      std::vector<std::shared_ptr<Attack>> refVal_setAttacks;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAttacks);
      setAttacks(refVal_setAttacks);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("masteryReq")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("masteryReq")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setMasteryReq;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMasteryReq);
      setMasteryReq(refVal_setMasteryReq);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildPrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildPrice")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildPrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildPrice);
      setBuildPrice(refVal_setBuildPrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildTime")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildTime")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildTime;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildTime);
      setBuildTime(refVal_setBuildTime);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("skipBuildTimePrice")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("skipBuildTimePrice")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSkipBuildTimePrice;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSkipBuildTimePrice);
      setSkipBuildTimePrice(refVal_setSkipBuildTimePrice);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("buildQuantity")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("buildQuantity")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setBuildQuantity;
      ok &= ModelBase::fromJson(fieldValue, refVal_setBuildQuantity);
      setBuildQuantity(refVal_setBuildQuantity);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("consumeOnBuild")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("consumeOnBuild")));
    if (!fieldValue.is_null()) {
      bool refVal_setConsumeOnBuild;
      ok &= ModelBase::fromJson(fieldValue, refVal_setConsumeOnBuild);
      setConsumeOnBuild(refVal_setConsumeOnBuild);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("wikiaThumbnail")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("wikiaThumbnail")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWikiaThumbnail;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWikiaThumbnail);
      setWikiaThumbnail(refVal_setWikiaThumbnail);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("wikiaUrl")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("wikiaUrl")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setWikiaUrl;
      ok &= ModelBase::fromJson(fieldValue, refVal_setWikiaUrl);
      setWikiaUrl(refVal_setWikiaUrl);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("criticalChance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("criticalChance")));
    if (!fieldValue.is_null()) {
      float refVal_setCriticalChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCriticalChance);
      setCriticalChance(refVal_setCriticalChance);
    }
  }
  if (val.has_field(
          utility::conversions::to_string_t(U("criticalMultiplier")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("criticalMultiplier")));
    if (!fieldValue.is_null()) {
      float refVal_setCriticalMultiplier;
      ok &= ModelBase::fromJson(fieldValue, refVal_setCriticalMultiplier);
      setCriticalMultiplier(refVal_setCriticalMultiplier);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("disposition")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("disposition")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setDisposition;
      ok &= ModelBase::fromJson(fieldValue, refVal_setDisposition);
      setDisposition(refVal_setDisposition);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("fireRate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("fireRate")));
    if (!fieldValue.is_null()) {
      float refVal_setFireRate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setFireRate);
      setFireRate(refVal_setFireRate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("omegaAttenuation")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("omegaAttenuation")));
    if (!fieldValue.is_null()) {
      float refVal_setOmegaAttenuation;
      ok &= ModelBase::fromJson(fieldValue, refVal_setOmegaAttenuation);
      setOmegaAttenuation(refVal_setOmegaAttenuation);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("procChance")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("procChance")));
    if (!fieldValue.is_null()) {
      float refVal_setProcChance;
      ok &= ModelBase::fromJson(fieldValue, refVal_setProcChance);
      setProcChance(refVal_setProcChance);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("releaseDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("releaseDate")));
    if (!fieldValue.is_null()) {
      float refVal_setReleaseDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setReleaseDate);
      setReleaseDate(refVal_setReleaseDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("slot")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("slot")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setSlot;
      ok &= ModelBase::fromJson(fieldValue, refVal_setSlot);
      setSlot(refVal_setSlot);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("totalDamage")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("totalDamage")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setTotalDamage;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTotalDamage);
      setTotalDamage(refVal_setTotalDamage);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("vaultDate")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("vaultDate")));
    if (!fieldValue.is_null()) {
      utility::datetime refVal_setVaultDate;
      ok &= ModelBase::fromJson(fieldValue, refVal_setVaultDate);
      setVaultDate(refVal_setVaultDate);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("accuracy")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("accuracy")));
    if (!fieldValue.is_null()) {
      double refVal_setAccuracy;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAccuracy);
      setAccuracy(refVal_setAccuracy);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("ammo")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("ammo")));
    if (!fieldValue.is_null()) {
      double refVal_setAmmo;
      ok &= ModelBase::fromJson(fieldValue, refVal_setAmmo);
      setAmmo(refVal_setAmmo);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("magazineSize")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("magazineSize")));
    if (!fieldValue.is_null()) {
      int32_t refVal_setMagazineSize;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMagazineSize);
      setMagazineSize(refVal_setMagazineSize);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("multishot")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("multishot")));
    if (!fieldValue.is_null()) {
      float refVal_setMultishot;
      ok &= ModelBase::fromJson(fieldValue, refVal_setMultishot);
      setMultishot(refVal_setMultishot);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("noise")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("noise")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setNoise;
      ok &= ModelBase::fromJson(fieldValue, refVal_setNoise);
      setNoise(refVal_setNoise);
    }
  }
  if (val.has_field(utility::conversions::to_string_t(U("trigger")))) {
    const web::json::value &fieldValue =
        val.at(utility::conversions::to_string_t(U("trigger")));
    if (!fieldValue.is_null()) {
      utility::string_t refVal_setTrigger;
      ok &= ModelBase::fromJson(fieldValue, refVal_setTrigger);
      setTrigger(refVal_setTrigger);
    }
  }
  return ok;
}

void RangedWeapon::toMultipart(std::shared_ptr<MultipartFormData> multipart,
                               const utility::string_t &prefix) const {
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }
  if (m_NameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
  }
  if (m_UniqueNameIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("uniqueName")),
        m_UniqueName));
  }
  if (m_DescriptionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("description")),
        m_Description));
  }
  if (m_TypeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
  }
  if (m_TradableIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tradable")),
        m_Tradable));
  }
  if (m_CategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("category")),
        m_Category));
  }
  if (m_ProductCategoryIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("productCategory")),
        m_ProductCategory));
  }
  if (m_PatchlogsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("patchlogs")),
        m_Patchlogs));
  }
  if (m_ComponentsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("components")),
        m_Components));
  }
  if (m_IntroducedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("introduced")),
        m_Introduced));
  }
  if (m_EstimatedVaultDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("estimatedVaultDate")),
        m_EstimatedVaultDate));
  }
  if (m_UrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
  }
  if (m_MrIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("mr")), m_Mr));
  }
  if (m_Riven_dispositionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("riven_disposition")),
        m_Riven_disposition));
  }
  if (m_PolaritiesIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("polarities")),
        m_Polarities));
  }
  if (m_ThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("thumbnail")),
        m_Thumbnail));
  }
  if (m_TagsIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
  }
  if (m_VaultedIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vaulted")),
        m_Vaulted));
  }
  if (m_MarketCostIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("marketCost")),
        m_MarketCost));
  }
  if (m_BpCostIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("bpCost")), m_BpCost));
  }
  if (m_AttacksIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("attacks")),
        m_Attacks));
  }
  if (m_MasteryReqIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("masteryReq")),
        m_MasteryReq));
  }
  if (m_BuildPriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildPrice")),
        m_BuildPrice));
  }
  if (m_BuildTimeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildTime")),
        m_BuildTime));
  }
  if (m_SkipBuildTimePriceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("skipBuildTimePrice")),
        m_SkipBuildTimePrice));
  }
  if (m_BuildQuantityIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("buildQuantity")),
        m_BuildQuantity));
  }
  if (m_ConsumeOnBuildIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("consumeOnBuild")),
        m_ConsumeOnBuild));
  }
  if (m_WikiaThumbnailIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("wikiaThumbnail")),
        m_WikiaThumbnail));
  }
  if (m_WikiaUrlIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("wikiaUrl")),
        m_WikiaUrl));
  }
  if (m_CriticalChanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("criticalChance")),
        m_CriticalChance));
  }
  if (m_CriticalMultiplierIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("criticalMultiplier")),
        m_CriticalMultiplier));
  }
  if (m_DispositionIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("disposition")),
        m_Disposition));
  }
  if (m_FireRateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("fireRate")),
        m_FireRate));
  }
  if (m_OmegaAttenuationIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("omegaAttenuation")),
        m_OmegaAttenuation));
  }
  if (m_ProcChanceIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("procChance")),
        m_ProcChance));
  }
  if (m_ReleaseDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("releaseDate")),
        m_ReleaseDate));
  }
  if (m_SlotIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("slot")), m_Slot));
  }
  if (m_TotalDamageIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("totalDamage")),
        m_TotalDamage));
  }
  if (m_VaultDateIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("vaultDate")),
        m_VaultDate));
  }
  if (m_AccuracyIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("accuracy")),
        m_Accuracy));
  }
  if (m_AmmoIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("ammo")), m_Ammo));
  }
  if (m_MagazineSizeIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("magazineSize")),
        m_MagazineSize));
  }
  if (m_MultishotIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("multishot")),
        m_Multishot));
  }
  if (m_NoiseIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("noise")), m_Noise));
  }
  if (m_TriggerIsSet) {
    multipart->add(ModelBase::toHttpContent(
        namePrefix + utility::conversions::to_string_t(U("trigger")),
        m_Trigger));
  }
}

bool RangedWeapon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart,
                                 const utility::string_t &prefix) {
  bool ok = true;
  utility::string_t namePrefix = prefix;
  if (namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) !=
                                   utility::conversions::to_string_t(U("."))) {
    namePrefix += utility::conversions::to_string_t(U("."));
  }

  if (multipart->hasContent(utility::conversions::to_string_t(U("name")))) {
    utility::string_t refVal_setName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("name"))),
        refVal_setName);
    setName(refVal_setName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("uniqueName")))) {
    utility::string_t refVal_setUniqueName;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("uniqueName"))),
        refVal_setUniqueName);
    setUniqueName(refVal_setUniqueName);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("description")))) {
    utility::string_t refVal_setDescription;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("description"))),
        refVal_setDescription);
    setDescription(refVal_setDescription);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("type")))) {
    utility::string_t refVal_setType;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("type"))),
        refVal_setType);
    setType(refVal_setType);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tradable")))) {
    bool refVal_setTradable;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tradable"))),
        refVal_setTradable);
    setTradable(refVal_setTradable);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("category")))) {
    utility::string_t refVal_setCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("category"))),
        refVal_setCategory);
    setCategory(refVal_setCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("productCategory")))) {
    utility::string_t refVal_setProductCategory;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("productCategory"))),
        refVal_setProductCategory);
    setProductCategory(refVal_setProductCategory);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("patchlogs")))) {
    std::vector<std::shared_ptr<Patchlog>> refVal_setPatchlogs;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("patchlogs"))),
        refVal_setPatchlogs);
    setPatchlogs(refVal_setPatchlogs);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("components")))) {
    std::vector<std::shared_ptr<ShallowItem>> refVal_setComponents;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("components"))),
        refVal_setComponents);
    setComponents(refVal_setComponents);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("introduced")))) {
    std::shared_ptr<Introduced> refVal_setIntroduced;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("introduced"))),
        refVal_setIntroduced);
    setIntroduced(refVal_setIntroduced);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("estimatedVaultDate")))) {
    utility::datetime refVal_setEstimatedVaultDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("estimatedVaultDate"))),
        refVal_setEstimatedVaultDate);
    setEstimatedVaultDate(refVal_setEstimatedVaultDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("url")))) {
    utility::string_t refVal_setUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("url"))),
        refVal_setUrl);
    setUrl(refVal_setUrl);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("mr")))) {
    double refVal_setMr;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("mr"))),
        refVal_setMr);
    setMr(refVal_setMr);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("riven_disposition")))) {
    double refVal_setRivenDisposition;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("riven_disposition"))),
        refVal_setRivenDisposition);
    setRivenDisposition(refVal_setRivenDisposition);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("polarities")))) {
    std::vector<std::shared_ptr<Polarity>> refVal_setPolarities;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("polarities"))),
        refVal_setPolarities);
    setPolarities(refVal_setPolarities);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("thumbnail")))) {
    utility::string_t refVal_setThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("thumbnail"))),
        refVal_setThumbnail);
    setThumbnail(refVal_setThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("tags")))) {
    std::vector<utility::string_t> refVal_setTags;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("tags"))),
        refVal_setTags);
    setTags(refVal_setTags);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("vaulted")))) {
    bool refVal_setVaulted;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("vaulted"))),
        refVal_setVaulted);
    setVaulted(refVal_setVaulted);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("marketCost")))) {
    utility::string_t refVal_setMarketCost;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("marketCost"))),
        refVal_setMarketCost);
    setMarketCost(refVal_setMarketCost);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("bpCost")))) {
    utility::string_t refVal_setBpCost;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("bpCost"))),
        refVal_setBpCost);
    setBpCost(refVal_setBpCost);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("attacks")))) {
    std::vector<std::shared_ptr<Attack>> refVal_setAttacks;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("attacks"))),
        refVal_setAttacks);
    setAttacks(refVal_setAttacks);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("masteryReq")))) {
    int32_t refVal_setMasteryReq;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("masteryReq"))),
        refVal_setMasteryReq);
    setMasteryReq(refVal_setMasteryReq);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildPrice")))) {
    int32_t refVal_setBuildPrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildPrice"))),
        refVal_setBuildPrice);
    setBuildPrice(refVal_setBuildPrice);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildTime")))) {
    int32_t refVal_setBuildTime;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildTime"))),
        refVal_setBuildTime);
    setBuildTime(refVal_setBuildTime);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("skipBuildTimePrice")))) {
    int32_t refVal_setSkipBuildTimePrice;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("skipBuildTimePrice"))),
        refVal_setSkipBuildTimePrice);
    setSkipBuildTimePrice(refVal_setSkipBuildTimePrice);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("buildQuantity")))) {
    int32_t refVal_setBuildQuantity;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("buildQuantity"))),
        refVal_setBuildQuantity);
    setBuildQuantity(refVal_setBuildQuantity);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("consumeOnBuild")))) {
    bool refVal_setConsumeOnBuild;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("consumeOnBuild"))),
        refVal_setConsumeOnBuild);
    setConsumeOnBuild(refVal_setConsumeOnBuild);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("wikiaThumbnail")))) {
    utility::string_t refVal_setWikiaThumbnail;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("wikiaThumbnail"))),
        refVal_setWikiaThumbnail);
    setWikiaThumbnail(refVal_setWikiaThumbnail);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("wikiaUrl")))) {
    utility::string_t refVal_setWikiaUrl;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("wikiaUrl"))),
        refVal_setWikiaUrl);
    setWikiaUrl(refVal_setWikiaUrl);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("criticalChance")))) {
    float refVal_setCriticalChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("criticalChance"))),
        refVal_setCriticalChance);
    setCriticalChance(refVal_setCriticalChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("criticalMultiplier")))) {
    float refVal_setCriticalMultiplier;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("criticalMultiplier"))),
        refVal_setCriticalMultiplier);
    setCriticalMultiplier(refVal_setCriticalMultiplier);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("disposition")))) {
    int32_t refVal_setDisposition;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("disposition"))),
        refVal_setDisposition);
    setDisposition(refVal_setDisposition);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("fireRate")))) {
    float refVal_setFireRate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("fireRate"))),
        refVal_setFireRate);
    setFireRate(refVal_setFireRate);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("omegaAttenuation")))) {
    float refVal_setOmegaAttenuation;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("omegaAttenuation"))),
        refVal_setOmegaAttenuation);
    setOmegaAttenuation(refVal_setOmegaAttenuation);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("procChance")))) {
    float refVal_setProcChance;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("procChance"))),
        refVal_setProcChance);
    setProcChance(refVal_setProcChance);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("releaseDate")))) {
    float refVal_setReleaseDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("releaseDate"))),
        refVal_setReleaseDate);
    setReleaseDate(refVal_setReleaseDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("slot")))) {
    int32_t refVal_setSlot;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("slot"))),
        refVal_setSlot);
    setSlot(refVal_setSlot);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("totalDamage")))) {
    int32_t refVal_setTotalDamage;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("totalDamage"))),
        refVal_setTotalDamage);
    setTotalDamage(refVal_setTotalDamage);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("vaultDate")))) {
    utility::datetime refVal_setVaultDate;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("vaultDate"))),
        refVal_setVaultDate);
    setVaultDate(refVal_setVaultDate);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("accuracy")))) {
    double refVal_setAccuracy;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("accuracy"))),
        refVal_setAccuracy);
    setAccuracy(refVal_setAccuracy);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("ammo")))) {
    double refVal_setAmmo;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("ammo"))),
        refVal_setAmmo);
    setAmmo(refVal_setAmmo);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("magazineSize")))) {
    int32_t refVal_setMagazineSize;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("magazineSize"))),
        refVal_setMagazineSize);
    setMagazineSize(refVal_setMagazineSize);
  }
  if (multipart->hasContent(
          utility::conversions::to_string_t(U("multishot")))) {
    float refVal_setMultishot;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(
            utility::conversions::to_string_t(U("multishot"))),
        refVal_setMultishot);
    setMultishot(refVal_setMultishot);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("noise")))) {
    utility::string_t refVal_setNoise;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("noise"))),
        refVal_setNoise);
    setNoise(refVal_setNoise);
  }
  if (multipart->hasContent(utility::conversions::to_string_t(U("trigger")))) {
    utility::string_t refVal_setTrigger;
    ok &= ModelBase::fromHttpContent(
        multipart->getContent(utility::conversions::to_string_t(U("trigger"))),
        refVal_setTrigger);
    setTrigger(refVal_setTrigger);
  }
  return ok;
}

utility::string_t RangedWeapon::getName() const { return m_Name; }

void RangedWeapon::setName(const utility::string_t &value) {
  m_Name = value;
  m_NameIsSet = true;
}

bool RangedWeapon::nameIsSet() const { return m_NameIsSet; }

void RangedWeapon::unsetName() { m_NameIsSet = false; }
utility::string_t RangedWeapon::getUniqueName() const { return m_UniqueName; }

void RangedWeapon::setUniqueName(const utility::string_t &value) {
  m_UniqueName = value;
  m_UniqueNameIsSet = true;
}

bool RangedWeapon::uniqueNameIsSet() const { return m_UniqueNameIsSet; }

void RangedWeapon::unsetUniqueName() { m_UniqueNameIsSet = false; }
utility::string_t RangedWeapon::getDescription() const { return m_Description; }

void RangedWeapon::setDescription(const utility::string_t &value) {
  m_Description = value;
  m_DescriptionIsSet = true;
}

bool RangedWeapon::descriptionIsSet() const { return m_DescriptionIsSet; }

void RangedWeapon::unsetDescription() { m_DescriptionIsSet = false; }
utility::string_t RangedWeapon::getType() const { return m_Type; }

void RangedWeapon::setType(const utility::string_t &value) {
  m_Type = value;
  m_TypeIsSet = true;
}

bool RangedWeapon::typeIsSet() const { return m_TypeIsSet; }

void RangedWeapon::unsetType() { m_TypeIsSet = false; }
bool RangedWeapon::isTradable() const { return m_Tradable; }

void RangedWeapon::setTradable(bool value) {
  m_Tradable = value;
  m_TradableIsSet = true;
}

bool RangedWeapon::tradableIsSet() const { return m_TradableIsSet; }

void RangedWeapon::unsetTradable() { m_TradableIsSet = false; }
utility::string_t RangedWeapon::getCategory() const { return m_Category; }

void RangedWeapon::setCategory(const utility::string_t &value) {
  m_Category = value;
  m_CategoryIsSet = true;
}

bool RangedWeapon::categoryIsSet() const { return m_CategoryIsSet; }

void RangedWeapon::unsetCategory() { m_CategoryIsSet = false; }
utility::string_t RangedWeapon::getProductCategory() const {
  return m_ProductCategory;
}

void RangedWeapon::setProductCategory(const utility::string_t &value) {
  m_ProductCategory = value;
  m_ProductCategoryIsSet = true;
}

bool RangedWeapon::productCategoryIsSet() const {
  return m_ProductCategoryIsSet;
}

void RangedWeapon::unsetProductCategory() { m_ProductCategoryIsSet = false; }
std::vector<std::shared_ptr<Patchlog>> &RangedWeapon::getPatchlogs() {
  return m_Patchlogs;
}

void RangedWeapon::setPatchlogs(
    const std::vector<std::shared_ptr<Patchlog>> &value) {
  m_Patchlogs = value;
  m_PatchlogsIsSet = true;
}

bool RangedWeapon::patchlogsIsSet() const { return m_PatchlogsIsSet; }

void RangedWeapon::unsetPatchlogs() { m_PatchlogsIsSet = false; }
std::vector<std::shared_ptr<ShallowItem>> &RangedWeapon::getComponents() {
  return m_Components;
}

void RangedWeapon::setComponents(
    const std::vector<std::shared_ptr<ShallowItem>> &value) {
  m_Components = value;
  m_ComponentsIsSet = true;
}

bool RangedWeapon::componentsIsSet() const { return m_ComponentsIsSet; }

void RangedWeapon::unsetComponents() { m_ComponentsIsSet = false; }
std::shared_ptr<Introduced> RangedWeapon::getIntroduced() const {
  return m_Introduced;
}

void RangedWeapon::setIntroduced(const std::shared_ptr<Introduced> &value) {
  m_Introduced = value;
  m_IntroducedIsSet = true;
}

bool RangedWeapon::introducedIsSet() const { return m_IntroducedIsSet; }

void RangedWeapon::unsetIntroduced() { m_IntroducedIsSet = false; }
utility::datetime RangedWeapon::getEstimatedVaultDate() const {
  return m_EstimatedVaultDate;
}

void RangedWeapon::setEstimatedVaultDate(const utility::datetime &value) {
  m_EstimatedVaultDate = value;
  m_EstimatedVaultDateIsSet = true;
}

bool RangedWeapon::estimatedVaultDateIsSet() const {
  return m_EstimatedVaultDateIsSet;
}

void RangedWeapon::unsetEstimatedVaultDate() {
  m_EstimatedVaultDateIsSet = false;
}
utility::string_t RangedWeapon::getUrl() const { return m_Url; }

void RangedWeapon::setUrl(const utility::string_t &value) {
  m_Url = value;
  m_UrlIsSet = true;
}

bool RangedWeapon::urlIsSet() const { return m_UrlIsSet; }

void RangedWeapon::unsetUrl() { m_UrlIsSet = false; }
double RangedWeapon::getMr() const { return m_Mr; }

void RangedWeapon::setMr(double value) {
  m_Mr = value;
  m_MrIsSet = true;
}

bool RangedWeapon::mrIsSet() const { return m_MrIsSet; }

void RangedWeapon::unsetMr() { m_MrIsSet = false; }
double RangedWeapon::getRivenDisposition() const { return m_Riven_disposition; }

void RangedWeapon::setRivenDisposition(double value) {
  m_Riven_disposition = value;
  m_Riven_dispositionIsSet = true;
}

bool RangedWeapon::rivenDispositionIsSet() const {
  return m_Riven_dispositionIsSet;
}

void RangedWeapon::unsetRiven_disposition() {
  m_Riven_dispositionIsSet = false;
}
std::vector<std::shared_ptr<Polarity>> &RangedWeapon::getPolarities() {
  return m_Polarities;
}

void RangedWeapon::setPolarities(
    const std::vector<std::shared_ptr<Polarity>> &value) {
  m_Polarities = value;
  m_PolaritiesIsSet = true;
}

bool RangedWeapon::polaritiesIsSet() const { return m_PolaritiesIsSet; }

void RangedWeapon::unsetPolarities() { m_PolaritiesIsSet = false; }
utility::string_t RangedWeapon::getThumbnail() const { return m_Thumbnail; }

void RangedWeapon::setThumbnail(const utility::string_t &value) {
  m_Thumbnail = value;
  m_ThumbnailIsSet = true;
}

bool RangedWeapon::thumbnailIsSet() const { return m_ThumbnailIsSet; }

void RangedWeapon::unsetThumbnail() { m_ThumbnailIsSet = false; }
std::vector<utility::string_t> &RangedWeapon::getTags() { return m_Tags; }

void RangedWeapon::setTags(const std::vector<utility::string_t> &value) {
  m_Tags = value;
  m_TagsIsSet = true;
}

bool RangedWeapon::tagsIsSet() const { return m_TagsIsSet; }

void RangedWeapon::unsetTags() { m_TagsIsSet = false; }
bool RangedWeapon::isVaulted() const { return m_Vaulted; }

void RangedWeapon::setVaulted(bool value) {
  m_Vaulted = value;
  m_VaultedIsSet = true;
}

bool RangedWeapon::vaultedIsSet() const { return m_VaultedIsSet; }

void RangedWeapon::unsetVaulted() { m_VaultedIsSet = false; }
utility::string_t RangedWeapon::getMarketCost() const { return m_MarketCost; }

void RangedWeapon::setMarketCost(const utility::string_t &value) {
  m_MarketCost = value;
  m_MarketCostIsSet = true;
}

bool RangedWeapon::marketCostIsSet() const { return m_MarketCostIsSet; }

void RangedWeapon::unsetMarketCost() { m_MarketCostIsSet = false; }
utility::string_t RangedWeapon::getBpCost() const { return m_BpCost; }

void RangedWeapon::setBpCost(const utility::string_t &value) {
  m_BpCost = value;
  m_BpCostIsSet = true;
}

bool RangedWeapon::bpCostIsSet() const { return m_BpCostIsSet; }

void RangedWeapon::unsetBpCost() { m_BpCostIsSet = false; }
std::vector<std::shared_ptr<Attack>> &RangedWeapon::getAttacks() {
  return m_Attacks;
}

void RangedWeapon::setAttacks(
    const std::vector<std::shared_ptr<Attack>> &value) {
  m_Attacks = value;
  m_AttacksIsSet = true;
}

bool RangedWeapon::attacksIsSet() const { return m_AttacksIsSet; }

void RangedWeapon::unsetAttacks() { m_AttacksIsSet = false; }
int32_t RangedWeapon::getMasteryReq() const { return m_MasteryReq; }

void RangedWeapon::setMasteryReq(int32_t value) {
  m_MasteryReq = value;
  m_MasteryReqIsSet = true;
}

bool RangedWeapon::masteryReqIsSet() const { return m_MasteryReqIsSet; }

void RangedWeapon::unsetMasteryReq() { m_MasteryReqIsSet = false; }
int32_t RangedWeapon::getBuildPrice() const { return m_BuildPrice; }

void RangedWeapon::setBuildPrice(int32_t value) {
  m_BuildPrice = value;
  m_BuildPriceIsSet = true;
}

bool RangedWeapon::buildPriceIsSet() const { return m_BuildPriceIsSet; }

void RangedWeapon::unsetBuildPrice() { m_BuildPriceIsSet = false; }
int32_t RangedWeapon::getBuildTime() const { return m_BuildTime; }

void RangedWeapon::setBuildTime(int32_t value) {
  m_BuildTime = value;
  m_BuildTimeIsSet = true;
}

bool RangedWeapon::buildTimeIsSet() const { return m_BuildTimeIsSet; }

void RangedWeapon::unsetBuildTime() { m_BuildTimeIsSet = false; }
int32_t RangedWeapon::getSkipBuildTimePrice() const {
  return m_SkipBuildTimePrice;
}

void RangedWeapon::setSkipBuildTimePrice(int32_t value) {
  m_SkipBuildTimePrice = value;
  m_SkipBuildTimePriceIsSet = true;
}

bool RangedWeapon::skipBuildTimePriceIsSet() const {
  return m_SkipBuildTimePriceIsSet;
}

void RangedWeapon::unsetSkipBuildTimePrice() {
  m_SkipBuildTimePriceIsSet = false;
}
int32_t RangedWeapon::getBuildQuantity() const { return m_BuildQuantity; }

void RangedWeapon::setBuildQuantity(int32_t value) {
  m_BuildQuantity = value;
  m_BuildQuantityIsSet = true;
}

bool RangedWeapon::buildQuantityIsSet() const { return m_BuildQuantityIsSet; }

void RangedWeapon::unsetBuildQuantity() { m_BuildQuantityIsSet = false; }
bool RangedWeapon::isConsumeOnBuild() const { return m_ConsumeOnBuild; }

void RangedWeapon::setConsumeOnBuild(bool value) {
  m_ConsumeOnBuild = value;
  m_ConsumeOnBuildIsSet = true;
}

bool RangedWeapon::consumeOnBuildIsSet() const { return m_ConsumeOnBuildIsSet; }

void RangedWeapon::unsetConsumeOnBuild() { m_ConsumeOnBuildIsSet = false; }
utility::string_t RangedWeapon::getWikiaThumbnail() const {
  return m_WikiaThumbnail;
}

void RangedWeapon::setWikiaThumbnail(const utility::string_t &value) {
  m_WikiaThumbnail = value;
  m_WikiaThumbnailIsSet = true;
}

bool RangedWeapon::wikiaThumbnailIsSet() const { return m_WikiaThumbnailIsSet; }

void RangedWeapon::unsetWikiaThumbnail() { m_WikiaThumbnailIsSet = false; }
utility::string_t RangedWeapon::getWikiaUrl() const { return m_WikiaUrl; }

void RangedWeapon::setWikiaUrl(const utility::string_t &value) {
  m_WikiaUrl = value;
  m_WikiaUrlIsSet = true;
}

bool RangedWeapon::wikiaUrlIsSet() const { return m_WikiaUrlIsSet; }

void RangedWeapon::unsetWikiaUrl() { m_WikiaUrlIsSet = false; }
float RangedWeapon::getCriticalChance() const { return m_CriticalChance; }

void RangedWeapon::setCriticalChance(float value) {
  m_CriticalChance = value;
  m_CriticalChanceIsSet = true;
}

bool RangedWeapon::criticalChanceIsSet() const { return m_CriticalChanceIsSet; }

void RangedWeapon::unsetCriticalChance() { m_CriticalChanceIsSet = false; }
float RangedWeapon::getCriticalMultiplier() const {
  return m_CriticalMultiplier;
}

void RangedWeapon::setCriticalMultiplier(float value) {
  m_CriticalMultiplier = value;
  m_CriticalMultiplierIsSet = true;
}

bool RangedWeapon::criticalMultiplierIsSet() const {
  return m_CriticalMultiplierIsSet;
}

void RangedWeapon::unsetCriticalMultiplier() {
  m_CriticalMultiplierIsSet = false;
}
int32_t RangedWeapon::getDisposition() const { return m_Disposition; }

void RangedWeapon::setDisposition(int32_t value) {
  m_Disposition = value;
  m_DispositionIsSet = true;
}

bool RangedWeapon::dispositionIsSet() const { return m_DispositionIsSet; }

void RangedWeapon::unsetDisposition() { m_DispositionIsSet = false; }
float RangedWeapon::getFireRate() const { return m_FireRate; }

void RangedWeapon::setFireRate(float value) {
  m_FireRate = value;
  m_FireRateIsSet = true;
}

bool RangedWeapon::fireRateIsSet() const { return m_FireRateIsSet; }

void RangedWeapon::unsetFireRate() { m_FireRateIsSet = false; }
float RangedWeapon::getOmegaAttenuation() const { return m_OmegaAttenuation; }

void RangedWeapon::setOmegaAttenuation(float value) {
  m_OmegaAttenuation = value;
  m_OmegaAttenuationIsSet = true;
}

bool RangedWeapon::omegaAttenuationIsSet() const {
  return m_OmegaAttenuationIsSet;
}

void RangedWeapon::unsetOmegaAttenuation() { m_OmegaAttenuationIsSet = false; }
float RangedWeapon::getProcChance() const { return m_ProcChance; }

void RangedWeapon::setProcChance(float value) {
  m_ProcChance = value;
  m_ProcChanceIsSet = true;
}

bool RangedWeapon::procChanceIsSet() const { return m_ProcChanceIsSet; }

void RangedWeapon::unsetProcChance() { m_ProcChanceIsSet = false; }
float RangedWeapon::getReleaseDate() const { return m_ReleaseDate; }

void RangedWeapon::setReleaseDate(float value) {
  m_ReleaseDate = value;
  m_ReleaseDateIsSet = true;
}

bool RangedWeapon::releaseDateIsSet() const { return m_ReleaseDateIsSet; }

void RangedWeapon::unsetReleaseDate() { m_ReleaseDateIsSet = false; }
int32_t RangedWeapon::getSlot() const { return m_Slot; }

void RangedWeapon::setSlot(int32_t value) {
  m_Slot = value;
  m_SlotIsSet = true;
}

bool RangedWeapon::slotIsSet() const { return m_SlotIsSet; }

void RangedWeapon::unsetSlot() { m_SlotIsSet = false; }
int32_t RangedWeapon::getTotalDamage() const { return m_TotalDamage; }

void RangedWeapon::setTotalDamage(int32_t value) {
  m_TotalDamage = value;
  m_TotalDamageIsSet = true;
}

bool RangedWeapon::totalDamageIsSet() const { return m_TotalDamageIsSet; }

void RangedWeapon::unsetTotalDamage() { m_TotalDamageIsSet = false; }
utility::datetime RangedWeapon::getVaultDate() const { return m_VaultDate; }

void RangedWeapon::setVaultDate(const utility::datetime &value) {
  m_VaultDate = value;
  m_VaultDateIsSet = true;
}

bool RangedWeapon::vaultDateIsSet() const { return m_VaultDateIsSet; }

void RangedWeapon::unsetVaultDate() { m_VaultDateIsSet = false; }
double RangedWeapon::getAccuracy() const { return m_Accuracy; }

void RangedWeapon::setAccuracy(double value) {
  m_Accuracy = value;
  m_AccuracyIsSet = true;
}

bool RangedWeapon::accuracyIsSet() const { return m_AccuracyIsSet; }

void RangedWeapon::unsetAccuracy() { m_AccuracyIsSet = false; }
double RangedWeapon::getAmmo() const { return m_Ammo; }

void RangedWeapon::setAmmo(double value) {
  m_Ammo = value;
  m_AmmoIsSet = true;
}

bool RangedWeapon::ammoIsSet() const { return m_AmmoIsSet; }

void RangedWeapon::unsetAmmo() { m_AmmoIsSet = false; }
int32_t RangedWeapon::getMagazineSize() const { return m_MagazineSize; }

void RangedWeapon::setMagazineSize(int32_t value) {
  m_MagazineSize = value;
  m_MagazineSizeIsSet = true;
}

bool RangedWeapon::magazineSizeIsSet() const { return m_MagazineSizeIsSet; }

void RangedWeapon::unsetMagazineSize() { m_MagazineSizeIsSet = false; }
float RangedWeapon::getMultishot() const { return m_Multishot; }

void RangedWeapon::setMultishot(float value) {
  m_Multishot = value;
  m_MultishotIsSet = true;
}

bool RangedWeapon::multishotIsSet() const { return m_MultishotIsSet; }

void RangedWeapon::unsetMultishot() { m_MultishotIsSet = false; }
utility::string_t RangedWeapon::getNoise() const { return m_Noise; }

void RangedWeapon::setNoise(const utility::string_t &value) {
  m_Noise = value;
  m_NoiseIsSet = true;
}

bool RangedWeapon::noiseIsSet() const { return m_NoiseIsSet; }

void RangedWeapon::unsetNoise() { m_NoiseIsSet = false; }
utility::string_t RangedWeapon::getTrigger() const { return m_Trigger; }

void RangedWeapon::setTrigger(const utility::string_t &value) {
  m_Trigger = value;
  m_TriggerIsSet = true;
}

bool RangedWeapon::triggerIsSet() const { return m_TriggerIsSet; }

void RangedWeapon::unsetTrigger() { m_TriggerIsSet = false; }
} // namespace model
} // namespace client
} // namespace openapitools
} // namespace org
