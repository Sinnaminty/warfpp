/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/ApiConfiguration.h"

namespace org {
namespace openapitools {
namespace client {
namespace api {

ApiConfiguration::ApiConfiguration() {}

ApiConfiguration::~ApiConfiguration() {}

const web::http::client::http_client_config &
ApiConfiguration::getHttpConfig() const {
  return m_HttpConfig;
}

void ApiConfiguration::setHttpConfig(
    web::http::client::http_client_config &value) {
  m_HttpConfig = value;
}

utility::string_t ApiConfiguration::getBaseUrl() const { return m_BaseUrl; }

void ApiConfiguration::setBaseUrl(const utility::string_t value) {
  m_BaseUrl = value;
}

utility::string_t ApiConfiguration::getUserAgent() const { return m_UserAgent; }

void ApiConfiguration::setUserAgent(const utility::string_t value) {
  m_UserAgent = value;
}

std::map<utility::string_t, utility::string_t> &
ApiConfiguration::getDefaultHeaders() {
  return m_DefaultHeaders;
}

const std::map<utility::string_t, utility::string_t> &
ApiConfiguration::getDefaultHeaders() const {
  return m_DefaultHeaders;
}

utility::string_t
ApiConfiguration::getApiKey(const utility::string_t &prefix) const {
  auto result = m_ApiKeys.find(prefix);
  if (result != m_ApiKeys.end()) {
    return result->second;
  }
  return utility::conversions::to_string_t("");
}

void ApiConfiguration::setApiKey(const utility::string_t &prefix,
                                 const utility::string_t &apiKey) {
  m_ApiKeys[prefix] = apiKey;
}

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org
