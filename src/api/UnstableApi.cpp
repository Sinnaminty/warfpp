/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/api/UnstableApi.h"
#include "CppRestOpenAPIClient/IHttpBody.h"
#include "CppRestOpenAPIClient/JsonBody.h"
#include "CppRestOpenAPIClient/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

UnstableApi::UnstableApi(std::shared_ptr<const ApiClient> apiClient)
    : m_ApiClient(apiClient) {}

UnstableApi::~UnstableApi() {}

pplx::task<std::shared_ptr<Arbitration>> UnstableApi::getArbitrationByPlatform(
    std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
    boost::optional<std::shared_ptr<Language>> acceptLanguage) const {

  // verify the required parameter 'language' is set
  if (language == nullptr) {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "Missing required parameter 'language' when calling "
                           "UnstableApi->getArbitrationByPlatform"));
  }

  // verify the required parameter 'platform' is set
  if (platform == nullptr) {
    throw ApiException(400,
                       utility::conversions::to_string_t(
                           "Missing required parameter 'platform' when calling "
                           "UnstableApi->getArbitrationByPlatform"));
  }

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/{platform}/arbitration");
  boost::replace_all(
      localVarPath,
      utility::conversions::to_string_t("{") +
          utility::conversions::to_string_t("platform") +
          utility::conversions::to_string_t("}"),
      web::uri::encode_uri(ApiClient::parameterToString(platform)));

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "UnstableApi->getArbitrationByPlatform does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  if (language != nullptr) {
    localVarQueryParams[utility::conversions::to_string_t("language")] =
        ApiClient::parameterToString(language);
  }
  if (acceptLanguage && *acceptLanguage != nullptr) {
    localVarHeaderParams[utility::conversions::to_string_t("Accept-Language")] =
        ApiClient::parameterToString(*acceptLanguage);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "UnstableApi->getArbitrationByPlatform does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getArbitrationByPlatform: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getArbitrationByPlatform: unexpected "
                    "response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Arbitration> localVarResult(new Arbitration());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getArbitrationByPlatform: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::vector<std::shared_ptr<Arbitration>>>
UnstableApi::getKuvaByPlatform(
    std::shared_ptr<Language> language, std::shared_ptr<Platform> platform,
    boost::optional<std::shared_ptr<Language>> acceptLanguage) const {

  // verify the required parameter 'language' is set
  if (language == nullptr) {
    throw ApiException(400, utility::conversions::to_string_t(
                                "Missing required parameter 'language' when "
                                "calling UnstableApi->getKuvaByPlatform"));
  }

  // verify the required parameter 'platform' is set
  if (platform == nullptr) {
    throw ApiException(400, utility::conversions::to_string_t(
                                "Missing required parameter 'platform' when "
                                "calling UnstableApi->getKuvaByPlatform"));
  }

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/{platform}/kuva");
  boost::replace_all(
      localVarPath,
      utility::conversions::to_string_t("{") +
          utility::conversions::to_string_t("platform") +
          utility::conversions::to_string_t("}"),
      web::uri::encode_uri(ApiClient::parameterToString(platform)));

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "UnstableApi->getKuvaByPlatform does not "
                                "produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  if (language != nullptr) {
    localVarQueryParams[utility::conversions::to_string_t("language")] =
        ApiClient::parameterToString(language);
  }
  if (acceptLanguage && *acceptLanguage != nullptr) {
    localVarHeaderParams[utility::conversions::to_string_t("Accept-Language")] =
        ApiClient::parameterToString(*acceptLanguage);
  }

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "UnstableApi->getKuvaByPlatform does not "
                                "consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getKuvaByPlatform: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getKuvaByPlatform: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::vector<std::shared_ptr<Arbitration>> localVarResult;

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);
          for (auto &localVarItem : localVarJson.as_array()) {
            std::shared_ptr<Arbitration> localVarItemObj;
            ModelBase::fromJson(localVarItem, localVarItemObj);
            localVarResult.push_back(localVarItemObj);
          }
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getKuvaByPlatform: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org
