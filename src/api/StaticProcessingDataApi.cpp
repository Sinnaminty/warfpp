/**
 * WarframeStat.us API
 * Simple API for data from the game Warframe. [Parser
 * Docs](https://wfcd.github.io/warframe-worldstate-parser/) [Items
 * Types](https://github.com/WFCD/warframe-items/blob/master/index.d.ts)
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: tobiah@protonmail.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.8.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "CppRestOpenAPIClient/api/StaticProcessingDataApi.h"
#include "CppRestOpenAPIClient/IHttpBody.h"
#include "CppRestOpenAPIClient/JsonBody.h"
#include "CppRestOpenAPIClient/MultipartFormData.h"

#include <boost/algorithm/string/replace.hpp>

#include <unordered_set>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;

StaticProcessingDataApi::StaticProcessingDataApi(
    std::shared_ptr<const ApiClient> apiClient)
    : m_ApiClient(apiClient) {}

StaticProcessingDataApi::~StaticProcessingDataApi() {}

pplx::task<std::shared_ptr<AcolyteI18n>>
StaticProcessingDataApi::getAcolyteData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/persistentEnemy");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getAcolyteData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getAcolyteData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getAcolyteData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getAcolyteData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<AcolyteI18n> localVarResult(new AcolyteI18n());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getAcolyteData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::vector<std::shared_ptr<Arcane>>>
StaticProcessingDataApi::getArcanesData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/arcanes");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getArcanesData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getArcanesData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getArcanesData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getArcanesData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::vector<std::shared_ptr<Arcane>> localVarResult;

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);
          for (auto &localVarItem : localVarJson.as_array()) {
            std::shared_ptr<Arcane> localVarItemObj;
            ModelBase::fromJson(localVarItem, localVarItemObj);
            localVarResult.push_back(localVarItemObj);
          }
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getArcanesData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Conclave>>
StaticProcessingDataApi::getConclaveData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/conclave");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getConclaveData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getConclaveData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getConclaveData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getConclaveData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Conclave> localVarResult(new Conclave());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getConclaveData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Object>>
StaticProcessingDataApi::getEventsData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t("/events");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getEventsData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getEventsData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getEventsData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getEventsData: unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Object> localVarResult(new Object());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getEventsData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Factions>>
StaticProcessingDataApi::getFactionsData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/factions");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getFactionsData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getFactionsData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getFactionsData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getFactionsData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Factions> localVarResult(new Factions());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getFactionsData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<FissureModifiers>>
StaticProcessingDataApi::getFissuresData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/fissureModifiers");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getFissuresData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getFissuresData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getFissuresData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getFissuresData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<FissureModifiers> localVarResult(
            new FissureModifiers());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getFissuresData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Languages>>
StaticProcessingDataApi::getLanguageData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/languages");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getLanguageData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getLanguageData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getLanguageData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getLanguageData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Languages> localVarResult(new Languages());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getLanguageData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::vector<std::shared_ptr<Language>>>
StaticProcessingDataApi::getLocales() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/locales");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getLocales does not "
                                "produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getLocales does not "
                                "consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t("error calling getLocales: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getLocales: unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::vector<std::shared_ptr<Language>> localVarResult;

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);
          for (auto &localVarItem : localVarJson.as_array()) {
            std::shared_ptr<Language> localVarItemObj;
            ModelBase::fromJson(localVarItem, localVarItemObj);
            localVarResult.push_back(localVarItemObj);
          }
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500, utility::conversions::to_string_t(
                       "error calling getLocales: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<MissionTypes>>
StaticProcessingDataApi::getMissionData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/missionTypes");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getMissionData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getMissionData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getMissionData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getMissionData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<MissionTypes> localVarResult(new MissionTypes());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getMissionData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<SolNode>>
StaticProcessingDataApi::getNodeData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/solNodes");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getNodeData does not "
                                "produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getNodeData does not "
                                "consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t("error calling getNodeData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getNodeData: unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<SolNode> localVarResult(new SolNode());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500, utility::conversions::to_string_t(
                       "error calling getNodeData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<OperationTypes>>
StaticProcessingDataApi::getOperationsData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/operationTypes");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getOperationsData "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getOperationsData "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getOperationsData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getOperationsData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<OperationTypes> localVarResult(new OperationTypes());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getOperationsData: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<SortieData>>
StaticProcessingDataApi::getSortieData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath = utility::conversions::to_string_t("/sortie");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getSortieData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getSortieData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getSortieData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getSortieData: unexpected response type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<SortieData> localVarResult(new SortieData());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getSortieData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Syndicates>>
StaticProcessingDataApi::getSyndicateData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/syndicates");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getSyndicateData "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getSyndicateData "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getSyndicateData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getSyndicateData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Syndicates> localVarResult(new Syndicates());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getSyndicateData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<Tutorials>>
StaticProcessingDataApi::getTutorialData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/tutorials");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getTutorialData does "
                                "not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getTutorialData does "
                                "not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getTutorialData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getTutorialData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<Tutorials> localVarResult(new Tutorials());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(
              500,
              utility::conversions::to_string_t(
                  "error calling getTutorialData: unsupported response type"));
        }

        return localVarResult;
      });
}
pplx::task<std::shared_ptr<UpgradeTypes>>
StaticProcessingDataApi::getUpgradeTypesData() const {

  std::shared_ptr<const ApiConfiguration> localVarApiConfiguration(
      m_ApiClient->getConfiguration());
  utility::string_t localVarPath =
      utility::conversions::to_string_t("/upgradeTypes");

  std::map<utility::string_t, utility::string_t> localVarQueryParams;
  std::map<utility::string_t, utility::string_t> localVarHeaderParams(
      localVarApiConfiguration->getDefaultHeaders());
  std::map<utility::string_t, utility::string_t> localVarFormParams;
  std::map<utility::string_t, std::shared_ptr<HttpContent>> localVarFileParams;

  std::unordered_set<utility::string_t> localVarResponseHttpContentTypes;
  localVarResponseHttpContentTypes.insert(
      utility::conversions::to_string_t("application/json"));

  utility::string_t localVarResponseHttpContentType;

  // use JSON if possible
  if (localVarResponseHttpContentTypes.size() == 0) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // JSON
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("application/json")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarResponseHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarResponseHttpContentTypes.end()) {
    localVarResponseHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else {
    throw ApiException(400, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getUpgradeTypesData "
                                "does not produce any supported media type"));
  }

  localVarHeaderParams[utility::conversions::to_string_t("Accept")] =
      localVarResponseHttpContentType;

  std::unordered_set<utility::string_t> localVarConsumeHttpContentTypes;

  std::shared_ptr<IHttpBody> localVarHttpBody;
  utility::string_t localVarRequestHttpContentType;

  // use JSON if possible
  if (localVarConsumeHttpContentTypes.size() == 0 ||
      localVarConsumeHttpContentTypes.find(utility::conversions::to_string_t(
          "application/json")) != localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/json");
  }
  // multipart formdata
  else if (localVarConsumeHttpContentTypes.find(
               utility::conversions::to_string_t("multipart/form-data")) !=
           localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("multipart/form-data");
  } else if (localVarConsumeHttpContentTypes.find(
                 utility::conversions::to_string_t(
                     "application/x-www-form-urlencoded")) !=
             localVarConsumeHttpContentTypes.end()) {
    localVarRequestHttpContentType =
        utility::conversions::to_string_t("application/x-www-form-urlencoded");
  } else {
    throw ApiException(415, utility::conversions::to_string_t(
                                "StaticProcessingDataApi->getUpgradeTypesData "
                                "does not consume any supported media type"));
  }

  return m_ApiClient
      ->callApi(localVarPath, utility::conversions::to_string_t("GET"),
                localVarQueryParams, localVarHttpBody, localVarHeaderParams,
                localVarFormParams, localVarFileParams,
                localVarRequestHttpContentType)
      .then([=, this](web::http::http_response localVarResponse) {
        if (m_ApiClient->getResponseHandler()) {
          m_ApiClient->getResponseHandler()(localVarResponse.status_code(),
                                            localVarResponse.headers());
        }

        // 1xx - informational : OK
        // 2xx - successful       : OK
        // 3xx - redirection   : OK
        // 4xx - client error  : not OK
        // 5xx - client error  : not OK
        if (localVarResponse.status_code() >= 400) {
          throw ApiException(
              localVarResponse.status_code(),
              utility::conversions::to_string_t(
                  "error calling getUpgradeTypesData: ") +
                  localVarResponse.reason_phrase(),
              std::make_shared<std::stringstream>(
                  localVarResponse.extract_utf8string(true).get()));
        }

        // check response content type
        if (localVarResponse.headers().has(
                utility::conversions::to_string_t("Content-Type"))) {
          utility::string_t localVarContentType =
              localVarResponse
                  .headers()[utility::conversions::to_string_t("Content-Type")];
          if (localVarContentType.find(localVarResponseHttpContentType) ==
              std::string::npos) {
            throw ApiException(
                500,
                utility::conversions::to_string_t(
                    "error calling getUpgradeTypesData: unexpected response "
                    "type: ") +
                    localVarContentType,
                std::make_shared<std::stringstream>(
                    localVarResponse.extract_utf8string(true).get()));
          }
        }

        return localVarResponse.extract_string();
      })
      .then([=, this](utility::string_t localVarResponse) {
        std::shared_ptr<UpgradeTypes> localVarResult(new UpgradeTypes());

        if (localVarResponseHttpContentType ==
            utility::conversions::to_string_t("application/json")) {
          web::json::value localVarJson =
              web::json::value::parse(localVarResponse);

          ModelBase::fromJson(localVarJson, localVarResult);
        }
        // else if(localVarResponseHttpContentType ==
        // utility::conversions::to_string_t("multipart/form-data"))
        // {
        // TODO multipart response parsing
        // }
        else {
          throw ApiException(500, utility::conversions::to_string_t(
                                      "error calling getUpgradeTypesData: "
                                      "unsupported response type"));
        }

        return localVarResult;
      });
}

} // namespace api
} // namespace client
} // namespace openapitools
} // namespace org
